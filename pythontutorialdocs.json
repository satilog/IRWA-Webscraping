[
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules\u00b6", "M_Desc": "If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead.  This is known as creating a script.  As your program gets longer, you may want to split it into several files for easier maintenance.  You may also want to use a handy function that you\u2019ve written in several programs without copying its definition into each program.To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a module; definitions from a module can be imported into other modules or into the main module (the collection of variables that you have access to in a script executed at the top level and in calculator mode).A module is a file containing Python definitions and statements.  The file name is the module name with the suffix .py appended.  Within a module, the module\u2019s name (as a string) is available as the value of the global variable __name__.  For instance, use your favorite text editor to create a file called fibo.py in the current directory with the following contents:Now enter the Python interpreter and import this module with the following command:This does not enter the names of the functions defined in fibo  directly in the current symbol table; it only enters the module name fibo there. Using the module name you can access the functions:If you intend to use a function often you can assign it to a local name:", "M_Code": "# Fibonacci numbers module  def fib(n):    # write Fibonacci series up to n     a, b = 0, 1     while a < n:         print(a, end=' ')         a, b = b, a+b     print()  def fib2(n):   # return Fibonacci series up to n     result = []     a, b = 0, 1     while a < n:         result.append(a)         a, b = b, a+b     return result  >>> import fibo  >>> fibo.fib(1000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 >>> fibo.fib2(100) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] >>> fibo.__name__ 'fibo'  >>> fib = fibo.fib >>> fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  ", "L2_Title": "6.1. More on Modules\u00b6", "L2_Desc": "A module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed only the first time the module name is encountered in an import statement. [1] (They are also run if the file is executed as a script.)Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user\u2019s global variables. On the other hand, if you know what you are doing you can touch a module\u2019s global variables with the same notation used to refer to its functions, modname.itemname.Modules can import other modules.  It is customary but not required to place all import statements at the beginning of a module (or script, for that matter).  The imported module names are placed in the importing module\u2019s global symbol table.There is a variant of the import statement that imports names from a module directly into the importing module\u2019s symbol table.  For example:This does not introduce the module name from which the imports are taken in the local symbol table (so in the example, fibo is not defined).There is even a variant to import all names that a module defines:This imports all names except those beginning with an underscore (_). In most cases Python programmers do not use this facility since it introduces an unknown set of names into the interpreter, possibly hiding some things you have already defined.Note that in general the practice of importing * from a module or package is frowned upon, since it often causes poorly readable code. However, it is okay to use it to save typing in interactive sessions.If the module name is followed by as, then the name following as is bound directly to the imported module.This is effectively importing the module in the same way that import fibo will do, with the only difference of it being available as fib.It can also be used when utilising from with similar effects:", "L2_Code": ">>> from fibo import fib, fib2 >>> fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  >>> from fibo import * >>> fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  >>> import fibo as fib >>> fib.fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  >>> from fibo import fib as fibonacci >>> fibonacci(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  ", "L3_Title": "6.1.1. Executing modules as scripts\u00b6", "L3_Desc": "When you run a Python module withthe code in the module will be executed, just as if you imported it, but with the __name__ set to \"__main__\".  That means that by adding this code at the end of your module:you can make the file usable as a script as well as an importable module, because the code that parses the command line only runs if the module is executed as the \u201cmain\u201d file:If the module is imported, the code is not run:This is often used either to provide a convenient user interface to a module, or for testing purposes (running the module as a script executes a test suite).", "L3_Code": "python fibo.py <arguments>  if __name__ == \"__main__\":     import sys     fib(int(sys.argv[1]))  >>> import fibo >>>  "},
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules\u00b6", "M_Desc": "If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead.  This is known as creating a script.  As your program gets longer, you may want to split it into several files for easier maintenance.  You may also want to use a handy function that you\u2019ve written in several programs without copying its definition into each program.To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a module; definitions from a module can be imported into other modules or into the main module (the collection of variables that you have access to in a script executed at the top level and in calculator mode).A module is a file containing Python definitions and statements.  The file name is the module name with the suffix .py appended.  Within a module, the module\u2019s name (as a string) is available as the value of the global variable __name__.  For instance, use your favorite text editor to create a file called fibo.py in the current directory with the following contents:Now enter the Python interpreter and import this module with the following command:This does not enter the names of the functions defined in fibo  directly in the current symbol table; it only enters the module name fibo there. Using the module name you can access the functions:If you intend to use a function often you can assign it to a local name:", "M_Code": "# Fibonacci numbers module  def fib(n):    # write Fibonacci series up to n     a, b = 0, 1     while a < n:         print(a, end=' ')         a, b = b, a+b     print()  def fib2(n):   # return Fibonacci series up to n     result = []     a, b = 0, 1     while a < n:         result.append(a)         a, b = b, a+b     return result  >>> import fibo  >>> fibo.fib(1000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 >>> fibo.fib2(100) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] >>> fibo.__name__ 'fibo'  >>> fib = fibo.fib >>> fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  ", "L2_Title": "6.1. More on Modules\u00b6", "L2_Desc": "A module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed only the first time the module name is encountered in an import statement. [1] (They are also run if the file is executed as a script.)Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user\u2019s global variables. On the other hand, if you know what you are doing you can touch a module\u2019s global variables with the same notation used to refer to its functions, modname.itemname.Modules can import other modules.  It is customary but not required to place all import statements at the beginning of a module (or script, for that matter).  The imported module names are placed in the importing module\u2019s global symbol table.There is a variant of the import statement that imports names from a module directly into the importing module\u2019s symbol table.  For example:This does not introduce the module name from which the imports are taken in the local symbol table (so in the example, fibo is not defined).There is even a variant to import all names that a module defines:This imports all names except those beginning with an underscore (_). In most cases Python programmers do not use this facility since it introduces an unknown set of names into the interpreter, possibly hiding some things you have already defined.Note that in general the practice of importing * from a module or package is frowned upon, since it often causes poorly readable code. However, it is okay to use it to save typing in interactive sessions.If the module name is followed by as, then the name following as is bound directly to the imported module.This is effectively importing the module in the same way that import fibo will do, with the only difference of it being available as fib.It can also be used when utilising from with similar effects:", "L2_Code": ">>> from fibo import fib, fib2 >>> fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  >>> from fibo import * >>> fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  >>> import fibo as fib >>> fib.fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  >>> from fibo import fib as fibonacci >>> fibonacci(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  ", "L3_Title": "6.1.2. The Module Search Path\u00b6", "L3_Desc": "When a module named spam is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named spam.py in a list of directories given by the variable sys.path.  sys.path is initialized from these locations:After initialization, Python programs can modify sys.path.  The directory containing the script being run is placed at the beginning of the search path, ahead of the standard library path. This means that scripts in that directory will be loaded instead of modules of the same name in the library directory. This is an error unless the replacement is intended.  See section Standard Modules for more information.", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules\u00b6", "M_Desc": "If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead.  This is known as creating a script.  As your program gets longer, you may want to split it into several files for easier maintenance.  You may also want to use a handy function that you\u2019ve written in several programs without copying its definition into each program.To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a module; definitions from a module can be imported into other modules or into the main module (the collection of variables that you have access to in a script executed at the top level and in calculator mode).A module is a file containing Python definitions and statements.  The file name is the module name with the suffix .py appended.  Within a module, the module\u2019s name (as a string) is available as the value of the global variable __name__.  For instance, use your favorite text editor to create a file called fibo.py in the current directory with the following contents:Now enter the Python interpreter and import this module with the following command:This does not enter the names of the functions defined in fibo  directly in the current symbol table; it only enters the module name fibo there. Using the module name you can access the functions:If you intend to use a function often you can assign it to a local name:", "M_Code": "# Fibonacci numbers module  def fib(n):    # write Fibonacci series up to n     a, b = 0, 1     while a < n:         print(a, end=' ')         a, b = b, a+b     print()  def fib2(n):   # return Fibonacci series up to n     result = []     a, b = 0, 1     while a < n:         result.append(a)         a, b = b, a+b     return result  >>> import fibo  >>> fibo.fib(1000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 >>> fibo.fib2(100) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] >>> fibo.__name__ 'fibo'  >>> fib = fibo.fib >>> fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  ", "L2_Title": "6.1. More on Modules\u00b6", "L2_Desc": "A module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed only the first time the module name is encountered in an import statement. [1] (They are also run if the file is executed as a script.)Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user\u2019s global variables. On the other hand, if you know what you are doing you can touch a module\u2019s global variables with the same notation used to refer to its functions, modname.itemname.Modules can import other modules.  It is customary but not required to place all import statements at the beginning of a module (or script, for that matter).  The imported module names are placed in the importing module\u2019s global symbol table.There is a variant of the import statement that imports names from a module directly into the importing module\u2019s symbol table.  For example:This does not introduce the module name from which the imports are taken in the local symbol table (so in the example, fibo is not defined).There is even a variant to import all names that a module defines:This imports all names except those beginning with an underscore (_). In most cases Python programmers do not use this facility since it introduces an unknown set of names into the interpreter, possibly hiding some things you have already defined.Note that in general the practice of importing * from a module or package is frowned upon, since it often causes poorly readable code. However, it is okay to use it to save typing in interactive sessions.If the module name is followed by as, then the name following as is bound directly to the imported module.This is effectively importing the module in the same way that import fibo will do, with the only difference of it being available as fib.It can also be used when utilising from with similar effects:", "L2_Code": ">>> from fibo import fib, fib2 >>> fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  >>> from fibo import * >>> fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  >>> import fibo as fib >>> fib.fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  >>> from fibo import fib as fibonacci >>> fibonacci(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  ", "L3_Title": "6.1.3. \u201cCompiled\u201d Python files\u00b6", "L3_Desc": "To speed up loading modules, Python caches the compiled version of each module in the __pycache__ directory under the name module.version.pyc, where the version encodes the format of the compiled file; it generally contains the Python version number.  For example, in CPython release 3.3 the compiled version of spam.py would be cached as __pycache__/spam.cpython-33.pyc.  This naming convention allows compiled modules from different releases and different versions of Python to coexist.Python checks the modification date of the source against the compiled version to see if it\u2019s out of date and needs to be recompiled.  This is a completely automatic process.  Also, the compiled modules are platform-independent, so the same library can be shared among systems with different architectures.Python does not check the cache in two circumstances.  First, it always recompiles and does not store the result for the module that\u2019s loaded directly from the command line.  Second, it does not check the cache if there is no source module.  To support a non-source (compiled only) distribution, the compiled module must be in the source directory, and there must not be a source module.Some tips for experts:", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules\u00b6", "M_Desc": "If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead.  This is known as creating a script.  As your program gets longer, you may want to split it into several files for easier maintenance.  You may also want to use a handy function that you\u2019ve written in several programs without copying its definition into each program.To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a module; definitions from a module can be imported into other modules or into the main module (the collection of variables that you have access to in a script executed at the top level and in calculator mode).A module is a file containing Python definitions and statements.  The file name is the module name with the suffix .py appended.  Within a module, the module\u2019s name (as a string) is available as the value of the global variable __name__.  For instance, use your favorite text editor to create a file called fibo.py in the current directory with the following contents:Now enter the Python interpreter and import this module with the following command:This does not enter the names of the functions defined in fibo  directly in the current symbol table; it only enters the module name fibo there. Using the module name you can access the functions:If you intend to use a function often you can assign it to a local name:", "M_Code": "# Fibonacci numbers module  def fib(n):    # write Fibonacci series up to n     a, b = 0, 1     while a < n:         print(a, end=' ')         a, b = b, a+b     print()  def fib2(n):   # return Fibonacci series up to n     result = []     a, b = 0, 1     while a < n:         result.append(a)         a, b = b, a+b     return result  >>> import fibo  >>> fibo.fib(1000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 >>> fibo.fib2(100) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] >>> fibo.__name__ 'fibo'  >>> fib = fibo.fib >>> fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  ", "L2_Title": "6.2. Standard Modules\u00b6", "L2_Desc": "Python comes with a library of standard modules, described in a separate document, the Python Library Reference (\u201cLibrary Reference\u201d hereafter).  Some modules are built into the interpreter; these provide access to operations that are not part of the core of the language but are nevertheless built in, either for efficiency or to provide access to operating system primitives such as system calls.  The set of such modules is a configuration option which also depends on the underlying platform.  For example, the winreg module is only provided on Windows systems. One particular module deserves some attention: sys, which is built into every Python interpreter.  The variables sys.ps1 and sys.ps2 define the strings used as primary and secondary prompts:These two variables are only defined if the interpreter is in interactive mode.The variable sys.path is a list of strings that determines the interpreter\u2019s search path for modules. It is initialized to a default path taken from the environment variable PYTHONPATH, or from a built-in default if PYTHONPATH is not set.  You can modify it using standard list operations:", "L2_Code": ">>> import sys >>> sys.ps1 '>>> ' >>> sys.ps2 '... ' >>> sys.ps1 = 'C> ' C> print('Yuck!') Yuck! C>  >>> import sys >>> sys.path.append('/ufs/guido/lib/python')  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules\u00b6", "M_Desc": "If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead.  This is known as creating a script.  As your program gets longer, you may want to split it into several files for easier maintenance.  You may also want to use a handy function that you\u2019ve written in several programs without copying its definition into each program.To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a module; definitions from a module can be imported into other modules or into the main module (the collection of variables that you have access to in a script executed at the top level and in calculator mode).A module is a file containing Python definitions and statements.  The file name is the module name with the suffix .py appended.  Within a module, the module\u2019s name (as a string) is available as the value of the global variable __name__.  For instance, use your favorite text editor to create a file called fibo.py in the current directory with the following contents:Now enter the Python interpreter and import this module with the following command:This does not enter the names of the functions defined in fibo  directly in the current symbol table; it only enters the module name fibo there. Using the module name you can access the functions:If you intend to use a function often you can assign it to a local name:", "M_Code": "# Fibonacci numbers module  def fib(n):    # write Fibonacci series up to n     a, b = 0, 1     while a < n:         print(a, end=' ')         a, b = b, a+b     print()  def fib2(n):   # return Fibonacci series up to n     result = []     a, b = 0, 1     while a < n:         result.append(a)         a, b = b, a+b     return result  >>> import fibo  >>> fibo.fib(1000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 >>> fibo.fib2(100) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] >>> fibo.__name__ 'fibo'  >>> fib = fibo.fib >>> fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  ", "L2_Title": "6.3. The dir() Function\u00b6", "L2_Desc": "The built-in function dir() is used to find out which names a module defines.  It returns a sorted list of strings:Without arguments, dir() lists the names you have defined currently:Note that it lists all types of names: variables, modules, functions, etc.dir() does not list the names of built-in functions and variables.  If you want a list of those, they are defined in the standard module builtins:", "L2_Code": ">>> import fibo, sys >>> dir(fibo) ['__name__', 'fib', 'fib2'] >>> dir(sys)   ['__displayhook__', '__doc__', '__excepthook__', '__loader__', '__name__',  '__package__', '__stderr__', '__stdin__', '__stdout__',  '_clear_type_cache', '_current_frames', '_debugmallocstats', '_getframe',  '_home', '_mercurial', '_xoptions', 'abiflags', 'api_version', 'argv',  'base_exec_prefix', 'base_prefix', 'builtin_module_names', 'byteorder',  'call_tracing', 'callstats', 'copyright', 'displayhook',  'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix',  'executable', 'exit', 'flags', 'float_info', 'float_repr_style',  'getcheckinterval', 'getdefaultencoding', 'getdlopenflags',  'getfilesystemencoding', 'getobjects', 'getprofile', 'getrecursionlimit',  'getrefcount', 'getsizeof', 'getswitchinterval', 'gettotalrefcount',  'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info',  'intern', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path',  'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1',  'setcheckinterval', 'setdlopenflags', 'setprofile', 'setrecursionlimit',  'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout',  'thread_info', 'version', 'version_info', 'warnoptions']  >>> a = [1, 2, 3, 4, 5] >>> import fibo >>> fib = fibo.fib >>> dir() ['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']  >>> import builtins >>> dir(builtins)   ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException',  'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning',  'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError',  'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning',  'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False',  'FileExistsError', 'FileNotFoundError', 'FloatingPointError',  'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError',  'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError',  'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError',  'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented',  'NotImplementedError', 'OSError', 'OverflowError',  'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError',  'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning',  'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError',  'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError',  'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError',  'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning',  'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__',  '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs',  'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable',  'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits',  'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit',  'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr',  'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass',  'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview',  'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property',  'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice',  'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars',  'zip']  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules\u00b6", "M_Desc": "If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead.  This is known as creating a script.  As your program gets longer, you may want to split it into several files for easier maintenance.  You may also want to use a handy function that you\u2019ve written in several programs without copying its definition into each program.To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a module; definitions from a module can be imported into other modules or into the main module (the collection of variables that you have access to in a script executed at the top level and in calculator mode).A module is a file containing Python definitions and statements.  The file name is the module name with the suffix .py appended.  Within a module, the module\u2019s name (as a string) is available as the value of the global variable __name__.  For instance, use your favorite text editor to create a file called fibo.py in the current directory with the following contents:Now enter the Python interpreter and import this module with the following command:This does not enter the names of the functions defined in fibo  directly in the current symbol table; it only enters the module name fibo there. Using the module name you can access the functions:If you intend to use a function often you can assign it to a local name:", "M_Code": "# Fibonacci numbers module  def fib(n):    # write Fibonacci series up to n     a, b = 0, 1     while a < n:         print(a, end=' ')         a, b = b, a+b     print()  def fib2(n):   # return Fibonacci series up to n     result = []     a, b = 0, 1     while a < n:         result.append(a)         a, b = b, a+b     return result  >>> import fibo  >>> fibo.fib(1000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 >>> fibo.fib2(100) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] >>> fibo.__name__ 'fibo'  >>> fib = fibo.fib >>> fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  ", "L2_Title": "6.4. Packages\u00b6", "L2_Desc": "Packages are a way of structuring Python\u2019s module namespace by using \u201cdotted module names\u201d.  For example, the module name A.B designates a submodule named B in a package named A.  Just like the use of modules saves the authors of different modules from having to worry about each other\u2019s global variable names, the use of dotted module names saves the authors of multi-module packages like NumPy or Pillow from having to worry about each other\u2019s module names.Suppose you want to design a collection of modules (a \u201cpackage\u201d) for the uniform handling of sound files and sound data.  There are many different sound file formats (usually recognized by their extension, for example: .wav, .aiff, .au), so you may need to create and maintain a growing collection of modules for the conversion between the various file formats. There are also many different operations you might want to perform on sound data (such as mixing, adding echo, applying an equalizer function, creating an artificial stereo effect), so in addition you will be writing a never-ending stream of modules to perform these operations.  Here\u2019s a possible structure for your package (expressed in terms of a hierarchical filesystem):When importing the package, Python searches through the directories on sys.path looking for the package subdirectory.The __init__.py files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path. In the simplest case, __init__.py can just be an empty file, but it can also execute initialization code for the package or set the __all__ variable, described later.Users of the package can import individual modules from the package, for example:This loads the submodule sound.effects.echo.  It must be referenced with its full name.An alternative way of importing the submodule is:This also loads the submodule echo, and makes it available without its package prefix, so it can be used as follows:Yet another variation is to import the desired function or variable directly:Again, this loads the submodule echo, but this makes its function echofilter() directly available:Note that when using from package import item, the item can be either a submodule (or subpackage) of the package, or some  other name defined in the package, like a function, class or variable.  The import statement first tests whether the item is defined in the package; if not, it assumes it is a module and attempts to load it.  If it fails to find it, an ImportError exception is raised.Contrarily, when using syntax like import item.subitem.subsubitem, each item except for the last must be a package; the last item can be a module or a package but can\u2019t be a class or function or variable defined in the previous item.", "L2_Code": "import sound.effects.echo  sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)  from sound.effects import echo  echo.echofilter(input, output, delay=0.7, atten=4)  from sound.effects.echo import echofilter  echofilter(input, output, delay=0.7, atten=4)  ", "L3_Title": "6.4.1. Importing * From a Package\u00b6", "L3_Desc": "Now what happens when the user writes from sound.effects import *?  Ideally, one would hope that this somehow goes out to the filesystem, finds which submodules are present in the package, and imports them all.  This could take a long time and importing sub-modules might have unwanted side-effects that should only happen when the sub-module is explicitly imported.The only solution is for the package author to provide an explicit index of the package.  The import statement uses the following convention: if a package\u2019s __init__.py code defines a list named __all__, it is taken to be the list of module names that should be imported when from package import * is encountered.  It is up to the package author to keep this list up-to-date when a new version of the package is released.  Package authors may also decide not to support it, if they don\u2019t see a use for importing * from their package.  For example, the file sound/effects/__init__.py could contain the following code:This would mean that from sound.effects import * would import the three named submodules of the sound package.If __all__ is not defined, the statement from sound.effects import * does not import all submodules from the package sound.effects into the current namespace; it only ensures that the package sound.effects has been imported (possibly running any initialization code in __init__.py) and then imports whatever names are defined in the package.  This includes any names defined (and submodules explicitly loaded) by __init__.py.  It also includes any submodules of the package that were explicitly loaded by previous import statements.  Consider this code:In this example, the echo and surround modules are imported in the current namespace because they are defined in the sound.effects package when the from...import statement is executed.  (This also works when __all__ is defined.)Although certain modules are designed to export only names that follow certain patterns when you use import *, it is still considered bad practice in production code.Remember, there is nothing wrong with using from Package import specific_submodule!  In fact, this is the recommended notation unless the importing module needs to use submodules with the same name from different packages.", "L3_Code": "__all__ = [\"echo\", \"surround\", \"reverse\"]  import sound.effects.echo import sound.effects.surround from sound.effects import *  "},
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules\u00b6", "M_Desc": "If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead.  This is known as creating a script.  As your program gets longer, you may want to split it into several files for easier maintenance.  You may also want to use a handy function that you\u2019ve written in several programs without copying its definition into each program.To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a module; definitions from a module can be imported into other modules or into the main module (the collection of variables that you have access to in a script executed at the top level and in calculator mode).A module is a file containing Python definitions and statements.  The file name is the module name with the suffix .py appended.  Within a module, the module\u2019s name (as a string) is available as the value of the global variable __name__.  For instance, use your favorite text editor to create a file called fibo.py in the current directory with the following contents:Now enter the Python interpreter and import this module with the following command:This does not enter the names of the functions defined in fibo  directly in the current symbol table; it only enters the module name fibo there. Using the module name you can access the functions:If you intend to use a function often you can assign it to a local name:", "M_Code": "# Fibonacci numbers module  def fib(n):    # write Fibonacci series up to n     a, b = 0, 1     while a < n:         print(a, end=' ')         a, b = b, a+b     print()  def fib2(n):   # return Fibonacci series up to n     result = []     a, b = 0, 1     while a < n:         result.append(a)         a, b = b, a+b     return result  >>> import fibo  >>> fibo.fib(1000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 >>> fibo.fib2(100) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] >>> fibo.__name__ 'fibo'  >>> fib = fibo.fib >>> fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  ", "L2_Title": "6.4. Packages\u00b6", "L2_Desc": "Packages are a way of structuring Python\u2019s module namespace by using \u201cdotted module names\u201d.  For example, the module name A.B designates a submodule named B in a package named A.  Just like the use of modules saves the authors of different modules from having to worry about each other\u2019s global variable names, the use of dotted module names saves the authors of multi-module packages like NumPy or Pillow from having to worry about each other\u2019s module names.Suppose you want to design a collection of modules (a \u201cpackage\u201d) for the uniform handling of sound files and sound data.  There are many different sound file formats (usually recognized by their extension, for example: .wav, .aiff, .au), so you may need to create and maintain a growing collection of modules for the conversion between the various file formats. There are also many different operations you might want to perform on sound data (such as mixing, adding echo, applying an equalizer function, creating an artificial stereo effect), so in addition you will be writing a never-ending stream of modules to perform these operations.  Here\u2019s a possible structure for your package (expressed in terms of a hierarchical filesystem):When importing the package, Python searches through the directories on sys.path looking for the package subdirectory.The __init__.py files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path. In the simplest case, __init__.py can just be an empty file, but it can also execute initialization code for the package or set the __all__ variable, described later.Users of the package can import individual modules from the package, for example:This loads the submodule sound.effects.echo.  It must be referenced with its full name.An alternative way of importing the submodule is:This also loads the submodule echo, and makes it available without its package prefix, so it can be used as follows:Yet another variation is to import the desired function or variable directly:Again, this loads the submodule echo, but this makes its function echofilter() directly available:Note that when using from package import item, the item can be either a submodule (or subpackage) of the package, or some  other name defined in the package, like a function, class or variable.  The import statement first tests whether the item is defined in the package; if not, it assumes it is a module and attempts to load it.  If it fails to find it, an ImportError exception is raised.Contrarily, when using syntax like import item.subitem.subsubitem, each item except for the last must be a package; the last item can be a module or a package but can\u2019t be a class or function or variable defined in the previous item.", "L2_Code": "import sound.effects.echo  sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)  from sound.effects import echo  echo.echofilter(input, output, delay=0.7, atten=4)  from sound.effects.echo import echofilter  echofilter(input, output, delay=0.7, atten=4)  ", "L3_Title": "6.4.2. Intra-package References\u00b6", "L3_Desc": "When packages are structured into subpackages (as with the sound package in the example), you can use absolute imports to refer to submodules of siblings packages.  For example, if the module sound.filters.vocoder needs to use the echo module in the sound.effects package, it can use from sound.effects import echo.You can also write relative imports, with the from module import name form of import statement.  These imports use leading dots to indicate the current and parent packages involved in the relative import.  From the surround module for example, you might use:Note that relative imports are based on the name of the current module.  Since the name of the main module is always \"__main__\", modules intended for use as the main module of a Python application must always use absolute imports.", "L3_Code": "from . import echo from .. import formats from ..filters import equalizer  "},
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules\u00b6", "M_Desc": "If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead.  This is known as creating a script.  As your program gets longer, you may want to split it into several files for easier maintenance.  You may also want to use a handy function that you\u2019ve written in several programs without copying its definition into each program.To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a module; definitions from a module can be imported into other modules or into the main module (the collection of variables that you have access to in a script executed at the top level and in calculator mode).A module is a file containing Python definitions and statements.  The file name is the module name with the suffix .py appended.  Within a module, the module\u2019s name (as a string) is available as the value of the global variable __name__.  For instance, use your favorite text editor to create a file called fibo.py in the current directory with the following contents:Now enter the Python interpreter and import this module with the following command:This does not enter the names of the functions defined in fibo  directly in the current symbol table; it only enters the module name fibo there. Using the module name you can access the functions:If you intend to use a function often you can assign it to a local name:", "M_Code": "# Fibonacci numbers module  def fib(n):    # write Fibonacci series up to n     a, b = 0, 1     while a < n:         print(a, end=' ')         a, b = b, a+b     print()  def fib2(n):   # return Fibonacci series up to n     result = []     a, b = 0, 1     while a < n:         result.append(a)         a, b = b, a+b     return result  >>> import fibo  >>> fibo.fib(1000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 >>> fibo.fib2(100) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] >>> fibo.__name__ 'fibo'  >>> fib = fibo.fib >>> fib(500) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377  ", "L2_Title": "6.4. Packages\u00b6", "L2_Desc": "Packages are a way of structuring Python\u2019s module namespace by using \u201cdotted module names\u201d.  For example, the module name A.B designates a submodule named B in a package named A.  Just like the use of modules saves the authors of different modules from having to worry about each other\u2019s global variable names, the use of dotted module names saves the authors of multi-module packages like NumPy or Pillow from having to worry about each other\u2019s module names.Suppose you want to design a collection of modules (a \u201cpackage\u201d) for the uniform handling of sound files and sound data.  There are many different sound file formats (usually recognized by their extension, for example: .wav, .aiff, .au), so you may need to create and maintain a growing collection of modules for the conversion between the various file formats. There are also many different operations you might want to perform on sound data (such as mixing, adding echo, applying an equalizer function, creating an artificial stereo effect), so in addition you will be writing a never-ending stream of modules to perform these operations.  Here\u2019s a possible structure for your package (expressed in terms of a hierarchical filesystem):When importing the package, Python searches through the directories on sys.path looking for the package subdirectory.The __init__.py files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path. In the simplest case, __init__.py can just be an empty file, but it can also execute initialization code for the package or set the __all__ variable, described later.Users of the package can import individual modules from the package, for example:This loads the submodule sound.effects.echo.  It must be referenced with its full name.An alternative way of importing the submodule is:This also loads the submodule echo, and makes it available without its package prefix, so it can be used as follows:Yet another variation is to import the desired function or variable directly:Again, this loads the submodule echo, but this makes its function echofilter() directly available:Note that when using from package import item, the item can be either a submodule (or subpackage) of the package, or some  other name defined in the package, like a function, class or variable.  The import statement first tests whether the item is defined in the package; if not, it assumes it is a module and attempts to load it.  If it fails to find it, an ImportError exception is raised.Contrarily, when using syntax like import item.subitem.subsubitem, each item except for the last must be a package; the last item can be a module or a package but can\u2019t be a class or function or variable defined in the previous item.", "L2_Code": "import sound.effects.echo  sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)  from sound.effects import echo  echo.echofilter(input, output, delay=0.7, atten=4)  from sound.effects.echo import echofilter  echofilter(input, output, delay=0.7, atten=4)  ", "L3_Title": "6.4.3. Packages in Multiple Directories\u00b6", "L3_Desc": "Packages support one more special attribute, __path__.  This is initialized to be a list containing the name of the directory holding the package\u2019s __init__.py before the code in that file is executed.  This variable can be modified; doing so affects future searches for modules and subpackages contained in the package.While this feature is not often needed, it can be used to extend the set of modules found in a package.Footnotes", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/interactive.html", "Language": "Python", "M_Title": "14. Interactive Input Editing and History Substitution\u00b6", "M_Desc": "Some versions of the Python interpreter support editing of the current input line and history substitution, similar to facilities found in the Korn shell and the GNU Bash shell.  This is implemented using the GNU Readline library, which supports various styles of editing.  This library has its own documentation which we won\u2019t duplicate here.", "M_Code": "", "L2_Title": "14.1. Tab Completion and History Editing\u00b6", "L2_Desc": "Completion of variable and module names is automatically enabled at interpreter startup so that the Tab key invokes the completion function; it looks at Python statement names, the current local variables, and the available module names.  For dotted expressions such as string.a, it will evaluate the expression up to the final '.' and then suggest completions from the attributes of the resulting object.  Note that this may execute application-defined code if an object with a __getattr__() method is part of the expression.  The default configuration also saves your history into a file named .python_history in your user directory. The history will be available again during the next interactive interpreter session.", "L2_Code": "", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/interactive.html", "Language": "Python", "M_Title": "14. Interactive Input Editing and History Substitution\u00b6", "M_Desc": "Some versions of the Python interpreter support editing of the current input line and history substitution, similar to facilities found in the Korn shell and the GNU Bash shell.  This is implemented using the GNU Readline library, which supports various styles of editing.  This library has its own documentation which we won\u2019t duplicate here.", "M_Code": "", "L2_Title": "14.2. Alternatives to the Interactive Interpreter\u00b6", "L2_Desc": "This facility is an enormous step forward compared to earlier versions of the interpreter; however, some wishes are left: It would be nice if the proper indentation were suggested on continuation lines (the parser knows if an indent token is required next).  The completion mechanism might use the interpreter\u2019s symbol table.  A command to check (or even suggest) matching parentheses, quotes, etc., would also be useful.One alternative enhanced interactive interpreter that has been around for quite some time is IPython, which features tab completion, object exploration and advanced history management.  It can also be thoroughly customized and embedded into other applications.  Another similar enhanced interactive environment is bpython.", "L2_Code": "", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/whatnow.html", "Language": "Python", "M_Title": "13. What Now?\u00b6", "M_Desc": "Reading this tutorial has probably reinforced your interest in using Python \u2014 you should be eager to apply Python to solving your real-world problems. Where should you go to learn more?This tutorial is part of Python\u2019s documentation set.   Some other documents in the set are:More Python resources:For Python-related questions and problem reports, you can post to the newsgroup comp.lang.python, or send them to the mailing list at python-list@python.org.  The newsgroup and mailing list are gatewayed, so messages posted to one will automatically be forwarded to the other.  There are hundreds of postings a day, asking (and answering) questions, suggesting new features, and announcing new modules. Mailing list archives are available at https://mail.python.org/pipermail/.Before posting, be sure to check the list of Frequently Asked Questions (also called the FAQ).  The FAQ answers many of the questions that come up again and again, and may already contain the solution for your problem.", "M_Code": "", "L2_Title": "", "L2_Desc": "", "L2_Code": "", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/appetite.html", "Language": "Python", "M_Title": "1. Whetting Your Appetite\u00b6", "M_Desc": "If you do much work on computers, eventually you find that there\u2019s some task you\u2019d like to automate.  For example, you may wish to perform a search-and-replace over a large number of text files, or rename and rearrange a bunch of photo files in a complicated way. Perhaps you\u2019d like to write a small custom database, or a specialized GUI application, or a simple game.If you\u2019re a professional software developer, you may have to work with several C/C++/Java libraries but find the usual write/compile/test/re-compile cycle is too slow.  Perhaps you\u2019re writing a test suite for such a library and find writing the testing code a tedious task.  Or maybe you\u2019ve written a program that could use an extension language, and you don\u2019t want to design and implement a whole new language for your application.Python is just the language for you.You could write a Unix shell script or Windows batch files for some of these tasks, but shell scripts are best at moving around files and changing text data, not well-suited for GUI applications or games. You could write a C/C++/Java program, but it can take a lot of development time to get even a first-draft program.  Python is simpler to use, available on Windows, Mac OS X, and Unix operating systems, and will help you get the job done more quickly.Python is simple to use, but it is a real programming language, offering much more structure and support for large programs than shell scripts or batch files can offer.  On the other hand, Python also offers much more error checking than C, and, being a very-high-level language, it has high-level data types built in, such as flexible arrays and dictionaries.  Because of its more general data types Python is applicable to a much larger problem domain than Awk or even Perl, yet many things are at least as easy in Python as in those languages.Python allows you to split your program into modules that can be reused in other Python programs.  It comes with a large collection of standard modules that you can use as the basis of your programs \u2014 or as examples to start learning to program in Python.  Some of these modules provide things like file I/O, system calls, sockets, and even interfaces to graphical user interface toolkits like Tk.Python is an interpreted language, which can save you considerable time during program development because no compilation and linking is necessary.  The interpreter can be used interactively, which makes it easy to experiment with features of the language, to write throw-away programs, or to test functions during bottom-up program development. It is also a handy desk calculator.Python enables programs to be written compactly and readably.  Programs written in Python are typically much shorter than equivalent C,  C++, or Java programs, for several reasons:Python is extensible: if you know how to program in C it is easy to add a new built-in function or module to the interpreter, either to perform critical operations at maximum speed, or to link Python programs to libraries that may only be available in binary form (such as a vendor-specific graphics library). Once you are really hooked, you can link the Python interpreter into an application written in C and use it as an extension or command language for that application.By the way, the language is named after the BBC show \u201cMonty Python\u2019s Flying Circus\u201d and has nothing to do with reptiles.  Making references to Monty Python skits in documentation is not only allowed, it is encouraged!Now that you are all excited about Python, you\u2019ll want to examine it in some more detail.  Since the best way to learn a language is to use it, the tutorial invites you to play with the Python interpreter as you read.In the next chapter, the mechanics of using the interpreter are explained.  This is rather mundane information, but essential for trying out the examples shown later.The rest of the tutorial introduces various features of the Python language and system through examples, beginning with simple expressions, statements and data types, through functions and modules, and finally touching upon advanced concepts like exceptions and user-defined classes.", "M_Code": "", "L2_Title": "", "L2_Desc": "", "L2_Code": "", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/interpreter.html", "Language": "Python", "M_Title": "2. Using the Python Interpreter\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "2.1. Invoking the Interpreter\u00b6", "L2_Desc": "The Python interpreter is usually installed as /usr/local/bin/python3.7 on those machines where it is available; putting /usr/local/bin in your Unix shell\u2019s search path makes it possible to start it by typing the command:to the shell. [1] Since the choice of the directory where the interpreter lives is an installation option, other places are possible; check with your local Python guru or system administrator.  (E.g., /usr/local/python is a popular alternative location.)On Windows machines, the Python installation is usually placed in C:\\Python36, though you can change this when you\u2019re running the installer.  To add this directory to your path,  you can type the following command into the command prompt in a DOS box:Typing an end-of-file character (Control-D on Unix, Control-Z on Windows) at the primary prompt causes the interpreter to exit with a zero exit status.  If that doesn\u2019t work, you can exit the interpreter by typing the following command: quit().The interpreter\u2019s line-editing features include interactive editing, history substitution and code completion on systems that support readline.  Perhaps the quickest check to see whether command line editing is supported is typing Control-P to the first Python prompt you get.  If it beeps, you have command line editing; see Appendix Interactive Input Editing and History Substitution for an introduction to the keys.  If nothing appears to happen, or if ^P is echoed, command line editing isn\u2019t available; you\u2019ll only be able to use backspace to remove characters from the current line.The interpreter operates somewhat like the Unix shell: when called with standard input connected to a tty device, it reads and executes commands interactively; when called with a file name argument or with a file as standard input, it reads and executes a script from that file.A second way of starting the interpreter is python -c command [arg] ..., which executes the statement(s) in command, analogous to the shell\u2019s -c option.  Since Python statements often contain spaces or other characters that are special to the shell, it is usually advised to quote command in its entirety with single quotes.Some Python modules are also useful as scripts.  These can be invoked using python -m module [arg] ..., which executes the source file for module as if you had spelled out its full name on the command line.When a script file is used, it is sometimes useful to be able to run the script and enter interactive mode afterwards.  This can be done by passing -i before the script.All command line options are described in Command line and environment.", "L2_Code": "set path=%path%;C:\\python36  ", "L3_Title": "2.1.1. Argument Passing\u00b6", "L3_Desc": "When known to the interpreter, the script name and additional arguments thereafter are turned into a list of strings and assigned to the argv variable in the sys module.  You can access this list by executing import sys.  The length of the list is at least one; when no script and no arguments are given, sys.argv[0] is an empty string.  When the script name is given as '-' (meaning  standard input), sys.argv[0] is set to '-'.  When -c command is used, sys.argv[0] is set to '-c'.  When -m module is used, sys.argv[0]  is set to the full name of the located module.  Options found after  -c command or -m module are not consumed  by the Python interpreter\u2019s option processing but left in sys.argv for  the command or module to handle.", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/interpreter.html", "Language": "Python", "M_Title": "2. Using the Python Interpreter\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "2.1. Invoking the Interpreter\u00b6", "L2_Desc": "The Python interpreter is usually installed as /usr/local/bin/python3.7 on those machines where it is available; putting /usr/local/bin in your Unix shell\u2019s search path makes it possible to start it by typing the command:to the shell. [1] Since the choice of the directory where the interpreter lives is an installation option, other places are possible; check with your local Python guru or system administrator.  (E.g., /usr/local/python is a popular alternative location.)On Windows machines, the Python installation is usually placed in C:\\Python36, though you can change this when you\u2019re running the installer.  To add this directory to your path,  you can type the following command into the command prompt in a DOS box:Typing an end-of-file character (Control-D on Unix, Control-Z on Windows) at the primary prompt causes the interpreter to exit with a zero exit status.  If that doesn\u2019t work, you can exit the interpreter by typing the following command: quit().The interpreter\u2019s line-editing features include interactive editing, history substitution and code completion on systems that support readline.  Perhaps the quickest check to see whether command line editing is supported is typing Control-P to the first Python prompt you get.  If it beeps, you have command line editing; see Appendix Interactive Input Editing and History Substitution for an introduction to the keys.  If nothing appears to happen, or if ^P is echoed, command line editing isn\u2019t available; you\u2019ll only be able to use backspace to remove characters from the current line.The interpreter operates somewhat like the Unix shell: when called with standard input connected to a tty device, it reads and executes commands interactively; when called with a file name argument or with a file as standard input, it reads and executes a script from that file.A second way of starting the interpreter is python -c command [arg] ..., which executes the statement(s) in command, analogous to the shell\u2019s -c option.  Since Python statements often contain spaces or other characters that are special to the shell, it is usually advised to quote command in its entirety with single quotes.Some Python modules are also useful as scripts.  These can be invoked using python -m module [arg] ..., which executes the source file for module as if you had spelled out its full name on the command line.When a script file is used, it is sometimes useful to be able to run the script and enter interactive mode afterwards.  This can be done by passing -i before the script.All command line options are described in Command line and environment.", "L2_Code": "set path=%path%;C:\\python36  ", "L3_Title": "2.1.2. Interactive Mode\u00b6", "L3_Desc": "When commands are read from a tty, the interpreter is said to be in interactive mode.  In this mode it prompts for the next command with the primary prompt, usually three greater-than signs (>>>); for continuation lines it prompts with the secondary prompt, by default three dots (...). The interpreter prints a welcome message stating its version number and a copyright notice before printing the first prompt:Continuation lines are needed when entering a multi-line construct. As an example, take a look at this if statement:For more on interactive mode, see Interactive Mode.", "L3_Code": ">>> the_world_is_flat = True >>> if the_world_is_flat: ...     print(\"Be careful not to fall off!\") ... Be careful not to fall off!  "},
{"URL": "https://docs.python.org/3/tutorial/interpreter.html", "Language": "Python", "M_Title": "2. Using the Python Interpreter\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "2.2. The Interpreter and Its Environment\u00b6", "L2_Desc": "", "L2_Code": "", "L3_Title": "2.2.1. Source Code Encoding\u00b6", "L3_Desc": "By default, Python source files are treated as encoded in UTF-8.  In that encoding, characters of most languages in the world can be used simultaneously in string literals, identifiers and comments \u2014 although the standard library only uses ASCII characters for identifiers, a convention that any portable code should follow.  To display all these characters properly, your editor must recognize that the file is UTF-8, and it must use a font that supports all the characters in the file.To declare an encoding other than the default one, a special comment line should be added as the first line of the file.  The syntax is as follows:where encoding is one of the valid codecs supported by Python.For example, to declare that Windows-1252 encoding is to be used, the first line of your source code file should be:One exception to the first line rule is when the source code starts with a UNIX \u201cshebang\u201d line.  In this case, the encoding declaration should be added as the second line of the file.  For example:Footnotes", "L3_Code": "# -*- coding: encoding -*-  # -*- coding: cp1252 -*-  #!/usr/bin/env python3 # -*- coding: cp1252 -*-  "},
{"URL": "https://docs.python.org/3/tutorial/venv.html", "Language": "Python", "M_Title": "12. Virtual Environments and Packages\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "12.1. Introduction\u00b6", "L2_Desc": "Python applications will often use packages and modules that don\u2019t come as part of the standard library.  Applications will sometimes need a specific version of a library, because the application may require that a particular bug has been fixed or the application may be written using an obsolete version of the library\u2019s interface.This means it may not be possible for one Python installation to meet the requirements of every application.  If application A needs version 1.0 of a particular module but application B needs version 2.0, then the requirements are in conflict and installing either version 1.0 or 2.0 will leave one application unable to run.The solution for this problem is to create a virtual environment, a self-contained directory tree that contains a Python installation for a particular version of Python, plus a number of additional packages.Different applications can then use different virtual environments. To resolve the earlier example of conflicting requirements, application A can have its own virtual environment with version 1.0 installed while application B has another virtual environment with version 2.0. If application B requires a library be upgraded to version 3.0, this will not affect application A\u2019s environment.", "L2_Code": "", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/venv.html", "Language": "Python", "M_Title": "12. Virtual Environments and Packages\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "12.2. Creating Virtual Environments\u00b6", "L2_Desc": "The module used to create and manage virtual environments is called venv.  venv will usually install the most recent version of Python that you have available. If you have multiple versions of Python on your system, you can select a specific Python version by running python3 or whichever version you want.To create a virtual environment, decide upon a directory where you want to place it, and run the venv module as a script with the directory path:This will create the tutorial-env directory if it doesn\u2019t exist, and also create directories inside it containing a copy of the Python interpreter, the standard library, and various supporting files.Once you\u2019ve created a virtual environment, you may activate it.On Windows, run:On Unix or MacOS, run:(This script is written for the bash shell.  If you use the csh or fish shells, there are alternate activate.csh and activate.fish scripts you should use instead.)Activating the virtual environment will change your shell\u2019s prompt to show what virtual environment you\u2019re using, and modify the environment so that running python will get you that particular version and installation of Python. For example:", "L2_Code": "python3 -m venv tutorial-env  tutorial-env\\Scripts\\activate.bat  source tutorial-env/bin/activate  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/venv.html", "Language": "Python", "M_Title": "12. Virtual Environments and Packages\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "12.3. Managing Packages with pip\u00b6", "L2_Desc": "You can install, upgrade, and remove packages using a program called pip.  By default pip will install packages from the Python Package Index, <https://pypi.org>.  You can browse the Python Package Index by going to it in your web browser, or you can use pip\u2019s limited search feature:pip has a number of subcommands: \u201csearch\u201d, \u201cinstall\u201d, \u201cuninstall\u201d, \u201cfreeze\u201d, etc.  (Consult the Installing Python Modules guide for complete documentation for pip.)You can install the latest version of a package by specifying a package\u2019s name:You can also install a specific version of a package by giving the package name  followed by == and the version number:If you re-run this command, pip will notice that the requested version is already installed and do nothing.  You can supply a different version number to get that version, or you can run pip install --upgrade to upgrade the package to the latest version:pip uninstall followed by one or more package names will remove the packages from the virtual environment.pip show will display information about a particular package:pip list will display all of the packages installed in the virtual environment:pip freeze will produce a similar list of the installed packages, but the output uses the format that pip install expects. A common convention is to put this list in a requirements.txt file:The requirements.txt can then be committed to version control and shipped as part of an application.  Users can then install all the necessary packages with install -r:pip has many more options.  Consult the Installing Python Modules guide for complete documentation for pip.  When you\u2019ve written a package and want to make it available on the Python Package Index, consult the Distributing Python Modules guide.", "L2_Code": "", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/appendix.html", "Language": "Python", "M_Title": "16. Appendix\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "16.1. Interactive Mode\u00b6", "L2_Desc": "", "L2_Code": "", "L3_Title": "16.1.1. Error Handling\u00b6", "L3_Desc": "When an error occurs, the interpreter prints an error message and a stack trace. In interactive mode, it then returns to the primary prompt; when input came from a file, it exits with a nonzero exit status after printing the stack trace. (Exceptions handled by an except clause in a try statement are not errors in this context.)  Some errors are unconditionally fatal and cause an exit with a nonzero exit; this applies to internal inconsistencies and some cases of running out of memory.  All error messages are written to the standard error stream; normal output from executed commands is written to standard output.Typing the interrupt character (usually Control-C or Delete) to the primary or secondary prompt cancels the input and returns to the primary prompt. [1] Typing an interrupt while a command is executing raises the KeyboardInterrupt exception, which may be handled by a try statement.", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/appendix.html", "Language": "Python", "M_Title": "16. Appendix\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "16.1. Interactive Mode\u00b6", "L2_Desc": "", "L2_Code": "", "L3_Title": "16.1.2. Executable Python Scripts\u00b6", "L3_Desc": "On BSD\u2019ish Unix systems, Python scripts can be made directly executable, like shell scripts, by putting the line(assuming that the interpreter is on the user\u2019s PATH) at the beginning of the script and giving the file an executable mode.  The #! must be the first two characters of the file.  On some platforms, this first line must end with a Unix-style line ending ('\\n'), not a Windows ('\\r\\n') line ending.  Note that the hash, or pound, character, '#', is used to start a comment in Python.The script can be given an executable mode, or permission, using the chmod command.On Windows systems, there is no notion of an \u201cexecutable mode\u201d.  The Python installer automatically associates .py files with python.exe so that a double-click on a Python file will run it as a script.  The extension can also be .pyw, in that case, the console window that normally appears is suppressed.", "L3_Code": "#!/usr/bin/env python3.5  "},
{"URL": "https://docs.python.org/3/tutorial/appendix.html", "Language": "Python", "M_Title": "16. Appendix\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "16.1. Interactive Mode\u00b6", "L2_Desc": "", "L2_Code": "", "L3_Title": "16.1.3. The Interactive Startup File\u00b6", "L3_Desc": "When you use Python interactively, it is frequently handy to have some standard commands executed every time the interpreter is started.  You can do this by setting an environment variable named PYTHONSTARTUP to the name of a file containing your start-up commands.  This is similar to the .profile feature of the Unix shells.This file is only read in interactive sessions, not when Python reads commands from a script, and not when /dev/tty is given as the explicit source of commands (which otherwise behaves like an interactive session).  It is executed in the same namespace where interactive commands are executed, so that objects that it defines or imports can be used without qualification in the interactive session. You can also change the prompts sys.ps1 and sys.ps2 in this file.If you want to read an additional start-up file from the current directory, you can program this in the global start-up file using code like if os.path.isfile('.pythonrc.py'): exec(open('.pythonrc.py').read()). If you want to use the startup file in a script, you must do this explicitly in the script:", "L3_Code": "import os filename = os.environ.get('PYTHONSTARTUP') if filename and os.path.isfile(filename):     with open(filename) as fobj:         startup_file = fobj.read()     exec(startup_file)  "},
{"URL": "https://docs.python.org/3/tutorial/appendix.html", "Language": "Python", "M_Title": "16. Appendix\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "16.1. Interactive Mode\u00b6", "L2_Desc": "", "L2_Code": "", "L3_Title": "16.1.4. The Customization Modules\u00b6", "L3_Desc": "Python provides two hooks to let you customize it: sitecustomize and usercustomize.  To see how it works, you need first to find the location of your user site-packages directory.  Start Python and run this code:Now you can create a file named usercustomize.py in that directory and put anything you want in it.  It will affect every invocation of Python, unless it is started with the -s option to disable the automatic import.sitecustomize works in the same way, but is typically created by an administrator of the computer in the global site-packages directory, and is imported before usercustomize.  See the documentation of the site module for more details.Footnotes", "L3_Code": ">>> import site >>> site.getusersitepackages() '/home/user/.local/lib/python3.5/site-packages'  "},
{"URL": "https://docs.python.org/3/tutorial/floatingpoint.html", "Language": "Python", "M_Title": "15. Floating Point Arithmetic:  Issues and Limitations\u00b6", "M_Desc": "Floating-point numbers are represented in computer hardware as base 2 (binary) fractions.  For example, the decimal fractionhas value 1/10 + 2/100 + 5/1000, and in the same way the binary fractionhas value 0/2 + 0/4 + 1/8.  These two fractions have identical values, the only real difference being that the first is written in base 10 fractional notation, and the second in base 2.Unfortunately, most decimal fractions cannot be represented exactly as binary fractions.  A consequence is that, in general, the decimal floating-point numbers you enter are only approximated by the binary floating-point numbers actually stored in the machine.The problem is easier to understand at first in base 10.  Consider the fraction 1/3.  You can approximate that as a base 10 fraction:or, better,or, better,and so on.  No matter how many digits you\u2019re willing to write down, the result will never be exactly 1/3, but will be an increasingly better approximation of 1/3.In the same way, no matter how many base 2 digits you\u2019re willing to use, the decimal value 0.1 cannot be represented exactly as a base 2 fraction.  In base 2, 1/10 is the infinitely repeating fractionStop at any finite number of bits, and you get an approximation.  On most machines today, floats are approximated using a binary fraction with the numerator using the first 53 bits starting with the most significant bit and with the denominator as a power of two.  In the case of 1/10, the binary fraction is 3602879701896397 / 2 ** 55 which is close to but not exactly equal to the true value of 1/10.Many users are not aware of the approximation because of the way values are displayed.  Python only prints a decimal approximation to the true decimal value of the binary approximation stored by the machine.  On most machines, if Python were to print the true decimal value of the binary approximation stored for 0.1, it would have to displayThat is more digits than most people find useful, so Python keeps the number of digits manageable by displaying a rounded value insteadJust remember, even though the printed result looks like the exact value of 1/10, the actual stored value is the nearest representable binary fraction.Interestingly, there are many different decimal numbers that share the same nearest approximate binary fraction.  For example, the numbers 0.1 and 0.10000000000000001 and 0.1000000000000000055511151231257827021181583404541015625 are all approximated by 3602879701896397 / 2 ** 55.  Since all of these decimal values share the same approximation, any one of them could be displayed while still preserving the invariant eval(repr(x)) == x.Historically, the Python prompt and built-in repr() function would choose the one with 17 significant digits, 0.10000000000000001.   Starting with Python 3.1, Python (on most systems) is now able to choose the shortest of these and simply display 0.1.Note that this is in the very nature of binary floating-point: this is not a bug in Python, and it is not a bug in your code either.  You\u2019ll see the same kind of thing in all languages that support your hardware\u2019s floating-point arithmetic (although some languages may not display the difference by default, or in all output modes).For more pleasant output, you may wish to use string formatting to produce a limited number of significant digits:It\u2019s important to realize that this is, in a real sense, an illusion: you\u2019re simply rounding the display of the true machine value.One illusion may beget another.  For example, since 0.1 is not exactly 1/10, summing three values of 0.1 may not yield exactly 0.3, either:Also, since the 0.1 cannot get any closer to the exact value of 1/10 and 0.3 cannot get any closer to the exact value of 3/10, then pre-rounding with round() function cannot help:Though the numbers cannot be made closer to their intended exact values, the round() function can be useful for post-rounding so that results with inexact values become comparable to one another:Binary floating-point arithmetic holds many surprises like this.  The problem with \u201c0.1\u201d is explained in precise detail below, in the \u201cRepresentation Error\u201d section.  See The Perils of Floating Point for a more complete account of other common surprises.As that says near the end, \u201cthere are no easy answers.\u201d  Still, don\u2019t be unduly wary of floating-point!  The errors in Python float operations are inherited from the floating-point hardware, and on most machines are on the order of no more than 1 part in 2**53 per operation.  That\u2019s more than adequate for most tasks, but you do need to keep in mind that it\u2019s not decimal arithmetic and that every float operation can suffer a new rounding error.While pathological cases do exist, for most casual use of floating-point arithmetic you\u2019ll see the result you expect in the end if you simply round the display of your final results to the number of decimal digits you expect. str() usually suffices, and for finer control see the str.format() method\u2019s format specifiers in Format String Syntax.For use cases which require exact decimal representation, try using the decimal module which implements decimal arithmetic suitable for accounting applications and high-precision applications.Another form of exact arithmetic is supported by the fractions module which implements arithmetic based on rational numbers (so the numbers like 1/3 can be represented exactly).If you are a heavy user of floating point operations you should take a look at the Numerical Python package and many other packages for mathematical and statistical operations supplied by the SciPy project. See <https://scipy.org>.Python provides tools that may help on those rare occasions when you really do want to know the exact value of a float.  The float.as_integer_ratio() method expresses the value of a float as a fraction:Since the ratio is exact, it can be used to losslessly recreate the original value:The float.hex() method expresses a float in hexadecimal (base 16), again giving the exact value stored by your computer:This precise hexadecimal representation can be used to reconstruct the float value exactly:Since the representation is exact, it is useful for reliably porting values across different versions of Python (platform independence) and exchanging data with other languages that support the same format (such as Java and C99).Another helpful tool is the math.fsum() function which helps mitigate loss-of-precision during summation.  It tracks \u201clost digits\u201d as values are added onto a running total.  That can make a difference in overall accuracy so that the errors do not accumulate to the point where they affect the final total:", "M_Code": "0.125  0.001  0.3  0.33  0.333  0.0001100110011001100110011001100110011001100110011...  >>> 0.1 0.1000000000000000055511151231257827021181583404541015625  >>> 1 / 10 0.1  >>> format(math.pi, '.12g')  # give 12 significant digits '3.14159265359'  >>> format(math.pi, '.2f')   # give 2 digits after the point '3.14'  >>> repr(math.pi) '3.141592653589793'  >>> .1 + .1 + .1 == .3 False  >>> round(.1, 1) + round(.1, 1) + round(.1, 1) == round(.3, 1) False  >>> round(.1 + .1 + .1, 10) == round(.3, 10) True  >>> x = 3.14159 >>> x.as_integer_ratio() (3537115888337719, 1125899906842624)  >>> x == 3537115888337719 / 1125899906842624 True  >>> x.hex() '0x1.921f9f01b866ep+1'  >>> x == float.fromhex('0x1.921f9f01b866ep+1') True  >>> sum([0.1] * 10) == 1.0 False >>> math.fsum([0.1] * 10) == 1.0 True  ", "L2_Title": "15.1. Representation Error\u00b6", "L2_Desc": "This section explains the \u201c0.1\u201d example in detail, and shows how you can perform an exact analysis of cases like this yourself.  Basic familiarity with binary floating-point representation is assumed.Representation error refers to the fact that some (most, actually) decimal fractions cannot be represented exactly as binary (base 2) fractions. This is the chief reason why Python (or Perl, C, C++, Java, Fortran, and many others) often won\u2019t display the exact decimal number you expect.Why is that?  1/10 is not exactly representable as a binary fraction. Almost all machines today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 \u201cdouble precision\u201d.  754 doubles contain 53 bits of precision, so on input the computer strives to convert 0.1 to the closest fraction it can of the form J/2**N where J is an integer containing exactly 53 bits.  Rewritingasand recalling that J has exactly 53 bits (is >= 2**52 but < 2**53), the best value for N is 56:That is, 56 is the only value for N that leaves J with exactly 53 bits.  The best possible value for J is then that quotient rounded:Since the remainder is more than half of 10, the best approximation is obtained by rounding up:Therefore the best possible approximation to 1/10 in 754 double precision is:Dividing both the numerator and denominator by two reduces the fraction to:Note that since we rounded up, this is actually a little bit larger than 1/10; if we had not rounded up, the quotient would have been a little bit smaller than 1/10.  But in no case can it be exactly 1/10!So the computer never \u201csees\u201d 1/10:  what it sees is the exact fraction given above, the best 754 double approximation it can get:If we multiply that fraction by 10**55, we can see the value out to 55 decimal digits:meaning that the exact number stored in the computer is equal to the decimal value 0.1000000000000000055511151231257827021181583404541015625. Instead of displaying the full decimal value, many languages (including older versions of Python), round the result to 17 significant digits:The fractions and decimal modules make these calculations easy:", "L2_Code": "1 / 10 ~= J / (2**N)  J ~= 2**N / 10  >>> 2**52 <=  2**56 // 10  < 2**53 True  >>> q, r = divmod(2**56, 10) >>> r 6  >>> q+1 7205759403792794  7205759403792794 / 2 ** 56  3602879701896397 / 2 ** 55  >>> 0.1 * 2 ** 55 3602879701896397.0  >>> 3602879701896397 * 10 ** 55 // 2 ** 55 1000000000000000055511151231257827021181583404541015625  >>> format(0.1, '.17f') '0.10000000000000001'  >>> from decimal import Decimal >>> from fractions import Fraction  >>> Fraction.from_float(0.1) Fraction(3602879701896397, 36028797018963968)  >>> (0.1).as_integer_ratio() (3602879701896397, 36028797018963968)  >>> Decimal.from_float(0.1) Decimal('0.1000000000000000055511151231257827021181583404541015625')  >>> format(Decimal.from_float(0.1), '.17') '0.10000000000000001'  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures\u00b6", "M_Desc": "This chapter describes some things you\u2019ve learned about already in more detail, and adds some new things as well.", "M_Code": "", "L2_Title": "5.1. More on Lists\u00b6", "L2_Desc": "The list data type has some more methods.  Here are all of the methods of list objects:An example that uses most of the list methods:You might have noticed that methods like insert, remove or sort that only modify the list have no return value printed \u2013 they return the default None. [1]  This is a design principle for all mutable data structures in Python.", "L2_Code": ">>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana'] >>> fruits.count('apple') 2 >>> fruits.count('tangerine') 0 >>> fruits.index('banana') 3 >>> fruits.index('banana', 4)  # Find next banana starting a position 4 6 >>> fruits.reverse() >>> fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange'] >>> fruits.append('grape') >>> fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape'] >>> fruits.sort() >>> fruits ['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear'] >>> fruits.pop() 'pear'  ", "L3_Title": "5.1.1. Using Lists as Stacks\u00b6", "L3_Desc": "The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved (\u201clast-in, first-out\u201d).  To add an item to the top of the stack, use append().  To retrieve an item from the top of the stack, use pop() without an explicit index.  For example:", "L3_Code": ">>> stack = [3, 4, 5] >>> stack.append(6) >>> stack.append(7) >>> stack [3, 4, 5, 6, 7] >>> stack.pop() 7 >>> stack [3, 4, 5, 6] >>> stack.pop() 6 >>> stack.pop() 5 >>> stack [3, 4]  "},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures\u00b6", "M_Desc": "This chapter describes some things you\u2019ve learned about already in more detail, and adds some new things as well.", "M_Code": "", "L2_Title": "5.1. More on Lists\u00b6", "L2_Desc": "The list data type has some more methods.  Here are all of the methods of list objects:An example that uses most of the list methods:You might have noticed that methods like insert, remove or sort that only modify the list have no return value printed \u2013 they return the default None. [1]  This is a design principle for all mutable data structures in Python.", "L2_Code": ">>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana'] >>> fruits.count('apple') 2 >>> fruits.count('tangerine') 0 >>> fruits.index('banana') 3 >>> fruits.index('banana', 4)  # Find next banana starting a position 4 6 >>> fruits.reverse() >>> fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange'] >>> fruits.append('grape') >>> fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape'] >>> fruits.sort() >>> fruits ['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear'] >>> fruits.pop() 'pear'  ", "L3_Title": "5.1.2. Using Lists as Queues\u00b6", "L3_Desc": "It is also possible to use a list as a queue, where the first element added is the first element retrieved (\u201cfirst-in, first-out\u201d); however, lists are not efficient for this purpose.  While appends and pops from the end of list are fast, doing inserts or pops from the beginning of a list is slow (because all of the other elements have to be shifted by one).To implement a queue, use collections.deque which was designed to have fast appends and pops from both ends.  For example:", "L3_Code": ">>> from collections import deque >>> queue = deque([\"Eric\", \"John\", \"Michael\"]) >>> queue.append(\"Terry\")           # Terry arrives >>> queue.append(\"Graham\")          # Graham arrives >>> queue.popleft()                 # The first to arrive now leaves 'Eric' >>> queue.popleft()                 # The second to arrive now leaves 'John' >>> queue                           # Remaining queue in order of arrival deque(['Michael', 'Terry', 'Graham'])  "},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures\u00b6", "M_Desc": "This chapter describes some things you\u2019ve learned about already in more detail, and adds some new things as well.", "M_Code": "", "L2_Title": "5.1. More on Lists\u00b6", "L2_Desc": "The list data type has some more methods.  Here are all of the methods of list objects:An example that uses most of the list methods:You might have noticed that methods like insert, remove or sort that only modify the list have no return value printed \u2013 they return the default None. [1]  This is a design principle for all mutable data structures in Python.", "L2_Code": ">>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana'] >>> fruits.count('apple') 2 >>> fruits.count('tangerine') 0 >>> fruits.index('banana') 3 >>> fruits.index('banana', 4)  # Find next banana starting a position 4 6 >>> fruits.reverse() >>> fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange'] >>> fruits.append('grape') >>> fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape'] >>> fruits.sort() >>> fruits ['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear'] >>> fruits.pop() 'pear'  ", "L3_Title": "5.1.3. List Comprehensions\u00b6", "L3_Desc": "List comprehensions provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition.For example, assume we want to create a list of squares, like:Note that this creates (or overwrites) a variable named x that still exists after the loop completes.  We can calculate the list of squares without any side effects using:or, equivalently:which is more concise and readable.A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses.  The result will be a new list resulting from evaluating the expression in the context of the for and if clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal:and it\u2019s equivalent to:Note how the order of the for and if statements is the same in both these snippets.If the expression is a tuple (e.g. the (x, y) in the previous example), it must be parenthesized.List comprehensions can contain complex expressions and nested functions:", "L3_Code": ">>> squares = [] >>> for x in range(10): ...     squares.append(x**2) ... >>> squares [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]  squares = list(map(lambda x: x**2, range(10)))  squares = [x**2 for x in range(10)]  >>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y] [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]  >>> combs = [] >>> for x in [1,2,3]: ...     for y in [3,1,4]: ...         if x != y: ...             combs.append((x, y)) ... >>> combs [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]  >>> vec = [-4, -2, 0, 2, 4] >>> # create a new list with the values doubled >>> [x*2 for x in vec] [-8, -4, 0, 4, 8] >>> # filter the list to exclude negative numbers >>> [x for x in vec if x >= 0] [0, 2, 4] >>> # apply a function to all the elements >>> [abs(x) for x in vec] [4, 2, 0, 2, 4] >>> # call a method on each element >>> freshfruit = ['  banana', '  loganberry ', 'passion fruit  '] >>> [weapon.strip() for weapon in freshfruit] ['banana', 'loganberry', 'passion fruit'] >>> # create a list of 2-tuples like (number, square) >>> [(x, x**2) for x in range(6)] [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)] >>> # the tuple must be parenthesized, otherwise an error is raised >>> [x, x**2 for x in range(6)]   File \"<stdin>\", line 1, in <module>     [x, x**2 for x in range(6)]                ^ SyntaxError: invalid syntax >>> # flatten a list using a listcomp with two 'for' >>> vec = [[1,2,3], [4,5,6], [7,8,9]] >>> [num for elem in vec for num in elem] [1, 2, 3, 4, 5, 6, 7, 8, 9]  >>> from math import pi >>> [str(round(pi, i)) for i in range(1, 6)] ['3.1', '3.14', '3.142', '3.1416', '3.14159']  "},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures\u00b6", "M_Desc": "This chapter describes some things you\u2019ve learned about already in more detail, and adds some new things as well.", "M_Code": "", "L2_Title": "5.1. More on Lists\u00b6", "L2_Desc": "The list data type has some more methods.  Here are all of the methods of list objects:An example that uses most of the list methods:You might have noticed that methods like insert, remove or sort that only modify the list have no return value printed \u2013 they return the default None. [1]  This is a design principle for all mutable data structures in Python.", "L2_Code": ">>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana'] >>> fruits.count('apple') 2 >>> fruits.count('tangerine') 0 >>> fruits.index('banana') 3 >>> fruits.index('banana', 4)  # Find next banana starting a position 4 6 >>> fruits.reverse() >>> fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange'] >>> fruits.append('grape') >>> fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape'] >>> fruits.sort() >>> fruits ['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear'] >>> fruits.pop() 'pear'  ", "L3_Title": "5.1.4. Nested List Comprehensions\u00b6", "L3_Desc": "The initial expression in a list comprehension can be any arbitrary expression, including another list comprehension.Consider the following example of a 3x4 matrix implemented as a list of 3 lists of length 4:The following list comprehension will transpose rows and columns:As we saw in the previous section, the nested listcomp is evaluated in the context of the for that follows it, so this example is equivalent to:which, in turn, is the same as:In the real world, you should prefer built-in functions to complex flow statements. The zip() function would do a great job for this use case:See Unpacking Argument Lists for details on the asterisk in this line.", "L3_Code": ">>> matrix = [ ...     [1, 2, 3, 4], ...     [5, 6, 7, 8], ...     [9, 10, 11, 12], ... ]  >>> [[row[i] for row in matrix] for i in range(4)] [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]  >>> transposed = [] >>> for i in range(4): ...     transposed.append([row[i] for row in matrix]) ... >>> transposed [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]  >>> transposed = [] >>> for i in range(4): ...     # the following 3 lines implement the nested listcomp ...     transposed_row = [] ...     for row in matrix: ...         transposed_row.append(row[i]) ...     transposed.append(transposed_row) ... >>> transposed [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]  >>> list(zip(*matrix)) [(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]  "},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures\u00b6", "M_Desc": "This chapter describes some things you\u2019ve learned about already in more detail, and adds some new things as well.", "M_Code": "", "L2_Title": "5.2. The del statement\u00b6", "L2_Desc": "There is a way to remove an item from a list given its index instead of its value: the del statement.  This differs from the pop() method which returns a value.  The del statement can also be used to remove slices from a list or clear the entire list (which we did earlier by assignment of an empty list to the slice).  For example:del can also be used to delete entire variables:Referencing the name a hereafter is an error (at least until another value is assigned to it).  We\u2019ll find other uses for del later.", "L2_Code": ">>> a = [-1, 1, 66.25, 333, 333, 1234.5] >>> del a[0] >>> a [1, 66.25, 333, 333, 1234.5] >>> del a[2:4] >>> a [1, 66.25, 1234.5] >>> del a[:] >>> a []  >>> del a  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures\u00b6", "M_Desc": "This chapter describes some things you\u2019ve learned about already in more detail, and adds some new things as well.", "M_Code": "", "L2_Title": "5.3. Tuples and Sequences\u00b6", "L2_Desc": "We saw that lists and strings have many common properties, such as indexing and slicing operations.  They are two examples of sequence data types (see Sequence Types \u2014 list, tuple, range).  Since Python is an evolving language, other sequence data types may be added.  There is also another standard sequence data type: the tuple.A tuple consists of a number of values separated by commas, for instance:As you see, on output tuples are always enclosed in parentheses, so that nested tuples are interpreted correctly; they may be input with or without surrounding parentheses, although often parentheses are necessary anyway (if the tuple is part of a larger expression).  It is not possible to assign to the individual items of a tuple, however it is possible to create tuples which contain mutable objects, such as lists.Though tuples may seem similar to lists, they are often used in different situations and for different purposes. Tuples are immutable, and usually contain a heterogeneous sequence of elements that are accessed via unpacking (see later in this section) or indexing (or even by attribute in the case of namedtuples). Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list.A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these.  Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses). Ugly, but effective.  For example:The statement t = 12345, 54321, 'hello!' is an example of tuple packing: the values 12345, 54321 and 'hello!' are packed together in a tuple. The reverse operation is also possible:This is called, appropriately enough, sequence unpacking and works for any sequence on the right-hand side.  Sequence unpacking requires that there are as many variables on the left side of the equals sign as there are elements in the sequence.  Note that multiple assignment is really just a combination of tuple packing and sequence unpacking.", "L2_Code": ">>> t = 12345, 54321, 'hello!' >>> t[0] 12345 >>> t (12345, 54321, 'hello!') >>> # Tuples may be nested: ... u = t, (1, 2, 3, 4, 5) >>> u ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5)) >>> # Tuples are immutable: ... t[0] = 88888 Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> TypeError: 'tuple' object does not support item assignment >>> # but they can contain mutable objects: ... v = ([1, 2, 3], [3, 2, 1]) >>> v ([1, 2, 3], [3, 2, 1])  >>> empty = () >>> singleton = 'hello',    # <-- note trailing comma >>> len(empty) 0 >>> len(singleton) 1 >>> singleton ('hello',)  >>> x, y, z = t  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures\u00b6", "M_Desc": "This chapter describes some things you\u2019ve learned about already in more detail, and adds some new things as well.", "M_Code": "", "L2_Title": "5.4. Sets\u00b6", "L2_Desc": "Python also includes a data type for sets.  A set is an unordered collection with no duplicate elements.  Basic uses include membership testing and eliminating duplicate entries.  Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.Curly braces or the set() function can be used to create sets.  Note: to create an empty set you have to use set(), not {}; the latter creates an empty dictionary, a data structure that we discuss in the next section.Here is a brief demonstration:Similarly to list comprehensions, set comprehensions are also supported:", "L2_Code": ">>> basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'} >>> print(basket)                      # show that duplicates have been removed {'orange', 'banana', 'pear', 'apple'} >>> 'orange' in basket                 # fast membership testing True >>> 'crabgrass' in basket False  >>> # Demonstrate set operations on unique letters from two words ... >>> a = set('abracadabra') >>> b = set('alacazam') >>> a                                  # unique letters in a {'a', 'r', 'b', 'c', 'd'} >>> a - b                              # letters in a but not in b {'r', 'd', 'b'} >>> a | b                              # letters in a or b or both {'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'} >>> a & b                              # letters in both a and b {'a', 'c'} >>> a ^ b                              # letters in a or b but not both {'r', 'd', 'b', 'm', 'z', 'l'}  >>> a = {x for x in 'abracadabra' if x not in 'abc'} >>> a {'r', 'd'}  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures\u00b6", "M_Desc": "This chapter describes some things you\u2019ve learned about already in more detail, and adds some new things as well.", "M_Code": "", "L2_Title": "5.5. Dictionaries\u00b6", "L2_Desc": "Another useful data type built into Python is the dictionary (see Mapping Types \u2014 dict). Dictionaries are sometimes found in other languages as \u201cassociative memories\u201d or \u201cassociative arrays\u201d.  Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type; strings and numbers can always be keys.  Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key. You can\u2019t use lists as keys, since lists can be modified in place using index assignments, slice assignments, or methods like append() and extend().It is best to think of a dictionary as a set of key: value pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: {}. Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary; this is also the way dictionaries are written on output.The main operations on a dictionary are storing a value with some key and extracting the value given the key.  It is also possible to delete a key:value pair with del. If you store using a key that is already in use, the old value associated with that key is forgotten.  It is an error to extract a value using a non-existent key.Performing list(d) on a dictionary returns a list of all the keys used in the dictionary, in insertion order (if you want it sorted, just use sorted(d) instead). To check whether a single key is in the dictionary, use the in keyword.Here is a small example using a dictionary:The dict() constructor builds dictionaries directly from sequences of key-value pairs:In addition, dict comprehensions can be used to create dictionaries from arbitrary key and value expressions:When the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments:", "L2_Code": ">>> tel = {'jack': 4098, 'sape': 4139} >>> tel['guido'] = 4127 >>> tel {'jack': 4098, 'sape': 4139, 'guido': 4127} >>> tel['jack'] 4098 >>> del tel['sape'] >>> tel['irv'] = 4127 >>> tel {'jack': 4098, 'guido': 4127, 'irv': 4127} >>> list(tel) ['jack', 'guido', 'irv'] >>> sorted(tel) ['guido', 'irv', 'jack'] >>> 'guido' in tel True >>> 'jack' not in tel False  >>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)]) {'sape': 4139, 'guido': 4127, 'jack': 4098}  >>> {x: x**2 for x in (2, 4, 6)} {2: 4, 4: 16, 6: 36}  >>> dict(sape=4139, guido=4127, jack=4098) {'sape': 4139, 'guido': 4127, 'jack': 4098}  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures\u00b6", "M_Desc": "This chapter describes some things you\u2019ve learned about already in more detail, and adds some new things as well.", "M_Code": "", "L2_Title": "5.6. Looping Techniques\u00b6", "L2_Desc": "When looping through dictionaries, the key and corresponding value can be retrieved at the same time using the items() method.When looping through a sequence, the position index and corresponding value can be retrieved at the same time using the enumerate() function.To loop over two or more sequences at the same time, the entries can be paired with the zip() function.To loop over a sequence in reverse, first specify the sequence in a forward direction and then call the reversed() function.To loop over a sequence in sorted order, use the sorted() function which returns a new sorted list while leaving the source unaltered.It is sometimes tempting to change a list while you are looping over it; however, it is often simpler and safer to create a new list instead.", "L2_Code": ">>> knights = {'gallahad': 'the pure', 'robin': 'the brave'} >>> for k, v in knights.items(): ...     print(k, v) ... gallahad the pure robin the brave  >>> for i, v in enumerate(['tic', 'tac', 'toe']): ...     print(i, v) ... 0 tic 1 tac 2 toe  >>> questions = ['name', 'quest', 'favorite color'] >>> answers = ['lancelot', 'the holy grail', 'blue'] >>> for q, a in zip(questions, answers): ...     print('What is your {0}?  It is {1}.'.format(q, a)) ... What is your name?  It is lancelot. What is your quest?  It is the holy grail. What is your favorite color?  It is blue.  >>> for i in reversed(range(1, 10, 2)): ...     print(i) ... 9 7 5 3 1  >>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana'] >>> for f in sorted(set(basket)): ...     print(f) ... apple banana orange pear  >>> import math >>> raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8] >>> filtered_data = [] >>> for value in raw_data: ...     if not math.isnan(value): ...         filtered_data.append(value) ... >>> filtered_data [56.2, 51.7, 55.3, 52.5, 47.8]  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures\u00b6", "M_Desc": "This chapter describes some things you\u2019ve learned about already in more detail, and adds some new things as well.", "M_Code": "", "L2_Title": "5.7. More on Conditions\u00b6", "L2_Desc": "The conditions used in while and if statements can contain any operators, not just comparisons.The comparison operators in and not in check whether a value occurs (does not occur) in a sequence.  The operators is and is not compare whether two objects are really the same object; this only matters for mutable objects like lists.  All comparison operators have the same priority, which is lower than that of all numerical operators.Comparisons can be chained.  For example, a < b == c tests whether a is less than b and moreover b equals c.Comparisons may be combined using the Boolean operators and and or, and the outcome of a comparison (or of any other Boolean expression) may be negated with not.  These have lower priorities than comparison operators; between them, not has the highest priority and or the lowest, so that A and not B or C is equivalent to (A and (not B)) or C. As always, parentheses can be used to express the desired composition.The Boolean operators and and or are so-called short-circuit operators: their arguments are evaluated from left to right, and evaluation stops as soon as the outcome is determined.  For example, if A and C are true but B is false, A and B and C does not evaluate the expression C.  When used as a general value and not as a Boolean, the return value of a short-circuit operator is the last evaluated argument.It is possible to assign the result of a comparison or other Boolean expression to a variable.  For example,Note that in Python, unlike C, assignment cannot occur inside expressions. C programmers may grumble about this, but it avoids a common class of problems encountered in C programs: typing = in an expression when == was intended.", "L2_Code": ">>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance' >>> non_null = string1 or string2 or string3 >>> non_null 'Trondheim'  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures\u00b6", "M_Desc": "This chapter describes some things you\u2019ve learned about already in more detail, and adds some new things as well.", "M_Code": "", "L2_Title": "5.8. Comparing Sequences and Other Types\u00b6", "L2_Desc": "Sequence objects may be compared to other objects with the same sequence type. The comparison uses lexicographical ordering: first the first two items are compared, and if they differ this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted. If two items to be compared are themselves sequences of the same type, the lexicographical comparison is carried out recursively.  If all items of two sequences compare equal, the sequences are considered equal. If one sequence is an initial sub-sequence of the other, the shorter sequence is the smaller (lesser) one.  Lexicographical ordering for strings uses the Unicode code point number to order individual characters.  Some examples of comparisons between sequences of the same type:Note that comparing objects of different types with < or > is legal provided that the objects have appropriate comparison methods.  For example, mixed numeric types are compared according to their numeric value, so 0 equals 0.0, etc.  Otherwise, rather than providing an arbitrary ordering, the interpreter will raise a TypeError exception.Footnotes", "L2_Code": "(1, 2, 3)              < (1, 2, 4) [1, 2, 3]              < [1, 2, 4] 'ABC' < 'C' < 'Pascal' < 'Python' (1, 2, 3, 4)           < (1, 2, 4) (1, 2)                 < (1, 2, -1) (1, 2, 3)             == (1.0, 2.0, 3.0) (1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/introduction.html", "Language": "Python", "M_Title": "3. An Informal Introduction to Python\u00b6", "M_Desc": "In the following examples, input and output are distinguished by the presence or absence of prompts (>>> and \u2026): to repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. Note that a secondary prompt on a line by itself in an example means you must type a blank line; this is used to end a multi-line command.Many of the examples in this manual, even those entered at the interactive prompt, include comments.  Comments in Python start with the hash character, #, and extend to the end of the physical line.  A comment may appear at the start of a line or following whitespace or code, but not within a string literal.  A hash character within a string literal is just a hash character. Since comments are to clarify code and are not interpreted by Python, they may be omitted when typing in examples.Some examples:", "M_Code": "# this is the first comment spam = 1  # and this is the second comment           # ... and now a third! text = \"# This is not a comment because it's inside quotes.\"  ", "L2_Title": "3.1. Using Python as a Calculator\u00b6", "L2_Desc": "Let\u2019s try some simple Python commands.  Start the interpreter and wait for the primary prompt, >>>.  (It shouldn\u2019t take long.)", "L2_Code": "", "L3_Title": "3.1.1. Numbers\u00b6", "L3_Desc": "The interpreter acts as a simple calculator: you can type an expression at it and it will write the value.  Expression syntax is straightforward: the operators +, -, * and / work just like in most other languages (for example, Pascal or C); parentheses (()) can be used for grouping. For example:The integer numbers (e.g. 2, 4, 20) have type int, the ones with a fractional part (e.g. 5.0, 1.6) have type float.  We will see more about numeric types later in the tutorial.Division (/) always returns a float.  To do floor division and get an integer result (discarding any fractional result) you can use the // operator; to calculate the remainder you can use %:With Python, it is possible to use the ** operator to calculate powers [1]:The equal sign (=) is used to assign a value to a variable. Afterwards, no result is displayed before the next interactive prompt:If a variable is not \u201cdefined\u201d (assigned a value), trying to use it will give you an error:There is full support for floating point; operators with mixed type operands convert the integer operand to floating point:In interactive mode, the last printed expression is assigned to the variable _.  This means that when you are using Python as a desk calculator, it is somewhat easier to continue calculations, for example:This variable should be treated as read-only by the user.  Don\u2019t explicitly assign a value to it \u2014 you would create an independent local variable with the same name masking the built-in variable with its magic behavior.In addition to int and float, Python supports other types of numbers, such as Decimal and Fraction. Python also has built-in support for complex numbers, and uses the j or J suffix to indicate the imaginary part (e.g. 3+5j).", "L3_Code": ">>> 2 + 2 4 >>> 50 - 5*6 20 >>> (50 - 5*6) / 4 5.0 >>> 8 / 5  # division always returns a floating point number 1.6  >>> 17 / 3  # classic division returns a float 5.666666666666667 >>> >>> 17 // 3  # floor division discards the fractional part 5 >>> 17 % 3  # the % operator returns the remainder of the division 2 >>> 5 * 3 + 2  # result * divisor + remainder 17  >>> 5 ** 2  # 5 squared 25 >>> 2 ** 7  # 2 to the power of 7 128  >>> width = 20 >>> height = 5 * 9 >>> width * height 900  >>> n  # try to access an undefined variable Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> NameError: name 'n' is not defined  >>> 4 * 3.75 - 1 14.0  >>> tax = 12.5 / 100 >>> price = 100.50 >>> price * tax 12.5625 >>> price + _ 113.0625 >>> round(_, 2) 113.06  "},
{"URL": "https://docs.python.org/3/tutorial/introduction.html", "Language": "Python", "M_Title": "3. An Informal Introduction to Python\u00b6", "M_Desc": "In the following examples, input and output are distinguished by the presence or absence of prompts (>>> and \u2026): to repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. Note that a secondary prompt on a line by itself in an example means you must type a blank line; this is used to end a multi-line command.Many of the examples in this manual, even those entered at the interactive prompt, include comments.  Comments in Python start with the hash character, #, and extend to the end of the physical line.  A comment may appear at the start of a line or following whitespace or code, but not within a string literal.  A hash character within a string literal is just a hash character. Since comments are to clarify code and are not interpreted by Python, they may be omitted when typing in examples.Some examples:", "M_Code": "# this is the first comment spam = 1  # and this is the second comment           # ... and now a third! text = \"# This is not a comment because it's inside quotes.\"  ", "L2_Title": "3.1. Using Python as a Calculator\u00b6", "L2_Desc": "Let\u2019s try some simple Python commands.  Start the interpreter and wait for the primary prompt, >>>.  (It shouldn\u2019t take long.)", "L2_Code": "", "L3_Title": "3.1.2. Strings\u00b6", "L3_Desc": "Besides numbers, Python can also manipulate strings, which can be expressed in several ways.  They can be enclosed in single quotes ('...') or double quotes (\"...\") with the same result [2].  \\ can be used to escape quotes:In the interactive interpreter, the output string is enclosed in quotes and special characters are escaped with backslashes.  While this might sometimes look different from the input (the enclosing quotes could change), the two strings are equivalent.  The string is enclosed in double quotes if the string contains a single quote and no double quotes, otherwise it is enclosed in single quotes.  The print() function produces a more readable output, by omitting the enclosing quotes and by printing escaped and special characters:If you don\u2019t want characters prefaced by \\ to be interpreted as special characters, you can use raw strings by adding an r before the first quote:String literals can span multiple lines.  One way is using triple-quotes: \"\"\"...\"\"\" or '''...'''.  End of lines are automatically included in the string, but it\u2019s possible to prevent this by adding a \\ at the end of the line.  The following example:produces the following output (note that the initial newline is not included):Strings can be concatenated (glued together) with the + operator, and repeated with *:Two or more string literals (i.e. the ones enclosed between quotes) next to each other are automatically concatenated.This feature is particularly useful when you want to break long strings:This only works with two literals though, not with variables or expressions:If you want to concatenate variables or a variable and a literal, use +:Strings can be indexed (subscripted), with the first character having index 0. There is no separate character type; a character is simply a string of size one:Indices may also be negative numbers, to start counting from the right:Note that since -0 is the same as 0, negative indices start from -1.In addition to indexing, slicing is also supported.  While indexing is used to obtain individual characters, slicing allows you to obtain substring:Note how the start is always included, and the end always excluded.  This makes sure that s[:i] + s[i:] is always equal to s:Slice indices have useful defaults; an omitted first index defaults to zero, an omitted second index defaults to the size of the string being sliced.One way to remember how slices work is to think of the indices as pointing between characters, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of n characters has index n, for example:The first row of numbers gives the position of the indices 0\u20266 in the string; the second row gives the corresponding negative indices. The slice from i to j consists of all characters between the edges labeled i and j, respectively.For non-negative indices, the length of a slice is the difference of the indices, if both are within bounds.  For example, the length of word[1:3] is 2.Attempting to use an index that is too large will result in an error:However, out of range slice indexes are handled gracefully when used for slicing:Python strings cannot be changed \u2014 they are immutable. Therefore, assigning to an indexed position in the string results in an error:If you need a different string, you should create a new one:The built-in function len() returns the length of a string:", "L3_Code": ">>> 'spam eggs'  # single quotes 'spam eggs' >>> 'doesn\\'t'  # use \\' to escape the single quote... \"doesn't\" >>> \"doesn't\"  # ...or use double quotes instead \"doesn't\" >>> '\"Yes,\" they said.' '\"Yes,\" they said.' >>> \"\\\"Yes,\\\" they said.\" '\"Yes,\" they said.' >>> '\"Isn\\'t,\" they said.' '\"Isn\\'t,\" they said.'  >>> '\"Isn\\'t,\" they said.' '\"Isn\\'t,\" they said.' >>> print('\"Isn\\'t,\" they said.') \"Isn't,\" they said. >>> s = 'First line.\\nSecond line.'  # \\n means newline >>> s  # without print(), \\n is included in the output 'First line.\\nSecond line.' >>> print(s)  # with print(), \\n produces a new line First line. Second line.  >>> print('C:\\some\\name')  # here \\n means newline! C:\\some ame >>> print(r'C:\\some\\name')  # note the r before the quote C:\\some\\name  print(\"\"\"\\ Usage: thingy [OPTIONS]      -h                        Display this usage message      -H hostname               Hostname to connect to \"\"\")  >>> # 3 times 'un', followed by 'ium' >>> 3 * 'un' + 'ium' 'unununium'  >>> 'Py' 'thon' 'Python'  >>> text = ('Put several strings within parentheses ' ...         'to have them joined together.') >>> text 'Put several strings within parentheses to have them joined together.'  >>> prefix = 'Py' >>> prefix 'thon'  # can't concatenate a variable and a string literal   File \"<stdin>\", line 1     prefix 'thon'                 ^ SyntaxError: invalid syntax >>> ('un' * 3) 'ium'   File \"<stdin>\", line 1     ('un' * 3) 'ium'                    ^ SyntaxError: invalid syntax  >>> prefix + 'thon' 'Python'  >>> word = 'Python' >>> word[0]  # character in position 0 'P' >>> word[5]  # character in position 5 'n'  >>> word[-1]  # last character 'n' >>> word[-2]  # second-last character 'o' >>> word[-6] 'P'  >>> word[0:2]  # characters from position 0 (included) to 2 (excluded) 'Py' >>> word[2:5]  # characters from position 2 (included) to 5 (excluded) 'tho'  >>> word[:2] + word[2:] 'Python' >>> word[:4] + word[4:] 'Python'  >>> word[:2]   # character from the beginning to position 2 (excluded) 'Py' >>> word[4:]   # characters from position 4 (included) to the end 'on' >>> word[-2:]  # characters from the second-last (included) to the end 'on'   +---+---+---+---+---+---+  | P | y | t | h | o | n |  +---+---+---+---+---+---+  0   1   2   3   4   5   6 -6  -5  -4  -3  -2  -1  >>> word[42]  # the word only has 6 characters Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> IndexError: string index out of range  >>> word[4:42] 'on' >>> word[42:] ''  >>> word[0] = 'J' Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> TypeError: 'str' object does not support item assignment >>> word[2:] = 'py' Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> TypeError: 'str' object does not support item assignment  >>> 'J' + word[1:] 'Jython' >>> word[:2] + 'py' 'Pypy'  >>> s = 'supercalifragilisticexpialidocious' >>> len(s) 34  "},
{"URL": "https://docs.python.org/3/tutorial/introduction.html", "Language": "Python", "M_Title": "3. An Informal Introduction to Python\u00b6", "M_Desc": "In the following examples, input and output are distinguished by the presence or absence of prompts (>>> and \u2026): to repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. Note that a secondary prompt on a line by itself in an example means you must type a blank line; this is used to end a multi-line command.Many of the examples in this manual, even those entered at the interactive prompt, include comments.  Comments in Python start with the hash character, #, and extend to the end of the physical line.  A comment may appear at the start of a line or following whitespace or code, but not within a string literal.  A hash character within a string literal is just a hash character. Since comments are to clarify code and are not interpreted by Python, they may be omitted when typing in examples.Some examples:", "M_Code": "# this is the first comment spam = 1  # and this is the second comment           # ... and now a third! text = \"# This is not a comment because it's inside quotes.\"  ", "L2_Title": "3.1. Using Python as a Calculator\u00b6", "L2_Desc": "Let\u2019s try some simple Python commands.  Start the interpreter and wait for the primary prompt, >>>.  (It shouldn\u2019t take long.)", "L2_Code": "", "L3_Title": "3.1.3. Lists\u00b6", "L3_Desc": "Python knows a number of compound data types, used to group together other values.  The most versatile is the list, which can be written as a list of comma-separated values (items) between square brackets.  Lists might contain items of different types, but usually the items all have the same type.Like strings (and all other built-in sequence type), lists can be indexed and sliced:All slice operations return a new list containing the requested elements.  This means that the following slice returns a new (shallow) copy of the list:Lists also support operations like concatenation:Unlike strings, which are immutable, lists are a mutable type, i.e. it is possible to change their content:You can also add new items at the end of the list, by using the append() method (we will see more about methods later):Assignment to slices is also possible, and this can even change the size of the list or clear it entirely:The built-in function len() also applies to lists:It is possible to nest lists (create lists containing other lists), for example:", "L3_Code": ">>> squares = [1, 4, 9, 16, 25] >>> squares [1, 4, 9, 16, 25]  >>> squares[0]  # indexing returns the item 1 >>> squares[-1] 25 >>> squares[-3:]  # slicing returns a new list [9, 16, 25]  >>> squares[:] [1, 4, 9, 16, 25]  >>> squares + [36, 49, 64, 81, 100] [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]  >>> cubes = [1, 8, 27, 65, 125]  # something's wrong here >>> 4 ** 3  # the cube of 4 is 64, not 65! 64 >>> cubes[3] = 64  # replace the wrong value >>> cubes [1, 8, 27, 64, 125]  >>> cubes.append(216)  # add the cube of 6 >>> cubes.append(7 ** 3)  # and the cube of 7 >>> cubes [1, 8, 27, 64, 125, 216, 343]  >>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g'] >>> letters ['a', 'b', 'c', 'd', 'e', 'f', 'g'] >>> # replace some values >>> letters[2:5] = ['C', 'D', 'E'] >>> letters ['a', 'b', 'C', 'D', 'E', 'f', 'g'] >>> # now remove them >>> letters[2:5] = [] >>> letters ['a', 'b', 'f', 'g'] >>> # clear the list by replacing all the elements with an empty list >>> letters[:] = [] >>> letters []  >>> letters = ['a', 'b', 'c', 'd'] >>> len(letters) 4  >>> a = ['a', 'b', 'c'] >>> n = [1, 2, 3] >>> x = [a, n] >>> x [['a', 'b', 'c'], [1, 2, 3]] >>> x[0] ['a', 'b', 'c'] >>> x[0][1] 'b'  "},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools\u00b6", "M_Desc": "Besides the while statement just introduced, Python knows the usual control flow statements known from other languages, with some twists.", "M_Code": "", "L2_Title": "4.1. if Statements\u00b6", "L2_Desc": "Perhaps the most well-known statement type is the if statement.  For example:There can be zero or more elif parts, and the else part is optional.  The keyword \u2018elif\u2019 is short for \u2018else if\u2019, and is useful to avoid excessive indentation.  An  if \u2026 elif \u2026 elif \u2026 sequence is a substitute for the switch or case statements found in other languages.", "L2_Code": ">>> x = int(input(\"Please enter an integer: \")) Please enter an integer: 42 >>> if x < 0: ...     x = 0 ...     print('Negative changed to zero') ... elif x == 0: ...     print('Zero') ... elif x == 1: ...     print('Single') ... else: ...     print('More') ... More  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/introduction.html", "Language": "Python", "M_Title": "3. An Informal Introduction to Python\u00b6", "M_Desc": "In the following examples, input and output are distinguished by the presence or absence of prompts (>>> and \u2026): to repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. Note that a secondary prompt on a line by itself in an example means you must type a blank line; this is used to end a multi-line command.Many of the examples in this manual, even those entered at the interactive prompt, include comments.  Comments in Python start with the hash character, #, and extend to the end of the physical line.  A comment may appear at the start of a line or following whitespace or code, but not within a string literal.  A hash character within a string literal is just a hash character. Since comments are to clarify code and are not interpreted by Python, they may be omitted when typing in examples.Some examples:", "M_Code": "# this is the first comment spam = 1  # and this is the second comment           # ... and now a third! text = \"# This is not a comment because it's inside quotes.\"  ", "L2_Title": "3.2. First Steps Towards Programming\u00b6", "L2_Desc": "Of course, we can use Python for more complicated tasks than adding two and two together.  For instance, we can write an initial sub-sequence of the Fibonacci series as follows:This example introduces several new features.Footnotes", "L2_Code": ">>> # Fibonacci series: ... # the sum of two elements defines the next ... a, b = 0, 1 >>> while a < 10: ...     print(a) ...     a, b = b, a+b ... 0 1 1 2 3 5 8  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools\u00b6", "M_Desc": "Besides the while statement just introduced, Python knows the usual control flow statements known from other languages, with some twists.", "M_Code": "", "L2_Title": "4.2. for Statements\u00b6", "L2_Desc": "The for statement in Python differs a bit from what you may be used to in C or Pascal.  Rather than always iterating over an arithmetic progression of numbers (like in Pascal), or giving the user the ability to define both the iteration step and halting condition (as C), Python\u2019s for statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence.  For example (no pun intended):If you need to modify the sequence you are iterating over while inside the loop (for example to duplicate selected items), it is recommended that you first make a copy.  Iterating over a sequence does not implicitly make a copy.  The slice notation makes this especially convenient:With for w in words:, the example would attempt to create an infinite list, inserting defenestrate over and over again.", "L2_Code": ">>> # Measure some strings: ... words = ['cat', 'window', 'defenestrate'] >>> for w in words: ...     print(w, len(w)) ... cat 3 window 6 defenestrate 12  >>> for w in words[:]:  # Loop over a slice copy of the entire list. ...     if len(w) > 6: ...         words.insert(0, w) ... >>> words ['defenestrate', 'cat', 'window', 'defenestrate']  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools\u00b6", "M_Desc": "Besides the while statement just introduced, Python knows the usual control flow statements known from other languages, with some twists.", "M_Code": "", "L2_Title": "4.3. The range() Function\u00b6", "L2_Desc": "If you do need to iterate over a sequence of numbers, the built-in function range() comes in handy.  It generates arithmetic progressions:The given end point is never part of the generated sequence; range(10) generates 10 values, the legal indices for items of a sequence of length 10.  It is possible to let the range start at another number, or to specify a different increment (even negative; sometimes this is called the \u2018step\u2019):To iterate over the indices of a sequence, you can combine range() and len() as follows:In most such cases, however, it is convenient to use the enumerate() function, see Looping Techniques.A strange thing happens if you just print a range:In many ways the object returned by range() behaves as if it is a list, but in fact it isn\u2019t. It is an object which returns the successive items of the desired sequence when you iterate over it, but it doesn\u2019t really make the list, thus saving space.We say such an object is iterable, that is, suitable as a target for functions and constructs that expect something from which they can obtain successive items until the supply is exhausted. We have seen that the for statement is such an iterator. The function list() is another; it creates lists from iterables:Later we will see more functions that return iterables and take iterables as argument.", "L2_Code": ">>> for i in range(5): ...     print(i) ... 0 1 2 3 4  range(5, 10)    5, 6, 7, 8, 9  range(0, 10, 3)    0, 3, 6, 9  range(-10, -100, -30)   -10, -40, -70  >>> a = ['Mary', 'had', 'a', 'little', 'lamb'] >>> for i in range(len(a)): ...     print(i, a[i]) ... 0 Mary 1 had 2 a 3 little 4 lamb  >>> print(range(10)) range(0, 10)  >>> list(range(5)) [0, 1, 2, 3, 4]  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools\u00b6", "M_Desc": "Besides the while statement just introduced, Python knows the usual control flow statements known from other languages, with some twists.", "M_Code": "", "L2_Title": "4.4. break and continue Statements, and else Clauses on Loops\u00b6", "L2_Desc": "The break statement, like in C, breaks out of the innermost enclosing for or while loop.Loop statements may have an else clause; it is executed when the loop terminates through exhaustion of the list (with for) or when the condition becomes false (with while), but not when the loop is terminated by a break statement.  This is exemplified by the following loop, which searches for prime numbers:(Yes, this is the correct code.  Look closely: the else clause belongs to the for loop, not the if statement.)When used with a loop, the else clause has more in common with the else clause of a try statement than it does that of if statements: a try statement\u2019s else clause runs when no exception occurs, and a loop\u2019s else clause runs when no break occurs. For more on the try statement and exceptions, see Handling Exceptions.The continue statement, also borrowed from C, continues with the next iteration of the loop:", "L2_Code": ">>> for n in range(2, 10): ...     for x in range(2, n): ...         if n % x == 0: ...             print(n, 'equals', x, '*', n//x) ...             break ...     else: ...         # loop fell through without finding a factor ...         print(n, 'is a prime number') ... 2 is a prime number 3 is a prime number 4 equals 2 * 2 5 is a prime number 6 equals 2 * 3 7 is a prime number 8 equals 2 * 4 9 equals 3 * 3  >>> for num in range(2, 10): ...     if num % 2 == 0: ...         print(\"Found an even number\", num) ...         continue ...     print(\"Found a number\", num) Found an even number 2 Found a number 3 Found an even number 4 Found a number 5 Found an even number 6 Found a number 7 Found an even number 8 Found a number 9  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools\u00b6", "M_Desc": "Besides the while statement just introduced, Python knows the usual control flow statements known from other languages, with some twists.", "M_Code": "", "L2_Title": "4.5. pass Statements\u00b6", "L2_Desc": "The pass statement does nothing. It can be used when a statement is required syntactically but the program requires no action. For example:This is commonly used for creating minimal classes:Another place pass can be used is as a place-holder for a function or conditional body when you are working on new code, allowing you to keep thinking at a more abstract level.  The pass is silently ignored:", "L2_Code": ">>> while True: ...     pass  # Busy-wait for keyboard interrupt (Ctrl+C) ...  >>> class MyEmptyClass: ...     pass ...  >>> def initlog(*args): ...     pass   # Remember to implement this! ...  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools\u00b6", "M_Desc": "Besides the while statement just introduced, Python knows the usual control flow statements known from other languages, with some twists.", "M_Code": "", "L2_Title": "4.6. Defining Functions\u00b6", "L2_Desc": "We can create a function that writes the Fibonacci series to an arbitrary boundary:The keyword def introduces a function definition.  It must be followed by the function name and the parenthesized list of formal parameters. The statements that form the body of the function start at the next line, and must be indented.The first statement of the function body can optionally be a string literal; this string literal is the function\u2019s documentation string, or docstring. (More about docstrings can be found in the section Documentation Strings.) There are tools which use docstrings to automatically produce online or printed documentation, or to let the user interactively browse through code; it\u2019s good practice to include docstrings in code that you write, so make a habit of it.The execution of a function introduces a new symbol table used for the local variables of the function.  More precisely, all variable assignments in a function store the value in the local symbol table; whereas variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names. Thus, global variables cannot be directly assigned a value within a function (unless named in a global statement), although they may be referenced.The actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called; thus, arguments are passed using call by value (where the value is always an object reference, not the value of the object). [1] When a function calls another function, a new local symbol table is created for that call.A function definition introduces the function name in the current symbol table. The value of the function name has a type that is recognized by the interpreter as a user-defined function.  This value can be assigned to another name which can then also be used as a function.  This serves as a general renaming mechanism:Coming from other languages, you might object that fib is not a function but a procedure since it doesn\u2019t return a value.  In fact, even functions without a return statement do return a value, albeit a rather boring one.  This value is called None (it\u2019s a built-in name).  Writing the value None is normally suppressed by the interpreter if it would be the only value written. You can see it if you really want to using print():It is simple to write a function that returns a list of the numbers of the Fibonacci series, instead of printing it:This example, as usual, demonstrates some new Python features:", "L2_Code": ">>> def fib(n):    # write Fibonacci series up to n ...     \"\"\"Print a Fibonacci series up to n.\"\"\" ...     a, b = 0, 1 ...     while a < n: ...         print(a, end=' ') ...         a, b = b, a+b ...     print() ... >>> # Now call the function we just defined: ... fib(2000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597  >>> fib <function fib at 10042ed0> >>> f = fib >>> f(100) 0 1 1 2 3 5 8 13 21 34 55 89  >>> fib(0) >>> print(fib(0)) None  >>> def fib2(n):  # return Fibonacci series up to n ...     \"\"\"Return a list containing the Fibonacci series up to n.\"\"\" ...     result = [] ...     a, b = 0, 1 ...     while a < n: ...         result.append(a)    # see below ...         a, b = b, a+b ...     return result ... >>> f100 = fib2(100)    # call it >>> f100                # write the result [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools\u00b6", "M_Desc": "Besides the while statement just introduced, Python knows the usual control flow statements known from other languages, with some twists.", "M_Code": "", "L2_Title": "4.7. More on Defining Functions\u00b6", "L2_Desc": "It is also possible to define functions with a variable number of arguments. There are three forms, which can be combined.", "L2_Code": "", "L3_Title": "4.7.1. Default Argument Values\u00b6", "L3_Desc": "The most useful form is to specify a default value for one or more arguments. This creates a function that can be called with fewer arguments than it is defined to allow.  For example:This function can be called in several ways:This example also introduces the in keyword. This tests whether or not a sequence contains a certain value.The default values are evaluated at the point of function definition in the defining scope, so thatwill print 5.Important warning:  The default value is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes.  For example, the following function accumulates the arguments passed to it on subsequent calls:This will printIf you don\u2019t want the default to be shared between subsequent calls, you can write the function like this instead:", "L3_Code": "def ask_ok(prompt, retries=4, reminder='Please try again!'):     while True:         ok = input(prompt)         if ok in ('y', 'ye', 'yes'):             return True         if ok in ('n', 'no', 'nop', 'nope'):             return False         retries = retries - 1         if retries < 0:             raise ValueError('invalid user response')         print(reminder)  i = 5  def f(arg=i):     print(arg)  i = 6 f()  def f(a, L=[]):     L.append(a)     return L  print(f(1)) print(f(2)) print(f(3))  [1] [1, 2] [1, 2, 3]  def f(a, L=None):     if L is None:         L = []     L.append(a)     return L  "},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools\u00b6", "M_Desc": "Besides the while statement just introduced, Python knows the usual control flow statements known from other languages, with some twists.", "M_Code": "", "L2_Title": "4.7. More on Defining Functions\u00b6", "L2_Desc": "It is also possible to define functions with a variable number of arguments. There are three forms, which can be combined.", "L2_Code": "", "L3_Title": "4.7.2. Keyword Arguments\u00b6", "L3_Desc": "Functions can also be called using keyword arguments of the form kwarg=value.  For instance, the following function:accepts one required argument (voltage) and three optional arguments (state, action, and type).  This function can be called in any of the following ways:but all the following calls would be invalid:In a function call, keyword arguments must follow positional arguments. All the keyword arguments passed must match one of the arguments accepted by the function (e.g. actor is not a valid argument for the parrot function), and their order is not important.  This also includes non-optional arguments (e.g. parrot(voltage=1000) is valid too). No argument may receive a value more than once. Here\u2019s an example that fails due to this restriction:When a final formal parameter of the form **name is present, it receives a dictionary (see Mapping Types \u2014 dict) containing all keyword arguments except for those corresponding to a formal parameter.  This may be combined with a formal parameter of the form *name (described in the next subsection) which receives a tuple containing the positional arguments beyond the formal parameter list.  (*name must occur before **name.) For example, if we define a function like this:It could be called like this:and of course it would print:Note that the order in which the keyword arguments are printed is guaranteed to match the order in which they were provided in the function call.", "L3_Code": "def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):     print(\"-- This parrot wouldn't\", action, end=' ')     print(\"if you put\", voltage, \"volts through it.\")     print(\"-- Lovely plumage, the\", type)     print(\"-- It's\", state, \"!\")  parrot(1000)                                          # 1 positional argument parrot(voltage=1000)                                  # 1 keyword argument parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments parrot('a million', 'bereft of life', 'jump')         # 3 positional arguments parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword  parrot()                     # required argument missing parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword argument parrot(110, voltage=220)     # duplicate value for the same argument parrot(actor='John Cleese')  # unknown keyword argument  >>> def function(a): ...     pass ... >>> function(0, a=0) Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> TypeError: function() got multiple values for keyword argument 'a'  def cheeseshop(kind, *arguments, **keywords):     print(\"-- Do you have any\", kind, \"?\")     print(\"-- I'm sorry, we're all out of\", kind)     for arg in arguments:         print(arg)     print(\"-\" * 40)     for kw in keywords:         print(kw, \":\", keywords[kw])  cheeseshop(\"Limburger\", \"It's very runny, sir.\",            \"It's really very, VERY runny, sir.\",            shopkeeper=\"Michael Palin\",            client=\"John Cleese\",            sketch=\"Cheese Shop Sketch\")  "},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools\u00b6", "M_Desc": "Besides the while statement just introduced, Python knows the usual control flow statements known from other languages, with some twists.", "M_Code": "", "L2_Title": "4.7. More on Defining Functions\u00b6", "L2_Desc": "It is also possible to define functions with a variable number of arguments. There are three forms, which can be combined.", "L2_Code": "", "L3_Title": "4.7.3. Arbitrary Argument Lists\u00b6", "L3_Desc": "Finally, the least frequently used option is to specify that a function can be called with an arbitrary number of arguments.  These arguments will be wrapped up in a tuple (see Tuples and Sequences).  Before the variable number of arguments, zero or more normal arguments may occur.Normally, these variadic arguments will be last in the list of formal parameters, because they scoop up all remaining input arguments that are passed to the function. Any formal parameters which occur after the *args parameter are \u2018keyword-only\u2019 arguments, meaning that they can only be used as keywords rather than positional arguments.", "L3_Code": "def write_multiple_items(file, separator, *args):     file.write(separator.join(args))  >>> def concat(*args, sep=\"/\"): ...     return sep.join(args) ... >>> concat(\"earth\", \"mars\", \"venus\") 'earth/mars/venus' >>> concat(\"earth\", \"mars\", \"venus\", sep=\".\") 'earth.mars.venus'  "},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools\u00b6", "M_Desc": "Besides the while statement just introduced, Python knows the usual control flow statements known from other languages, with some twists.", "M_Code": "", "L2_Title": "4.7. More on Defining Functions\u00b6", "L2_Desc": "It is also possible to define functions with a variable number of arguments. There are three forms, which can be combined.", "L2_Code": "", "L3_Title": "4.7.4. Unpacking Argument Lists\u00b6", "L3_Desc": "The reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments.  For instance, the built-in range() function expects separate start and stop arguments.  If they are not available separately, write the function call with the  *-operator to unpack the arguments out of a list or tuple:In the same fashion, dictionaries can deliver keyword arguments with the **-operator:", "L3_Code": ">>> list(range(3, 6))            # normal call with separate arguments [3, 4, 5] >>> args = [3, 6] >>> list(range(*args))            # call with arguments unpacked from a list [3, 4, 5]  >>> def parrot(voltage, state='a stiff', action='voom'): ...     print(\"-- This parrot wouldn't\", action, end=' ') ...     print(\"if you put\", voltage, \"volts through it.\", end=' ') ...     print(\"E's\", state, \"!\") ... >>> d = {\"voltage\": \"four million\", \"state\": \"bleedin' demised\", \"action\": \"VOOM\"} >>> parrot(**d) -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !  "},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools\u00b6", "M_Desc": "Besides the while statement just introduced, Python knows the usual control flow statements known from other languages, with some twists.", "M_Code": "", "L2_Title": "4.7. More on Defining Functions\u00b6", "L2_Desc": "It is also possible to define functions with a variable number of arguments. There are three forms, which can be combined.", "L2_Code": "", "L3_Title": "4.7.5. Lambda Expressions\u00b6", "L3_Desc": "Small anonymous functions can be created with the lambda keyword. This function returns the sum of its two arguments: lambda a, b: a+b. Lambda functions can be used wherever function objects are required.  They are syntactically restricted to a single expression.  Semantically, they are just syntactic sugar for a normal function definition.  Like nested function definitions, lambda functions can reference variables from the containing scope:The above example uses a lambda expression to return a function.  Another use is to pass a small function as an argument:", "L3_Code": ">>> def make_incrementor(n): ...     return lambda x: x + n ... >>> f = make_incrementor(42) >>> f(0) 42 >>> f(1) 43  >>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')] >>> pairs.sort(key=lambda pair: pair[1]) >>> pairs [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]  "},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools\u00b6", "M_Desc": "Besides the while statement just introduced, Python knows the usual control flow statements known from other languages, with some twists.", "M_Code": "", "L2_Title": "4.7. More on Defining Functions\u00b6", "L2_Desc": "It is also possible to define functions with a variable number of arguments. There are three forms, which can be combined.", "L2_Code": "", "L3_Title": "4.7.6. Documentation Strings\u00b6", "L3_Desc": "Here are some conventions about the content and formatting of documentation strings.The first line should always be a short, concise summary of the object\u2019s purpose.  For brevity, it should not explicitly state the object\u2019s name or type, since these are available by other means (except if the name happens to be a verb describing a function\u2019s operation).  This line should begin with a capital letter and end with a period.If there are more lines in the documentation string, the second line should be blank, visually separating the summary from the rest of the description.  The following lines should be one or more paragraphs describing the object\u2019s calling conventions, its side effects, etc.The Python parser does not strip indentation from multi-line string literals in Python, so tools that process documentation have to strip indentation if desired.  This is done using the following convention. The first non-blank line after the first line of the string determines the amount of indentation for the entire documentation string.  (We can\u2019t use the first line since it is generally adjacent to the string\u2019s opening quotes so its indentation is not apparent in the string literal.)  Whitespace \u201cequivalent\u201d to this indentation is then stripped from the start of all lines of the string.  Lines that are indented less should not occur, but if they occur all their leading whitespace should be stripped.  Equivalence of whitespace should be tested after expansion of tabs (to 8 spaces, normally).Here is an example of a multi-line docstring:", "L3_Code": ">>> def my_function(): ...     \"\"\"Do nothing, but document it. ... ...     No, really, it doesn't do anything. ...     \"\"\" ...     pass ... >>> print(my_function.__doc__) Do nothing, but document it.      No, really, it doesn't do anything.  "},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools\u00b6", "M_Desc": "Besides the while statement just introduced, Python knows the usual control flow statements known from other languages, with some twists.", "M_Code": "", "L2_Title": "4.7. More on Defining Functions\u00b6", "L2_Desc": "It is also possible to define functions with a variable number of arguments. There are three forms, which can be combined.", "L2_Code": "", "L3_Title": "4.7.7. Function Annotations\u00b6", "L3_Desc": "Function annotations are completely optional metadata information about the types used by user-defined functions (see PEP 3107 and PEP 484 for more information).Annotations are stored in the __annotations__ attribute of the function as a dictionary and have no effect on any other part of the function.  Parameter annotations are defined by a colon after the parameter name, followed by an expression evaluating to the value of the annotation.  Return annotations are defined by a literal ->, followed by an expression, between the parameter list and the colon denoting the end of the def statement.  The following example has a positional argument, a keyword argument, and the return value annotated:", "L3_Code": ">>> def f(ham: str, eggs: str = 'eggs') -> str: ...     print(\"Annotations:\", f.__annotations__) ...     print(\"Arguments:\", ham, eggs) ...     return ham + ' and ' + eggs ... >>> f('spam') Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>} Arguments: spam eggs 'spam and eggs'  "},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools\u00b6", "M_Desc": "Besides the while statement just introduced, Python knows the usual control flow statements known from other languages, with some twists.", "M_Code": "", "L2_Title": "4.8. Intermezzo: Coding Style\u00b6", "L2_Desc": "Now that you are about to write longer, more complex pieces of Python, it is a good time to talk about coding style.  Most languages can be written (or more concise, formatted) in different styles; some are more readable than others. Making it easy for others to read your code is always a good idea, and adopting a nice coding style helps tremendously for that.For Python, PEP 8 has emerged as the style guide that most projects adhere to; it promotes a very readable and eye-pleasing coding style.  Every Python developer should read it at some point; here are the most important points extracted for you:Footnotes", "L2_Code": "", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes\u00b6", "M_Desc": "Classes provide a means of bundling data and functionality together.  Creating a new class creates a new type of object, allowing new instances of that type to be made.  Each class instance can have attributes attached to it for maintaining its state.  Class instances can also have methods (defined by its class) for modifying its state.Compared with other programming languages, Python\u2019s class mechanism adds classes with a minimum of new syntax and semantics.  It is a mixture of the class mechanisms found in C++ and Modula-3.  Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.  Objects can contain arbitrary amounts and kinds of data.  As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual.  As in Modula-3, there are no shorthands for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.  As in Smalltalk, classes themselves are objects.  This provides semantics for importing and renaming.  Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.  Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)", "M_Code": "", "L2_Title": "9.1. A Word About Names and Objects\u00b6", "L2_Desc": "Objects have individuality, and multiple names (in multiple scopes) can be bound to the same object.  This is known as aliasing in other languages.  This is usually not appreciated on a first glance at Python, and can be safely ignored when dealing with immutable basic types (numbers, strings, tuples).  However, aliasing has a possibly surprising effect on the semantics of Python code involving mutable objects such as lists, dictionaries, and most other types. This is usually used to the benefit of the program, since aliases behave like pointers in some respects.  For example, passing an object is cheap since only a pointer is passed by the implementation; and if a function modifies an object passed as an argument, the caller will see the change \u2014 this eliminates the need for two different argument passing mechanisms as in Pascal.", "L2_Code": "", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes\u00b6", "M_Desc": "Classes provide a means of bundling data and functionality together.  Creating a new class creates a new type of object, allowing new instances of that type to be made.  Each class instance can have attributes attached to it for maintaining its state.  Class instances can also have methods (defined by its class) for modifying its state.Compared with other programming languages, Python\u2019s class mechanism adds classes with a minimum of new syntax and semantics.  It is a mixture of the class mechanisms found in C++ and Modula-3.  Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.  Objects can contain arbitrary amounts and kinds of data.  As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual.  As in Modula-3, there are no shorthands for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.  As in Smalltalk, classes themselves are objects.  This provides semantics for importing and renaming.  Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.  Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)", "M_Code": "", "L2_Title": "9.2. Python Scopes and Namespaces\u00b6", "L2_Desc": "Before introducing classes, I first have to tell you something about Python\u2019s scope rules.  Class definitions play some neat tricks with namespaces, and you need to know how scopes and namespaces work to fully understand what\u2019s going on. Incidentally, knowledge about this subject is useful for any advanced Python programmer.Let\u2019s begin with some definitions.A namespace is a mapping from names to objects.  Most namespaces are currently implemented as Python dictionaries, but that\u2019s normally not noticeable in any way (except for performance), and it may change in the future.  Examples of namespaces are: the set of built-in names (containing functions such as abs(), and built-in exception names); the global names in a module; and the local names in a function invocation.  In a sense the set of attributes of an object also form a namespace.  The important thing to know about namespaces is that there is absolutely no relation between names in different namespaces; for instance, two different modules may both define a function maximize without confusion \u2014 users of the modules must prefix it with the module name.By the way, I use the word attribute for any name following a dot \u2014 for example, in the expression z.real, real is an attribute of the object z.  Strictly speaking, references to names in modules are attribute references: in the expression modname.funcname, modname is a module object and funcname is an attribute of it.  In this case there happens to be a straightforward mapping between the module\u2019s attributes and the global names defined in the module: they share the same namespace!  [1]Attributes may be read-only or writable.  In the latter case, assignment to attributes is possible.  Module attributes are writable: you can write modname.the_answer = 42.  Writable attributes may also be deleted with the del statement.  For example, del modname.the_answer will remove the attribute the_answer from the object named by modname.Namespaces are created at different moments and have different lifetimes.  The namespace containing the built-in names is created when the Python interpreter starts up, and is never deleted.  The global namespace for a module is created when the module definition is read in; normally, module namespaces also last until the interpreter quits.  The statements executed by the top-level invocation of the interpreter, either read from a script file or interactively, are considered part of a module called __main__, so they have their own global namespace.  (The built-in names actually also live in a module; this is called builtins.)The local namespace for a function is created when the function is called, and deleted when the function returns or raises an exception that is not handled within the function.  (Actually, forgetting would be a better way to describe what actually happens.)  Of course, recursive invocations each have their own local namespace.A scope is a textual region of a Python program where a namespace is directly accessible.  \u201cDirectly accessible\u201d here means that an unqualified reference to a name attempts to find the name in the namespace.Although scopes are determined statically, they are used dynamically. At any time during execution, there are at least three nested scopes whose namespaces are directly accessible:If a name is declared global, then all references and assignments go directly to the middle scope containing the module\u2019s global names.  To rebind variables found outside of the innermost scope, the nonlocal statement can be used; if not declared nonlocal, those variables are read-only (an attempt to write to such a variable will simply create a new local variable in the innermost scope, leaving the identically named outer variable unchanged).Usually, the local scope references the local names of the (textually) current function.  Outside functions, the local scope references the same namespace as the global scope: the module\u2019s namespace. Class definitions place yet another namespace in the local scope.It is important to realize that scopes are determined textually: the global scope of a function defined in a module is that module\u2019s namespace, no matter from where or by what alias the function is called.  On the other hand, the actual search for names is done dynamically, at run time \u2014 however, the language definition is evolving towards static name resolution, at \u201ccompile\u201d time, so don\u2019t rely on dynamic name resolution!  (In fact, local variables are already determined statically.)A special quirk of Python is that \u2013 if no global statement is in effect \u2013 assignments to names always go into the innermost scope.  Assignments do not copy data \u2014 they just bind names to objects.  The same is true for deletions: the statement del x removes the binding of x from the namespace referenced by the local scope.  In fact, all operations that introduce new names use the local scope: in particular, import statements and function definitions bind the module or function name in the local scope.The global statement can be used to indicate that particular variables live in the global scope and should be rebound there; the nonlocal statement indicates that particular variables live in an enclosing scope and should be rebound there.", "L2_Code": "", "L3_Title": "9.2.1. Scopes and Namespaces Example\u00b6", "L3_Desc": "This is an example demonstrating how to reference the different scopes and namespaces, and how global and nonlocal affect variable binding:The output of the example code is:Note how the local assignment (which is default) didn\u2019t change scope_test\u2019s binding of spam.  The nonlocal assignment changed scope_test\u2019s binding of spam, and the global assignment changed the module-level binding.You can also see that there was no previous binding for spam before the global assignment.", "L3_Code": "def scope_test():     def do_local():         spam = \"local spam\"      def do_nonlocal():         nonlocal spam         spam = \"nonlocal spam\"      def do_global():         global spam         spam = \"global spam\"      spam = \"test spam\"     do_local()     print(\"After local assignment:\", spam)     do_nonlocal()     print(\"After nonlocal assignment:\", spam)     do_global()     print(\"After global assignment:\", spam)  scope_test() print(\"In global scope:\", spam)  "},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes\u00b6", "M_Desc": "Classes provide a means of bundling data and functionality together.  Creating a new class creates a new type of object, allowing new instances of that type to be made.  Each class instance can have attributes attached to it for maintaining its state.  Class instances can also have methods (defined by its class) for modifying its state.Compared with other programming languages, Python\u2019s class mechanism adds classes with a minimum of new syntax and semantics.  It is a mixture of the class mechanisms found in C++ and Modula-3.  Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.  Objects can contain arbitrary amounts and kinds of data.  As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual.  As in Modula-3, there are no shorthands for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.  As in Smalltalk, classes themselves are objects.  This provides semantics for importing and renaming.  Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.  Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)", "M_Code": "", "L2_Title": "9.3. A First Look at Classes\u00b6", "L2_Desc": "Classes introduce a little bit of new syntax, three new object types, and some new semantics.", "L2_Code": "", "L3_Title": "9.3.1. Class Definition Syntax\u00b6", "L3_Desc": "The simplest form of class definition looks like this:Class definitions, like function definitions (def statements) must be executed before they have any effect.  (You could conceivably place a class definition in a branch of an if statement, or inside a function.)In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful \u2014 we\u2019ll come back to this later.  The function definitions inside a class normally have a peculiar form of argument list, dictated by the calling conventions for methods \u2014 again, this is explained later.When a class definition is entered, a new namespace is created, and used as the local scope \u2014 thus, all assignments to local variables go into this new namespace.  In particular, function definitions bind the name of the new function here.When a class definition is left normally (via the end), a class object is created.  This is basically a wrapper around the contents of the namespace created by the class definition; we\u2019ll learn more about class objects in the next section.  The original local scope (the one in effect just before the class definition was entered) is reinstated, and the class object is bound here to the class name given in the class definition header (ClassName in the example).", "L3_Code": "class ClassName:     <statement-1>     .     .     .     <statement-N>  "},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes\u00b6", "M_Desc": "Classes provide a means of bundling data and functionality together.  Creating a new class creates a new type of object, allowing new instances of that type to be made.  Each class instance can have attributes attached to it for maintaining its state.  Class instances can also have methods (defined by its class) for modifying its state.Compared with other programming languages, Python\u2019s class mechanism adds classes with a minimum of new syntax and semantics.  It is a mixture of the class mechanisms found in C++ and Modula-3.  Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.  Objects can contain arbitrary amounts and kinds of data.  As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual.  As in Modula-3, there are no shorthands for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.  As in Smalltalk, classes themselves are objects.  This provides semantics for importing and renaming.  Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.  Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)", "M_Code": "", "L2_Title": "9.3. A First Look at Classes\u00b6", "L2_Desc": "Classes introduce a little bit of new syntax, three new object types, and some new semantics.", "L2_Code": "", "L3_Title": "9.3.2. Class Objects\u00b6", "L3_Desc": "Class objects support two kinds of operations: attribute references and instantiation.Attribute references use the standard syntax used for all attribute references in Python: obj.name.  Valid attribute names are all the names that were in the class\u2019s namespace when the class object was created.  So, if the class definition looked like this:then MyClass.i and MyClass.f are valid attribute references, returning an integer and a function object, respectively. Class attributes can also be assigned to, so you can change the value of MyClass.i by assignment. __doc__ is also a valid attribute, returning the docstring belonging to the class: \"A simple example class\".Class instantiation uses function notation.  Just pretend that the class object is a parameterless function that returns a new instance of the class. For example (assuming the above class):creates a new instance of the class and assigns this object to the local variable x.The instantiation operation (\u201ccalling\u201d a class object) creates an empty object. Many classes like to create objects with instances customized to a specific initial state. Therefore a class may define a special method named __init__(), like this:When a class defines an __init__() method, class instantiation automatically invokes __init__() for the newly-created class instance.  So in this example, a new, initialized instance can be obtained by:Of course, the __init__() method may have arguments for greater flexibility.  In that case, arguments given to the class instantiation operator are passed on to __init__().  For example,", "L3_Code": "class MyClass:     \"\"\"A simple example class\"\"\"     i = 12345      def f(self):         return 'hello world'  x = MyClass()  def __init__(self):     self.data = []  x = MyClass()  >>> class Complex: ...     def __init__(self, realpart, imagpart): ...         self.r = realpart ...         self.i = imagpart ... >>> x = Complex(3.0, -4.5) >>> x.r, x.i (3.0, -4.5)  "},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes\u00b6", "M_Desc": "Classes provide a means of bundling data and functionality together.  Creating a new class creates a new type of object, allowing new instances of that type to be made.  Each class instance can have attributes attached to it for maintaining its state.  Class instances can also have methods (defined by its class) for modifying its state.Compared with other programming languages, Python\u2019s class mechanism adds classes with a minimum of new syntax and semantics.  It is a mixture of the class mechanisms found in C++ and Modula-3.  Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.  Objects can contain arbitrary amounts and kinds of data.  As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual.  As in Modula-3, there are no shorthands for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.  As in Smalltalk, classes themselves are objects.  This provides semantics for importing and renaming.  Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.  Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)", "M_Code": "", "L2_Title": "9.3. A First Look at Classes\u00b6", "L2_Desc": "Classes introduce a little bit of new syntax, three new object types, and some new semantics.", "L2_Code": "", "L3_Title": "9.3.3. Instance Objects\u00b6", "L3_Desc": "Now what can we do with instance objects?  The only operations understood by instance objects are attribute references.  There are two kinds of valid attribute names, data attributes and methods.data attributes correspond to \u201cinstance variables\u201d in Smalltalk, and to \u201cdata members\u201d in C++.  Data attributes need not be declared; like local variables, they spring into existence when they are first assigned to.  For example, if x is the instance of MyClass created above, the following piece of code will print the value 16, without leaving a trace:The other kind of instance attribute reference is a method. A method is a function that \u201cbelongs to\u201d an object.  (In Python, the term method is not unique to class instances: other object types can have methods as well.  For example, list objects have methods called append, insert, remove, sort, and so on. However, in the following discussion, we\u2019ll use the term method exclusively to mean methods of class instance objects, unless explicitly stated otherwise.)Valid method names of an instance object depend on its class.  By definition, all attributes of a class that are function  objects define corresponding methods of its instances.  So in our example, x.f is a valid method reference, since MyClass.f is a function, but x.i is not, since MyClass.i is not.  But x.f is not the same thing as MyClass.f \u2014 it is a method object, not a function object.", "L3_Code": "x.counter = 1 while x.counter < 10:     x.counter = x.counter * 2 print(x.counter) del x.counter  "},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes\u00b6", "M_Desc": "Classes provide a means of bundling data and functionality together.  Creating a new class creates a new type of object, allowing new instances of that type to be made.  Each class instance can have attributes attached to it for maintaining its state.  Class instances can also have methods (defined by its class) for modifying its state.Compared with other programming languages, Python\u2019s class mechanism adds classes with a minimum of new syntax and semantics.  It is a mixture of the class mechanisms found in C++ and Modula-3.  Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.  Objects can contain arbitrary amounts and kinds of data.  As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual.  As in Modula-3, there are no shorthands for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.  As in Smalltalk, classes themselves are objects.  This provides semantics for importing and renaming.  Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.  Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)", "M_Code": "", "L2_Title": "9.3. A First Look at Classes\u00b6", "L2_Desc": "Classes introduce a little bit of new syntax, three new object types, and some new semantics.", "L2_Code": "", "L3_Title": "9.3.4. Method Objects\u00b6", "L3_Desc": "Usually, a method is called right after it is bound:In the MyClass example, this will return the string 'hello world'. However, it is not necessary to call a method right away: x.f is a method object, and can be stored away and called at a later time.  For example:will continue to print hello world until the end of time.What exactly happens when a method is called?  You may have noticed that x.f() was called without an argument above, even though the function definition for f() specified an argument.  What happened to the argument? Surely Python raises an exception when a function that requires an argument is called without any \u2014 even if the argument isn\u2019t actually used\u2026Actually, you may have guessed the answer: the special thing about methods is that the instance object is passed as the first argument of the function.  In our example, the call x.f() is exactly equivalent to MyClass.f(x).  In general, calling a method with a list of n arguments is equivalent to calling the corresponding function with an argument list that is created by inserting the method\u2019s instance object before the first argument.If you still don\u2019t understand how methods work, a look at the implementation can perhaps clarify matters.  When a non-data attribute of an instance is referenced, the instance\u2019s class is searched.  If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object.  When the method object is called with an argument list, a new argument list is constructed from the instance object and the argument list, and the function object is called with this new argument list.", "L3_Code": "x.f()  xf = x.f while True:     print(xf())  "},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes\u00b6", "M_Desc": "Classes provide a means of bundling data and functionality together.  Creating a new class creates a new type of object, allowing new instances of that type to be made.  Each class instance can have attributes attached to it for maintaining its state.  Class instances can also have methods (defined by its class) for modifying its state.Compared with other programming languages, Python\u2019s class mechanism adds classes with a minimum of new syntax and semantics.  It is a mixture of the class mechanisms found in C++ and Modula-3.  Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.  Objects can contain arbitrary amounts and kinds of data.  As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual.  As in Modula-3, there are no shorthands for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.  As in Smalltalk, classes themselves are objects.  This provides semantics for importing and renaming.  Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.  Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)", "M_Code": "", "L2_Title": "9.3. A First Look at Classes\u00b6", "L2_Desc": "Classes introduce a little bit of new syntax, three new object types, and some new semantics.", "L2_Code": "", "L3_Title": "9.3.5. Class and Instance Variables\u00b6", "L3_Desc": "Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:As discussed in A Word About Names and Objects, shared data can have possibly surprising effects with involving mutable objects such as lists and dictionaries. For example, the tricks list in the following code should not be used as a class variable because just a single list would be shared by all Dog instances:Correct design of the class should use an instance variable instead:", "L3_Code": "class Dog:      kind = 'canine'         # class variable shared by all instances      def __init__(self, name):         self.name = name    # instance variable unique to each instance  >>> d = Dog('Fido') >>> e = Dog('Buddy') >>> d.kind                  # shared by all dogs 'canine' >>> e.kind                  # shared by all dogs 'canine' >>> d.name                  # unique to d 'Fido' >>> e.name                  # unique to e 'Buddy'  class Dog:      tricks = []             # mistaken use of a class variable      def __init__(self, name):         self.name = name      def add_trick(self, trick):         self.tricks.append(trick)  >>> d = Dog('Fido') >>> e = Dog('Buddy') >>> d.add_trick('roll over') >>> e.add_trick('play dead') >>> d.tricks                # unexpectedly shared by all dogs ['roll over', 'play dead']  class Dog:      def __init__(self, name):         self.name = name         self.tricks = []    # creates a new empty list for each dog      def add_trick(self, trick):         self.tricks.append(trick)  >>> d = Dog('Fido') >>> e = Dog('Buddy') >>> d.add_trick('roll over') >>> e.add_trick('play dead') >>> d.tricks ['roll over'] >>> e.tricks ['play dead']  "},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes\u00b6", "M_Desc": "Classes provide a means of bundling data and functionality together.  Creating a new class creates a new type of object, allowing new instances of that type to be made.  Each class instance can have attributes attached to it for maintaining its state.  Class instances can also have methods (defined by its class) for modifying its state.Compared with other programming languages, Python\u2019s class mechanism adds classes with a minimum of new syntax and semantics.  It is a mixture of the class mechanisms found in C++ and Modula-3.  Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.  Objects can contain arbitrary amounts and kinds of data.  As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual.  As in Modula-3, there are no shorthands for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.  As in Smalltalk, classes themselves are objects.  This provides semantics for importing and renaming.  Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.  Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)", "M_Code": "", "L2_Title": "9.4. Random Remarks\u00b6", "L2_Desc": "Data attributes override method attributes with the same name; to avoid accidental name conflicts, which may cause hard-to-find bugs in large programs, it is wise to use some kind of convention that minimizes the chance of conflicts.  Possible conventions include capitalizing method names, prefixing data attribute names with a small unique string (perhaps just an underscore), or using verbs for methods and nouns for data attributes.Data attributes may be referenced by methods as well as by ordinary users (\u201cclients\u201d) of an object.  In other words, classes are not usable to implement pure abstract data types.  In fact, nothing in Python makes it possible to enforce data hiding \u2014 it is all based upon convention.  (On the other hand, the Python implementation, written in C, can completely hide implementation details and control access to an object if necessary; this can be used by extensions to Python written in C.)Clients should use data attributes with care \u2014 clients may mess up invariants maintained by the methods by stamping on their data attributes.  Note that clients may add data attributes of their own to an instance object without affecting the validity of the methods, as long as name conflicts are avoided \u2014 again, a naming convention can save a lot of headaches here.There is no shorthand for referencing data attributes (or other methods!) from within methods.  I find that this actually increases the readability of methods: there is no chance of confusing local variables and instance variables when glancing through a method.Often, the first argument of a method is called self.  This is nothing more than a convention: the name self has absolutely no special meaning to Python.  Note, however, that by not following the convention your code may be less readable to other Python programmers, and it is also conceivable that a class browser program might be written that relies upon such a convention.Any function object that is a class attribute defines a method for instances of that class.  It is not necessary that the function definition is textually enclosed in the class definition: assigning a function object to a local variable in the class is also ok.  For example:Now f, g and h are all attributes of class C that refer to function objects, and consequently they are all methods of instances of C \u2014 h being exactly equivalent to g.  Note that this practice usually only serves to confuse the reader of a program.Methods may call other methods by using method attributes of the self argument:Methods may reference global names in the same way as ordinary functions.  The global scope associated with a method is the module containing its definition.  (A class is never used as a global scope.)  While one rarely encounters a good reason for using global data in a method, there are many legitimate uses of the global scope: for one thing, functions and modules imported into the global scope can be used by methods, as well as functions and classes defined in it.  Usually, the class containing the method is itself defined in this global scope, and in the next section we\u2019ll find some good reasons why a method would want to reference its own class.Each value is an object, and therefore has a class (also called its type). It is stored as object.__class__.", "L2_Code": "# Function defined outside the class def f1(self, x, y):     return min(x, x+y)  class C:     f = f1      def g(self):         return 'hello world'      h = g  class Bag:     def __init__(self):         self.data = []      def add(self, x):         self.data.append(x)      def addtwice(self, x):         self.add(x)         self.add(x)  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes\u00b6", "M_Desc": "Classes provide a means of bundling data and functionality together.  Creating a new class creates a new type of object, allowing new instances of that type to be made.  Each class instance can have attributes attached to it for maintaining its state.  Class instances can also have methods (defined by its class) for modifying its state.Compared with other programming languages, Python\u2019s class mechanism adds classes with a minimum of new syntax and semantics.  It is a mixture of the class mechanisms found in C++ and Modula-3.  Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.  Objects can contain arbitrary amounts and kinds of data.  As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual.  As in Modula-3, there are no shorthands for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.  As in Smalltalk, classes themselves are objects.  This provides semantics for importing and renaming.  Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.  Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)", "M_Code": "", "L2_Title": "9.5. Inheritance\u00b6", "L2_Desc": "Of course, a language feature would not be worthy of the name \u201cclass\u201d without supporting inheritance.  The syntax for a derived class definition looks like this:The name BaseClassName must be defined in a scope containing the derived class definition.  In place of a base class name, other arbitrary expressions are also allowed.  This can be useful, for example, when the base class is defined in another module:Execution of a derived class definition proceeds the same as for a base class. When the class object is constructed, the base class is remembered.  This is used for resolving attribute references: if a requested attribute is not found in the class, the search proceeds to look in the base class.  This rule is applied recursively if the base class itself is derived from some other class.There\u2019s nothing special about instantiation of derived classes: DerivedClassName() creates a new instance of the class.  Method references are resolved as follows: the corresponding class attribute is searched, descending down the chain of base classes if necessary, and the method reference is valid if this yields a function object.Derived classes may override methods of their base classes.  Because methods have no special privileges when calling other methods of the same object, a method of a base class that calls another method defined in the same base class may end up calling a method of a derived class that overrides it.  (For C++ programmers: all methods in Python are effectively virtual.)An overriding method in a derived class may in fact want to extend rather than simply replace the base class method of the same name. There is a simple way to call the base class method directly: just call BaseClassName.methodname(self, arguments).  This is occasionally useful to clients as well.  (Note that this only works if the base class is accessible as BaseClassName in the global scope.)Python has two built-in functions that work with inheritance:", "L2_Code": "class DerivedClassName(BaseClassName):     <statement-1>     .     .     .     <statement-N>  class DerivedClassName(modname.BaseClassName):  ", "L3_Title": "9.5.1. Multiple Inheritance\u00b6", "L3_Desc": "Python supports a form of multiple inheritance as well.  A class definition with multiple base classes looks like this:For most purposes, in the simplest cases, you can think of the search for attributes inherited from a parent class as depth-first, left-to-right, not searching twice in the same class where there is an overlap in the hierarchy. Thus, if an attribute is not found in DerivedClassName, it is searched for in Base1, then (recursively) in the base classes of Base1, and if it was not found there, it was searched for in Base2, and so on.In fact, it is slightly more complex than that; the method resolution order changes dynamically to support cooperative calls to super().  This approach is known in some other multiple-inheritance languages as call-next-method and is more powerful than the super call found in single-inheritance languages.Dynamic ordering is necessary because all cases of multiple inheritance exhibit one or more diamond relationships (where at least one of the parent classes can be accessed through multiple paths from the bottommost class).  For example, all classes inherit from object, so any case of multiple inheritance provides more than one path to reach object.  To keep the base classes from being accessed more than once, the dynamic algorithm linearizes the search order in a way that preserves the left-to-right ordering specified in each class, that calls each parent only once, and that is monotonic (meaning that a class can be subclassed without affecting the precedence order of its parents). Taken together, these properties make it possible to design reliable and extensible classes with multiple inheritance.  For more detail, see https://www.python.org/download/releases/2.3/mro/.", "L3_Code": "class DerivedClassName(Base1, Base2, Base3):     <statement-1>     .     .     .     <statement-N>  "},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "10.1. Operating System Interface\u00b6", "L2_Desc": "The os module provides dozens of functions for interacting with the operating system:Be sure to use the import os style instead of from os import *.  This will keep os.open() from shadowing the built-in open() function which operates much differently.The built-in dir() and help() functions are useful as interactive aids for working with large modules like os:For daily file and directory management tasks, the shutil module provides a higher level interface that is easier to use:", "L2_Code": ">>> import os >>> os.getcwd()      # Return the current working directory 'C:\\\\Python37' >>> os.chdir('/server/accesslogs')   # Change current working directory >>> os.system('mkdir today')   # Run the command mkdir in the system shell 0  >>> import os >>> dir(os) <returns a list of all module functions> >>> help(os) <returns an extensive manual page created from the module's docstrings>  >>> import shutil >>> shutil.copyfile('data.db', 'archive.db') 'archive.db' >>> shutil.move('/build/executables', 'installdir') 'installdir'  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "10.2. File Wildcards\u00b6", "L2_Desc": "The glob module provides a function for making file lists from directory wildcard searches:", "L2_Code": ">>> import glob >>> glob.glob('*.py') ['primes.py', 'random.py', 'quote.py']  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "10.3. Command Line Arguments\u00b6", "L2_Desc": "Common utility scripts often need to process command line arguments. These arguments are stored in the sys module\u2019s argv attribute as a list.  For instance the following output results from running python demo.py one two three at the command line:The getopt module processes sys.argv using the conventions of the Unix getopt() function.  More powerful and flexible command line processing is provided by the argparse module.", "L2_Code": ">>> import sys >>> print(sys.argv) ['demo.py', 'one', 'two', 'three']  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "10.4. Error Output Redirection and Program Termination\u00b6", "L2_Desc": "The sys module also has attributes for stdin, stdout, and stderr. The latter is useful for emitting warnings and error messages to make them visible even when stdout has been redirected:The most direct way to terminate a script is to use sys.exit().", "L2_Code": ">>> sys.stderr.write('Warning, log file not found starting a new one\\n') Warning, log file not found starting a new one  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "10.5. String Pattern Matching\u00b6", "L2_Desc": "The re module provides regular expression tools for advanced string processing. For complex matching and manipulation, regular expressions offer succinct, optimized solutions:When only simple capabilities are needed, string methods are preferred because they are easier to read and debug:", "L2_Code": ">>> import re >>> re.findall(r'\\bf[a-z]*', 'which foot or hand fell fastest') ['foot', 'fell', 'fastest'] >>> re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'cat in the the hat') 'cat in the hat'  >>> 'tea for too'.replace('too', 'two') 'tea for two'  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "10.6. Mathematics\u00b6", "L2_Desc": "The math module gives access to the underlying C library functions for floating point math:The random module provides tools for making random selections:The statistics module calculates basic statistical properties (the mean, median, variance, etc.) of numeric data:The SciPy project <https://scipy.org> has many other modules for numerical computations.", "L2_Code": ">>> import math >>> math.cos(math.pi / 4) 0.70710678118654757 >>> math.log(1024, 2) 10.0  >>> import random >>> random.choice(['apple', 'pear', 'banana']) 'apple' >>> random.sample(range(100), 10)   # sampling without replacement [30, 83, 16, 4, 8, 81, 41, 50, 18, 33] >>> random.random()    # random float 0.17970987693706186 >>> random.randrange(6)    # random integer chosen from range(6) 4  >>> import statistics >>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5] >>> statistics.mean(data) 1.6071428571428572 >>> statistics.median(data) 1.25 >>> statistics.variance(data) 1.3720238095238095  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "10.7. Internet Access\u00b6", "L2_Desc": "There are a number of modules for accessing the internet and processing internet protocols. Two of the simplest are urllib.request for retrieving data from URLs and smtplib for sending mail:(Note that the second example needs a mailserver running on localhost.)", "L2_Code": ">>> from urllib.request import urlopen >>> with urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl') as response: ...     for line in response: ...         line = line.decode('utf-8')  # Decoding the binary data to text. ...         if 'EST' in line or 'EDT' in line:  # look for Eastern Time ...             print(line)  <BR>Nov. 25, 09:43:32 PM EST  >>> import smtplib >>> server = smtplib.SMTP('localhost') >>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org', ... \"\"\"To: jcaesar@example.org ... From: soothsayer@example.org ... ... Beware the Ides of March. ... \"\"\") >>> server.quit()  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes\u00b6", "M_Desc": "Classes provide a means of bundling data and functionality together.  Creating a new class creates a new type of object, allowing new instances of that type to be made.  Each class instance can have attributes attached to it for maintaining its state.  Class instances can also have methods (defined by its class) for modifying its state.Compared with other programming languages, Python\u2019s class mechanism adds classes with a minimum of new syntax and semantics.  It is a mixture of the class mechanisms found in C++ and Modula-3.  Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.  Objects can contain arbitrary amounts and kinds of data.  As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual.  As in Modula-3, there are no shorthands for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.  As in Smalltalk, classes themselves are objects.  This provides semantics for importing and renaming.  Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.  Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)", "M_Code": "", "L2_Title": "9.6. Private Variables\u00b6", "L2_Desc": "\u201cPrivate\u201d instance variables that cannot be accessed except from inside an object don\u2019t exist in Python.  However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member).  It should be considered an implementation detail and subject to change without notice.Since there is a valid use-case for class-private members (namely to avoid name clashes of names with names defined by subclasses), there is limited support for such a mechanism, called name mangling.  Any identifier of the form __spam (at least two leading underscores, at most one trailing underscore) is textually replaced with _classname__spam, where classname is the current class name with leading underscore(s) stripped.  This mangling is done without regard to the syntactic position of the identifier, as long as it occurs within the definition of a class.Name mangling is helpful for letting subclasses override methods without breaking intraclass method calls.  For example:Note that the mangling rules are designed mostly to avoid accidents; it still is possible to access or modify a variable that is considered private.  This can even be useful in special circumstances, such as in the debugger.Notice that code passed to exec() or eval() does not consider the classname of the invoking class to be the current class; this is similar to the effect of the global statement, the effect of which is likewise restricted to code that is byte-compiled together.  The same restriction applies to getattr(), setattr() and delattr(), as well as when referencing __dict__ directly.", "L2_Code": "class Mapping:     def __init__(self, iterable):         self.items_list = []         self.__update(iterable)      def update(self, iterable):         for item in iterable:             self.items_list.append(item)      __update = update   # private copy of original update() method  class MappingSubclass(Mapping):      def update(self, keys, values):         # provides new signature for update()         # but does not break __init__()         for item in zip(keys, values):             self.items_list.append(item)  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes\u00b6", "M_Desc": "Classes provide a means of bundling data and functionality together.  Creating a new class creates a new type of object, allowing new instances of that type to be made.  Each class instance can have attributes attached to it for maintaining its state.  Class instances can also have methods (defined by its class) for modifying its state.Compared with other programming languages, Python\u2019s class mechanism adds classes with a minimum of new syntax and semantics.  It is a mixture of the class mechanisms found in C++ and Modula-3.  Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.  Objects can contain arbitrary amounts and kinds of data.  As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual.  As in Modula-3, there are no shorthands for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.  As in Smalltalk, classes themselves are objects.  This provides semantics for importing and renaming.  Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.  Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)", "M_Code": "", "L2_Title": "9.7. Odds and Ends\u00b6", "L2_Desc": "Sometimes it is useful to have a data type similar to the Pascal \u201crecord\u201d or C \u201cstruct\u201d, bundling together a few named data items.  An empty class definition will do nicely:A piece of Python code that expects a particular abstract data type can often be passed a class that emulates the methods of that data type instead.  For instance, if you have a function that formats some data from a file object, you can define a class with methods read() and readline() that get the data from a string buffer instead, and pass it as an argument.Instance method objects have attributes, too: m.__self__ is the instance object with the method m(), and m.__func__ is the function object corresponding to the method.", "L2_Code": "class Employee:     pass  john = Employee()  # Create an empty employee record  # Fill the fields of the record john.name = 'John Doe' john.dept = 'computer lab' john.salary = 1000  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes\u00b6", "M_Desc": "Classes provide a means of bundling data and functionality together.  Creating a new class creates a new type of object, allowing new instances of that type to be made.  Each class instance can have attributes attached to it for maintaining its state.  Class instances can also have methods (defined by its class) for modifying its state.Compared with other programming languages, Python\u2019s class mechanism adds classes with a minimum of new syntax and semantics.  It is a mixture of the class mechanisms found in C++ and Modula-3.  Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.  Objects can contain arbitrary amounts and kinds of data.  As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual.  As in Modula-3, there are no shorthands for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.  As in Smalltalk, classes themselves are objects.  This provides semantics for importing and renaming.  Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.  Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)", "M_Code": "", "L2_Title": "9.8. Iterators\u00b6", "L2_Desc": "By now you have probably noticed that most container objects can be looped over using a for statement:This style of access is clear, concise, and convenient.  The use of iterators pervades and unifies Python.  Behind the scenes, the for statement calls iter() on the container object.  The function returns an iterator object that defines the method __next__() which accesses elements in the container one at a time.  When there are no more elements, __next__() raises a StopIteration exception which tells the for loop to terminate.  You can call the __next__() method using the next() built-in function; this example shows how it all works:Having seen the mechanics behind the iterator protocol, it is easy to add iterator behavior to your classes.  Define an __iter__() method which returns an object with a __next__() method.  If the class defines __next__(), then __iter__() can just return self:", "L2_Code": "for element in [1, 2, 3]:     print(element) for element in (1, 2, 3):     print(element) for key in {'one':1, 'two':2}:     print(key) for char in \"123\":     print(char) for line in open(\"myfile.txt\"):     print(line, end='')  >>> s = 'abc' >>> it = iter(s) >>> it <iterator object at 0x00A1DB50> >>> next(it) 'a' >>> next(it) 'b' >>> next(it) 'c' >>> next(it) Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>     next(it) StopIteration  class Reverse:     \"\"\"Iterator for looping over a sequence backwards.\"\"\"     def __init__(self, data):         self.data = data         self.index = len(data)      def __iter__(self):         return self      def __next__(self):         if self.index == 0:             raise StopIteration         self.index = self.index - 1         return self.data[self.index]  >>> rev = Reverse('spam') >>> iter(rev) <__main__.Reverse object at 0x00A1DB50> >>> for char in rev: ...     print(char) ... m a p s  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes\u00b6", "M_Desc": "Classes provide a means of bundling data and functionality together.  Creating a new class creates a new type of object, allowing new instances of that type to be made.  Each class instance can have attributes attached to it for maintaining its state.  Class instances can also have methods (defined by its class) for modifying its state.Compared with other programming languages, Python\u2019s class mechanism adds classes with a minimum of new syntax and semantics.  It is a mixture of the class mechanisms found in C++ and Modula-3.  Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.  Objects can contain arbitrary amounts and kinds of data.  As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual.  As in Modula-3, there are no shorthands for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.  As in Smalltalk, classes themselves are objects.  This provides semantics for importing and renaming.  Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.  Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)", "M_Code": "", "L2_Title": "9.9. Generators\u00b6", "L2_Desc": "Generators are a simple and powerful tool for creating iterators.  They are written like regular functions but use the yield statement whenever they want to return data.  Each time next() is called on it, the generator resumes where it left off (it remembers all the data values and which statement was last executed).  An example shows that generators can be trivially easy to create:Anything that can be done with generators can also be done with class-based iterators as described in the previous section.  What makes generators so compact is that the __iter__() and __next__() methods are created automatically.Another key feature is that the local variables and execution state are automatically saved between calls.  This made the function easier to write and much more clear than an approach using instance variables like self.index and self.data.In addition to automatic method creation and saving program state, when generators terminate, they automatically raise StopIteration. In combination, these features make it easy to create iterators with no more effort than writing a regular function.", "L2_Code": "def reverse(data):     for index in range(len(data)-1, -1, -1):         yield data[index]  >>> for char in reverse('golf'): ...     print(char) ... f l o g  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes\u00b6", "M_Desc": "Classes provide a means of bundling data and functionality together.  Creating a new class creates a new type of object, allowing new instances of that type to be made.  Each class instance can have attributes attached to it for maintaining its state.  Class instances can also have methods (defined by its class) for modifying its state.Compared with other programming languages, Python\u2019s class mechanism adds classes with a minimum of new syntax and semantics.  It is a mixture of the class mechanisms found in C++ and Modula-3.  Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.  Objects can contain arbitrary amounts and kinds of data.  As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual.  As in Modula-3, there are no shorthands for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.  As in Smalltalk, classes themselves are objects.  This provides semantics for importing and renaming.  Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.  Also, like in C++, most built-in operators with special syntax (arithmetic operators, subscripting etc.) can be redefined for class instances.(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)", "M_Code": "", "L2_Title": "9.10. Generator Expressions\u00b6", "L2_Desc": "Some simple generators can be coded succinctly as expressions using a syntax similar to list comprehensions but with parentheses instead of square brackets. These expressions are designed for situations where the generator is used right away by an enclosing function.  Generator expressions are more compact but less versatile than full generator definitions and tend to be more memory friendly than equivalent list comprehensions.Examples:Footnotes", "L2_Code": ">>> sum(i*i for i in range(10))                 # sum of squares 285  >>> xvec = [10, 20, 30] >>> yvec = [7, 5, 3] >>> sum(x*y for x,y in zip(xvec, yvec))         # dot product 260  >>> from math import pi, sin >>> sine_table = {x: sin(x*pi/180) for x in range(0, 91)}  >>> unique_words = set(word  for line in page  for word in line.split())  >>> valedictorian = max((student.gpa, student.name) for student in graduates)  >>> data = 'golf' >>> list(data[i] for i in range(len(data)-1, -1, -1)) ['f', 'l', 'o', 'g']  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "10.8. Dates and Times\u00b6", "L2_Desc": "The datetime module supplies classes for manipulating dates and times in both simple and complex ways. While date and time arithmetic is supported, the focus of the implementation is on efficient member extraction for output formatting and manipulation.  The module also supports objects that are timezone aware.", "L2_Code": ">>> # dates are easily constructed and formatted >>> from datetime import date >>> now = date.today() >>> now datetime.date(2003, 12, 2) >>> now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\") '12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'  >>> # dates support calendar arithmetic >>> birthday = date(1964, 7, 31) >>> age = now - birthday >>> age.days 14368  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "10.9. Data Compression\u00b6", "L2_Desc": "Common data archiving and compression formats are directly supported by modules including: zlib, gzip, bz2, lzma, zipfile and tarfile.", "L2_Code": ">>> import zlib >>> s = b'witch which has which witches wrist watch' >>> len(s) 41 >>> t = zlib.compress(s) >>> len(t) 37 >>> zlib.decompress(t) b'witch which has which witches wrist watch' >>> zlib.crc32(s) 226805979  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "10.10. Performance Measurement\u00b6", "L2_Desc": "Some Python users develop a deep interest in knowing the relative performance of different approaches to the same problem. Python provides a measurement tool that answers those questions immediately.For example, it may be tempting to use the tuple packing and unpacking feature instead of the traditional approach to swapping arguments. The timeit module quickly demonstrates a modest performance advantage:In contrast to timeit\u2019s fine level of granularity, the profile and pstats modules provide tools for identifying time critical sections in larger blocks of code.", "L2_Code": ">>> from timeit import Timer >>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit() 0.57535828626024577 >>> Timer('a,b = b,a', 'a=1; b=2').timeit() 0.54962537085770791  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "10.11. Quality Control\u00b6", "L2_Desc": "One approach for developing high quality software is to write tests for each function as it is developed and to run those tests frequently during the development process.The doctest module provides a tool for scanning a module and validating tests embedded in a program\u2019s docstrings.  Test construction is as simple as cutting-and-pasting a typical call along with its results into the docstring. This improves the documentation by providing the user with an example and it allows the doctest module to make sure the code remains true to the documentation:The unittest module is not as effortless as the doctest module, but it allows a more comprehensive set of tests to be maintained in a separate file:", "L2_Code": "def average(values):     \"\"\"Computes the arithmetic mean of a list of numbers.      >>> print(average([20, 30, 70]))     40.0     \"\"\"     return sum(values) / len(values)  import doctest doctest.testmod()   # automatically validate the embedded tests  import unittest  class TestStatisticalFunctions(unittest.TestCase):      def test_average(self):         self.assertEqual(average([20, 30, 70]), 40.0)         self.assertEqual(round(average([1, 5, 7]), 1), 4.3)         with self.assertRaises(ZeroDivisionError):             average([])         with self.assertRaises(TypeError):             average(20, 30, 70)  unittest.main()  # Calling from the command line invokes all tests  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library\u00b6", "M_Desc": "", "M_Code": "", "L2_Title": "10.12. Batteries Included\u00b6", "L2_Desc": "Python has a \u201cbatteries included\u201d philosophy.  This is best seen through the sophisticated and robust capabilities of its larger packages. For example:", "L2_Code": "", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/inputoutput.html", "Language": "Python", "M_Title": "7. Input and Output\u00b6", "M_Desc": "There are several ways to present the output of a program; data can be printed in a human-readable form, or written to a file for future use. This chapter will discuss some of the possibilities.", "M_Code": "", "L2_Title": "7.1. Fancier Output Formatting\u00b6", "L2_Desc": "So far we\u2019ve encountered two ways of writing values: expression statements and the print() function.  (A third way is using the write() method of file objects; the standard output file can be referenced as sys.stdout. See the Library Reference for more information on this.)Often you\u2019ll want more control over the formatting of your output than simply printing space-separated values. There are several ways to format output.When you don\u2019t need fancy output but just want a quick display of some variables for debugging purposes, you can convert any value to a string with the repr() or str() functions.The str() function is meant to return representations of values which are fairly human-readable, while repr() is meant to generate representations which can be read by the interpreter (or will force a SyntaxError if there is no equivalent syntax).  For objects which don\u2019t have a particular representation for human consumption, str() will return the same value as repr().  Many values, such as numbers or structures like lists and dictionaries, have the same representation using either function.  Strings, in particular, have two distinct representations.Some examples:The string module contains a Template class that offers yet another way to substitute values into strings, using placeholders like $x and replacing them with values from a dictionary, but offers much less control of the formatting.", "L2_Code": ">>> s = 'Hello, world.' >>> str(s) 'Hello, world.' >>> repr(s) \"'Hello, world.'\" >>> str(1/7) '0.14285714285714285' >>> x = 10 * 3.25 >>> y = 200 * 200 >>> s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...' >>> print(s) The value of x is 32.5, and y is 40000... >>> # The repr() of a string adds string quotes and backslashes: ... hello = 'hello, world\\n' >>> hellos = repr(hello) >>> print(hellos) 'hello, world\\n' >>> # The argument to repr() may be any Python object: ... repr((x, y, ('spam', 'eggs'))) \"(32.5, 40000, ('spam', 'eggs'))\"  ", "L3_Title": "7.1.1. Formatted String Literals\u00b6", "L3_Desc": "Formatted string literals (also called f-strings for short) let you include the value of Python expressions inside a string by prefixing the string with f or F and writing expressions as {expression}.An optional format specifier can follow the expression. This allows greater control over how the value is formatted. The following example rounds pi to three places after the decimal:Passing an integer after the ':' will cause that field to be a minimum number of characters wide.  This is useful for making columns line up.Other modifiers can be used to convert the value before it is formatted. '!a' applies ascii(), '!s' applies str(), and '!r' applies repr():For a reference on these format specifications, see the reference guide for the Format Specification Mini-Language.", "L3_Code": ">>> import math >>> print(f'The value of pi is approximately {math.pi:.3f}.')  >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678} >>> for name, phone in table.items(): ...     print(f'{name:10} ==> {phone:10d}') ... Sjoerd     ==>       4127 Jack       ==>       4098 Dcab       ==>       7678  >>> animals = 'eels' >>> print(f'My hovercraft is full of {animals}.') My hovercraft is full of eels. >>> print(f'My hovercraft is full of {animals !r}.') My hovercraft is full of 'eels'.  "},
{"URL": "https://docs.python.org/3/tutorial/inputoutput.html", "Language": "Python", "M_Title": "7. Input and Output\u00b6", "M_Desc": "There are several ways to present the output of a program; data can be printed in a human-readable form, or written to a file for future use. This chapter will discuss some of the possibilities.", "M_Code": "", "L2_Title": "7.1. Fancier Output Formatting\u00b6", "L2_Desc": "So far we\u2019ve encountered two ways of writing values: expression statements and the print() function.  (A third way is using the write() method of file objects; the standard output file can be referenced as sys.stdout. See the Library Reference for more information on this.)Often you\u2019ll want more control over the formatting of your output than simply printing space-separated values. There are several ways to format output.When you don\u2019t need fancy output but just want a quick display of some variables for debugging purposes, you can convert any value to a string with the repr() or str() functions.The str() function is meant to return representations of values which are fairly human-readable, while repr() is meant to generate representations which can be read by the interpreter (or will force a SyntaxError if there is no equivalent syntax).  For objects which don\u2019t have a particular representation for human consumption, str() will return the same value as repr().  Many values, such as numbers or structures like lists and dictionaries, have the same representation using either function.  Strings, in particular, have two distinct representations.Some examples:The string module contains a Template class that offers yet another way to substitute values into strings, using placeholders like $x and replacing them with values from a dictionary, but offers much less control of the formatting.", "L2_Code": ">>> s = 'Hello, world.' >>> str(s) 'Hello, world.' >>> repr(s) \"'Hello, world.'\" >>> str(1/7) '0.14285714285714285' >>> x = 10 * 3.25 >>> y = 200 * 200 >>> s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...' >>> print(s) The value of x is 32.5, and y is 40000... >>> # The repr() of a string adds string quotes and backslashes: ... hello = 'hello, world\\n' >>> hellos = repr(hello) >>> print(hellos) 'hello, world\\n' >>> # The argument to repr() may be any Python object: ... repr((x, y, ('spam', 'eggs'))) \"(32.5, 40000, ('spam', 'eggs'))\"  ", "L3_Title": "7.1.2. The String format() Method\u00b6", "L3_Desc": "Basic usage of the str.format() method looks like this:The brackets and characters within them (called format fields) are replaced with the objects passed into the str.format() method.  A number in the brackets can be used to refer to the position of the object passed into the str.format() method.If keyword arguments are used in the str.format() method, their values are referred to by using the name of the argument.Positional and keyword arguments can be arbitrarily combined:If you have a really long format string that you don\u2019t want to split up, it would be nice if you could reference the variables to be formatted by name instead of by position.  This can be done by simply passing the dict and using square brackets '[]' to access the keysThis could also be done by passing the table as keyword arguments with the \u2018**\u2019 notation.This is particularly useful in combination with the built-in function vars(), which returns a dictionary containing all local variables.As an example, the following lines produce a tidily-aligned set of columns giving integers and their squares and cubes:For a complete overview of string formatting with str.format(), see Format String Syntax.", "L3_Code": ">>> print('We are the {} who say \"{}!\"'.format('knights', 'Ni')) We are the knights who say \"Ni!\"  >>> print('{0} and {1}'.format('spam', 'eggs')) spam and eggs >>> print('{1} and {0}'.format('spam', 'eggs')) eggs and spam  >>> print('This {food} is {adjective}.'.format( ...       food='spam', adjective='absolutely horrible')) This spam is absolutely horrible.  >>> print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',                                                        other='Georg')) The story of Bill, Manfred, and Georg.  >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678} >>> print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; ' ...       'Dcab: {0[Dcab]:d}'.format(table)) Jack: 4098; Sjoerd: 4127; Dcab: 8637678  >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678} >>> print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table)) Jack: 4098; Sjoerd: 4127; Dcab: 8637678  >>> for x in range(1, 11): ...     print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x)) ...  1   1    1  2   4    8  3   9   27  4  16   64  5  25  125  6  36  216  7  49  343  8  64  512  9  81  729 10 100 1000  "},
{"URL": "https://docs.python.org/3/tutorial/inputoutput.html", "Language": "Python", "M_Title": "7. Input and Output\u00b6", "M_Desc": "There are several ways to present the output of a program; data can be printed in a human-readable form, or written to a file for future use. This chapter will discuss some of the possibilities.", "M_Code": "", "L2_Title": "7.1. Fancier Output Formatting\u00b6", "L2_Desc": "So far we\u2019ve encountered two ways of writing values: expression statements and the print() function.  (A third way is using the write() method of file objects; the standard output file can be referenced as sys.stdout. See the Library Reference for more information on this.)Often you\u2019ll want more control over the formatting of your output than simply printing space-separated values. There are several ways to format output.When you don\u2019t need fancy output but just want a quick display of some variables for debugging purposes, you can convert any value to a string with the repr() or str() functions.The str() function is meant to return representations of values which are fairly human-readable, while repr() is meant to generate representations which can be read by the interpreter (or will force a SyntaxError if there is no equivalent syntax).  For objects which don\u2019t have a particular representation for human consumption, str() will return the same value as repr().  Many values, such as numbers or structures like lists and dictionaries, have the same representation using either function.  Strings, in particular, have two distinct representations.Some examples:The string module contains a Template class that offers yet another way to substitute values into strings, using placeholders like $x and replacing them with values from a dictionary, but offers much less control of the formatting.", "L2_Code": ">>> s = 'Hello, world.' >>> str(s) 'Hello, world.' >>> repr(s) \"'Hello, world.'\" >>> str(1/7) '0.14285714285714285' >>> x = 10 * 3.25 >>> y = 200 * 200 >>> s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...' >>> print(s) The value of x is 32.5, and y is 40000... >>> # The repr() of a string adds string quotes and backslashes: ... hello = 'hello, world\\n' >>> hellos = repr(hello) >>> print(hellos) 'hello, world\\n' >>> # The argument to repr() may be any Python object: ... repr((x, y, ('spam', 'eggs'))) \"(32.5, 40000, ('spam', 'eggs'))\"  ", "L3_Title": "7.1.3. Manual String Formatting\u00b6", "L3_Desc": "Here\u2019s the same table of squares and cubes, formatted manually:(Note that the one space between each column was added by the way print() works: it always adds spaces between its arguments.)The str.rjust() method of string objects right-justifies a string in a field of a given width by padding it with spaces on the left. There are similar methods str.ljust() and str.center(). These methods do not write anything, they just return a new string. If the input string is too long, they don\u2019t truncate it, but return it unchanged; this will mess up your column lay-out but that\u2019s usually better than the alternative, which would be lying about a value. (If you really want truncation you can always add a slice operation, as in x.ljust(n)[:n].)There is another method, str.zfill(), which pads a numeric string on the left with zeros.  It understands about plus and minus signs:", "L3_Code": ">>> for x in range(1, 11): ...     print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ') ...     # Note use of 'end' on previous line ...     print(repr(x*x*x).rjust(4)) ...  1   1    1  2   4    8  3   9   27  4  16   64  5  25  125  6  36  216  7  49  343  8  64  512  9  81  729 10 100 1000  >>> '12'.zfill(5) '00012' >>> '-3.14'.zfill(7) '-003.14' >>> '3.14159265359'.zfill(5) '3.14159265359'  "},
{"URL": "https://docs.python.org/3/tutorial/inputoutput.html", "Language": "Python", "M_Title": "7. Input and Output\u00b6", "M_Desc": "There are several ways to present the output of a program; data can be printed in a human-readable form, or written to a file for future use. This chapter will discuss some of the possibilities.", "M_Code": "", "L2_Title": "7.1. Fancier Output Formatting\u00b6", "L2_Desc": "So far we\u2019ve encountered two ways of writing values: expression statements and the print() function.  (A third way is using the write() method of file objects; the standard output file can be referenced as sys.stdout. See the Library Reference for more information on this.)Often you\u2019ll want more control over the formatting of your output than simply printing space-separated values. There are several ways to format output.When you don\u2019t need fancy output but just want a quick display of some variables for debugging purposes, you can convert any value to a string with the repr() or str() functions.The str() function is meant to return representations of values which are fairly human-readable, while repr() is meant to generate representations which can be read by the interpreter (or will force a SyntaxError if there is no equivalent syntax).  For objects which don\u2019t have a particular representation for human consumption, str() will return the same value as repr().  Many values, such as numbers or structures like lists and dictionaries, have the same representation using either function.  Strings, in particular, have two distinct representations.Some examples:The string module contains a Template class that offers yet another way to substitute values into strings, using placeholders like $x and replacing them with values from a dictionary, but offers much less control of the formatting.", "L2_Code": ">>> s = 'Hello, world.' >>> str(s) 'Hello, world.' >>> repr(s) \"'Hello, world.'\" >>> str(1/7) '0.14285714285714285' >>> x = 10 * 3.25 >>> y = 200 * 200 >>> s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...' >>> print(s) The value of x is 32.5, and y is 40000... >>> # The repr() of a string adds string quotes and backslashes: ... hello = 'hello, world\\n' >>> hellos = repr(hello) >>> print(hellos) 'hello, world\\n' >>> # The argument to repr() may be any Python object: ... repr((x, y, ('spam', 'eggs'))) \"(32.5, 40000, ('spam', 'eggs'))\"  ", "L3_Title": "7.1.4. Old string formatting\u00b6", "L3_Desc": "The % operator can also be used for string formatting. It interprets the left argument much like a sprintf()-style format string to be applied to the right argument, and returns the string resulting from this formatting operation. For example:More information can be found in the printf-style String Formatting section.", "L3_Code": ">>> import math >>> print('The value of pi is approximately %5.3f.' % math.pi) The value of pi is approximately 3.142.  "},
{"URL": "https://docs.python.org/3/tutorial/inputoutput.html", "Language": "Python", "M_Title": "7. Input and Output\u00b6", "M_Desc": "There are several ways to present the output of a program; data can be printed in a human-readable form, or written to a file for future use. This chapter will discuss some of the possibilities.", "M_Code": "", "L2_Title": "7.2. Reading and Writing Files\u00b6", "L2_Desc": "open() returns a file object, and is most commonly used with two arguments: open(filename, mode).The first argument is a string containing the filename.  The second argument is another string containing a few characters describing the way in which the file will be used.  mode can be 'r' when the file will only be read, 'w' for only writing (an existing file with the same name will be erased), and 'a' opens the file for appending; any data written to the file is automatically added to the end.  'r+' opens the file for both reading and writing. The mode argument is optional; 'r' will be assumed if it\u2019s omitted.Normally, files are opened in text mode, that means, you read and write strings from and to the file, which are encoded in a specific encoding. If encoding is not specified, the default is platform dependent (see open()). 'b' appended to the mode opens the file in binary mode: now the data is read and written in the form of bytes objects.  This mode should be used for all files that don\u2019t contain text.In text mode, the default when reading is to convert platform-specific line endings (\\n on Unix, \\r\\n on Windows) to just \\n.  When writing in text mode, the default is to convert occurrences of \\n back to platform-specific line endings.  This behind-the-scenes modification to file data is fine for text files, but will corrupt binary data like that in JPEG or EXE files.  Be very careful to use binary mode when reading and writing such files.It is good practice to use the with keyword when dealing with file objects.  The advantage is that the file is properly closed after its suite finishes, even if an exception is raised at some point.  Using with is also much shorter than writing equivalent try-finally blocks:If you\u2019re not using the with keyword, then you should call f.close() to close the file and immediately free up any system resources used by it. If you don\u2019t explicitly close a file, Python\u2019s garbage collector will eventually destroy the object and close the open file for you, but the file may stay open for a while.  Another risk is that different Python implementations will do this clean-up at different times.After a file object is closed, either by a with statement or by calling f.close(), attempts to use the file object will automatically fail.", "L2_Code": ">>> f = open('workfile', 'w')  >>> with open('workfile') as f: ...     read_data = f.read() >>> f.closed True  >>> f.close() >>> f.read() Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> ValueError: I/O operation on closed file.  ", "L3_Title": "7.2.1. Methods of File Objects\u00b6", "L3_Desc": "The rest of the examples in this section will assume that a file object called f has already been created.To read a file\u2019s contents, call f.read(size), which reads some quantity of data and returns it as a string (in text mode) or bytes object (in binary mode). size is an optional numeric argument.  When size is omitted or negative, the entire contents of the file will be read and returned; it\u2019s your problem if the file is twice as large as your machine\u2019s memory. Otherwise, at most size bytes are read and returned. If the end of the file has been reached, f.read() will return an empty string ('').f.readline() reads a single line from the file; a newline character (\\n) is left at the end of the string, and is only omitted on the last line of the file if the file doesn\u2019t end in a newline.  This makes the return value unambiguous; if f.readline() returns an empty string, the end of the file has been reached, while a blank line is represented by '\\n', a string containing only a single newline.For reading lines from a file, you can loop over the file object. This is memory efficient, fast, and leads to simple code:If you want to read all the lines of a file in a list you can also use list(f) or f.readlines().f.write(string) writes the contents of string to the file, returning the number of characters written.Other types of objects need to be converted \u2013 either to a string (in text mode) or a bytes object (in binary mode) \u2013 before writing them:f.tell() returns an integer giving the file object\u2019s current position in the file represented as number of bytes from the beginning of the file when in binary mode and an opaque number when in text mode.To change the file object\u2019s position, use f.seek(offset, from_what).  The position is computed from adding offset to a reference point; the reference point is selected by the from_what argument.  A from_what value of 0 measures from the beginning of the file, 1 uses the current file position, and 2 uses the end of the file as the reference point.  from_what can be omitted and defaults to 0, using the beginning of the file as the reference point.In text files (those opened without a b in the mode string), only seeks relative to the beginning of the file are allowed (the exception being seeking to the very file end with seek(0, 2)) and the only valid offset values are those returned from the f.tell(), or zero. Any other offset value produces undefined behaviour.File objects have some additional methods, such as isatty() and truncate() which are less frequently used; consult the Library Reference for a complete guide to file objects.", "L3_Code": ">>> f.read() 'This is the entire file.\\n' >>> f.read() ''  >>> f.readline() 'This is the first line of the file.\\n' >>> f.readline() 'Second line of the file\\n' >>> f.readline() ''  >>> for line in f: ...     print(line, end='') ... This is the first line of the file. Second line of the file  >>> f.write('This is a test\\n') 15  >>> value = ('the answer', 42) >>> s = str(value)  # convert the tuple to string >>> f.write(s) 18  >>> f = open('workfile', 'rb+') >>> f.write(b'0123456789abcdef') 16 >>> f.seek(5)      # Go to the 6th byte in the file 5 >>> f.read(1) b'5' >>> f.seek(-3, 2)  # Go to the 3rd byte before the end 13 >>> f.read(1) b'd'  "},
{"URL": "https://docs.python.org/3/tutorial/inputoutput.html", "Language": "Python", "M_Title": "7. Input and Output\u00b6", "M_Desc": "There are several ways to present the output of a program; data can be printed in a human-readable form, or written to a file for future use. This chapter will discuss some of the possibilities.", "M_Code": "", "L2_Title": "7.2. Reading and Writing Files\u00b6", "L2_Desc": "open() returns a file object, and is most commonly used with two arguments: open(filename, mode).The first argument is a string containing the filename.  The second argument is another string containing a few characters describing the way in which the file will be used.  mode can be 'r' when the file will only be read, 'w' for only writing (an existing file with the same name will be erased), and 'a' opens the file for appending; any data written to the file is automatically added to the end.  'r+' opens the file for both reading and writing. The mode argument is optional; 'r' will be assumed if it\u2019s omitted.Normally, files are opened in text mode, that means, you read and write strings from and to the file, which are encoded in a specific encoding. If encoding is not specified, the default is platform dependent (see open()). 'b' appended to the mode opens the file in binary mode: now the data is read and written in the form of bytes objects.  This mode should be used for all files that don\u2019t contain text.In text mode, the default when reading is to convert platform-specific line endings (\\n on Unix, \\r\\n on Windows) to just \\n.  When writing in text mode, the default is to convert occurrences of \\n back to platform-specific line endings.  This behind-the-scenes modification to file data is fine for text files, but will corrupt binary data like that in JPEG or EXE files.  Be very careful to use binary mode when reading and writing such files.It is good practice to use the with keyword when dealing with file objects.  The advantage is that the file is properly closed after its suite finishes, even if an exception is raised at some point.  Using with is also much shorter than writing equivalent try-finally blocks:If you\u2019re not using the with keyword, then you should call f.close() to close the file and immediately free up any system resources used by it. If you don\u2019t explicitly close a file, Python\u2019s garbage collector will eventually destroy the object and close the open file for you, but the file may stay open for a while.  Another risk is that different Python implementations will do this clean-up at different times.After a file object is closed, either by a with statement or by calling f.close(), attempts to use the file object will automatically fail.", "L2_Code": ">>> f = open('workfile', 'w')  >>> with open('workfile') as f: ...     read_data = f.read() >>> f.closed True  >>> f.close() >>> f.read() Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> ValueError: I/O operation on closed file.  ", "L3_Title": "7.2.2. Saving structured data with json\u00b6", "L3_Desc": "Strings can easily be written to and read from a file.  Numbers take a bit more effort, since the read() method only returns strings, which will have to be passed to a function like int(), which takes a string like '123' and returns its numeric value 123.  When you want to save more complex data types like nested lists and dictionaries, parsing and serializing by hand becomes complicated.Rather than having users constantly writing and debugging code to save complicated data types to files, Python allows you to use the popular data interchange format called JSON (JavaScript Object Notation).  The standard module called json can take Python data hierarchies, and convert them to string representations; this process is called serializing.  Reconstructing the data from the string representation is called deserializing.  Between serializing and deserializing, the string representing the object may have been stored in a file or data, or sent over a network connection to some distant machine.If you have an object x, you can view its JSON string representation with a simple line of code:Another variant of the dumps() function, called dump(), simply serializes the object to a text file.  So if f is a text file object opened for writing, we can do this:To decode the object again, if f is a text file object which has been opened for reading:This simple serialization technique can handle lists and dictionaries, but serializing arbitrary class instances in JSON requires a bit of extra effort. The reference for the json module contains an explanation of this.", "L3_Code": ">>> import json >>> json.dumps([1, 'simple', 'list']) '[1, \"simple\", \"list\"]'  json.dump(x, f)  x = json.load(f)  "},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II\u00b6", "M_Desc": "This second tour covers more advanced modules that support professional programming needs.  These modules rarely occur in small scripts.", "M_Code": "", "L2_Title": "11.1. Output Formatting\u00b6", "L2_Desc": "The reprlib module provides a version of repr() customized for abbreviated displays of large or deeply nested containers:The pprint module offers more sophisticated control over printing both built-in and user defined objects in a way that is readable by the interpreter. When the result is longer than one line, the \u201cpretty printer\u201d adds line breaks and indentation to more clearly reveal data structure:The textwrap module formats paragraphs of text to fit a given screen width:The locale module accesses a database of culture specific data formats. The grouping attribute of locale\u2019s format function provides a direct way of formatting numbers with group separators:", "L2_Code": ">>> import reprlib >>> reprlib.repr(set('supercalifragilisticexpialidocious')) \"{'a', 'c', 'd', 'e', 'f', 'g', ...}\"  >>> import pprint >>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta', ...     'yellow'], 'blue']]] ... >>> pprint.pprint(t, width=30) [[[['black', 'cyan'],    'white',    ['green', 'red']],   [['magenta', 'yellow'],    'blue']]]  >>> import textwrap >>> doc = \"\"\"The wrap() method is just like fill() except that it returns ... a list of strings instead of one big string with newlines to separate ... the wrapped lines.\"\"\" ... >>> print(textwrap.fill(doc, width=40)) The wrap() method is just like fill() except that it returns a list of strings instead of one big string with newlines to separate the wrapped lines.  >>> import locale >>> locale.setlocale(locale.LC_ALL, 'English_United States.1252') 'English_United States.1252' >>> conv = locale.localeconv()          # get a mapping of conventions >>> x = 1234567.8 >>> locale.format(\"%d\", x, grouping=True) '1,234,567' >>> locale.format_string(\"%s%.*f\", (conv['currency_symbol'], ...                      conv['frac_digits'], x), grouping=True) '$1,234,567.80'  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II\u00b6", "M_Desc": "This second tour covers more advanced modules that support professional programming needs.  These modules rarely occur in small scripts.", "M_Code": "", "L2_Title": "11.2. Templating\u00b6", "L2_Desc": "The string module includes a versatile Template class with a simplified syntax suitable for editing by end-users.  This allows users to customize their applications without having to alter the application.The format uses placeholder names formed by $ with valid Python identifiers (alphanumeric characters and underscores).  Surrounding the placeholder with braces allows it to be followed by more alphanumeric letters with no intervening spaces.  Writing $$ creates a single escaped $:The substitute() method raises a KeyError when a placeholder is not supplied in a dictionary or a keyword argument.  For mail-merge style applications, user supplied data may be incomplete and the safe_substitute() method may be more appropriate \u2014 it will leave placeholders unchanged if data is missing:Template subclasses can specify a custom delimiter.  For example, a batch renaming utility for a photo browser may elect to use percent signs for placeholders such as the current date, image sequence number, or file format:Another application for templating is separating program logic from the details of multiple output formats.  This makes it possible to substitute custom templates for XML files, plain text reports, and HTML web reports.", "L2_Code": ">>> from string import Template >>> t = Template('${village}folk send $$10 to $cause.') >>> t.substitute(village='Nottingham', cause='the ditch fund') 'Nottinghamfolk send $10 to the ditch fund.'  >>> t = Template('Return the $item to $owner.') >>> d = dict(item='unladen swallow') >>> t.substitute(d) Traceback (most recent call last):   ... KeyError: 'owner' >>> t.safe_substitute(d) 'Return the unladen swallow to $owner.'  >>> import time, os.path >>> photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg'] >>> class BatchRename(Template): ...     delimiter = '%' >>> fmt = input('Enter rename style (%d-date %n-seqnum %f-format):  ') Enter rename style (%d-date %n-seqnum %f-format):  Ashley_%n%f  >>> t = BatchRename(fmt) >>> date = time.strftime('%d%b%y') >>> for i, filename in enumerate(photofiles): ...     base, ext = os.path.splitext(filename) ...     newname = t.substitute(d=date, n=i, f=ext) ...     print('{0} --> {1}'.format(filename, newname))  img_1074.jpg --> Ashley_0.jpg img_1076.jpg --> Ashley_1.jpg img_1077.jpg --> Ashley_2.jpg  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II\u00b6", "M_Desc": "This second tour covers more advanced modules that support professional programming needs.  These modules rarely occur in small scripts.", "M_Code": "", "L2_Title": "11.3. Working with Binary Data Record Layouts\u00b6", "L2_Desc": "The struct module provides pack() and unpack() functions for working with variable length binary record formats.  The following example shows how to loop through header information in a ZIP file without using the zipfile module.  Pack codes \"H\" and \"I\" represent two and four byte unsigned numbers respectively.  The \"<\" indicates that they are standard size and in little-endian byte order:", "L2_Code": "import struct  with open('myfile.zip', 'rb') as f:     data = f.read()  start = 0 for i in range(3):                      # show the first 3 file headers     start += 14     fields = struct.unpack('<IIIHH', data[start:start+16])     crc32, comp_size, uncomp_size, filenamesize, extra_size = fields      start += 16     filename = data[start:start+filenamesize]     start += filenamesize     extra = data[start:start+extra_size]     print(filename, hex(crc32), comp_size, uncomp_size)      start += extra_size + comp_size     # skip to the next header  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II\u00b6", "M_Desc": "This second tour covers more advanced modules that support professional programming needs.  These modules rarely occur in small scripts.", "M_Code": "", "L2_Title": "11.4. Multi-threading\u00b6", "L2_Desc": "Threading is a technique for decoupling tasks which are not sequentially dependent.  Threads can be used to improve the responsiveness of applications that accept user input while other tasks run in the background.  A related use case is running I/O in parallel with computations in another thread.The following code shows how the high level threading module can run tasks in background while the main program continues to run:The principal challenge of multi-threaded applications is coordinating threads that share data or other resources.  To that end, the threading module provides a number of synchronization primitives including locks, events, condition variables, and semaphores.While those tools are powerful, minor design errors can result in problems that are difficult to reproduce.  So, the preferred approach to task coordination is to concentrate all access to a resource in a single thread and then use the queue module to feed that thread with requests from other threads. Applications using Queue objects for inter-thread communication and coordination are easier to design, more readable, and more reliable.", "L2_Code": "import threading, zipfile  class AsyncZip(threading.Thread):     def __init__(self, infile, outfile):         threading.Thread.__init__(self)         self.infile = infile         self.outfile = outfile      def run(self):         f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)         f.write(self.infile)         f.close()         print('Finished background zip of:', self.infile)  background = AsyncZip('mydata.txt', 'myarchive.zip') background.start() print('The main program continues to run in foreground.')  background.join()    # Wait for the background task to finish print('Main program waited until background was done.')  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II\u00b6", "M_Desc": "This second tour covers more advanced modules that support professional programming needs.  These modules rarely occur in small scripts.", "M_Code": "", "L2_Title": "11.5. Logging\u00b6", "L2_Desc": "The logging module offers a full featured and flexible logging system. At its simplest, log messages are sent to a file or to sys.stderr:This produces the following output:By default, informational and debugging messages are suppressed and the output is sent to standard error.  Other output options include routing messages through email, datagrams, sockets, or to an HTTP Server.  New filters can select different routing based on message priority: DEBUG, INFO, WARNING, ERROR, and CRITICAL.The logging system can be configured directly from Python or can be loaded from a user editable configuration file for customized logging without altering the application.", "L2_Code": "import logging logging.debug('Debugging information') logging.info('Informational message') logging.warning('Warning:config file %s not found', 'server.conf') logging.error('Error occurred') logging.critical('Critical error -- shutting down')  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II\u00b6", "M_Desc": "This second tour covers more advanced modules that support professional programming needs.  These modules rarely occur in small scripts.", "M_Code": "", "L2_Title": "11.6. Weak References\u00b6", "L2_Desc": "Python does automatic memory management (reference counting for most objects and garbage collection to eliminate cycles).  The memory is freed shortly after the last reference to it has been eliminated.This approach works fine for most applications but occasionally there is a need to track objects only as long as they are being used by something else. Unfortunately, just tracking them creates a reference that makes them permanent. The weakref module provides tools for tracking objects without creating a reference.  When the object is no longer needed, it is automatically removed from a weakref table and a callback is triggered for weakref objects.  Typical applications include caching objects that are expensive to create:", "L2_Code": ">>> import weakref, gc >>> class A: ...     def __init__(self, value): ...         self.value = value ...     def __repr__(self): ...         return str(self.value) ... >>> a = A(10)                   # create a reference >>> d = weakref.WeakValueDictionary() >>> d['primary'] = a            # does not create a reference >>> d['primary']                # fetch the object if it is still alive 10 >>> del a                       # remove the one reference >>> gc.collect()                # run garbage collection right away 0 >>> d['primary']                # entry was automatically removed Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>     d['primary']                # entry was automatically removed   File \"C:/python37/lib/weakref.py\", line 46, in __getitem__     o = self.data[key]() KeyError: 'primary'  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II\u00b6", "M_Desc": "This second tour covers more advanced modules that support professional programming needs.  These modules rarely occur in small scripts.", "M_Code": "", "L2_Title": "11.7. Tools for Working with Lists\u00b6", "L2_Desc": "Many data structure needs can be met with the built-in list type. However, sometimes there is a need for alternative implementations with different performance trade-offs.The array module provides an array() object that is like a list that stores only homogeneous data and stores it more compactly.  The following example shows an array of numbers stored as two byte unsigned binary numbers (typecode \"H\") rather than the usual 16 bytes per entry for regular lists of Python int objects:The collections module provides a deque() object that is like a list with faster appends and pops from the left side but slower lookups in the middle. These objects are well suited for implementing queues and breadth first tree searches:In addition to alternative list implementations, the library also offers other tools such as the bisect module with functions for manipulating sorted lists:The heapq module provides functions for implementing heaps based on regular lists.  The lowest valued entry is always kept at position zero.  This is useful for applications which repeatedly access the smallest element but do not want to run a full list sort:", "L2_Code": ">>> from array import array >>> a = array('H', [4000, 10, 700, 22222]) >>> sum(a) 26932 >>> a[1:3] array('H', [10, 700])  >>> from collections import deque >>> d = deque([\"task1\", \"task2\", \"task3\"]) >>> d.append(\"task4\") >>> print(\"Handling\", d.popleft()) Handling task1  unsearched = deque([starting_node]) def breadth_first_search(unsearched):     node = unsearched.popleft()     for m in gen_moves(node):         if is_goal(m):             return m         unsearched.append(m)  >>> import bisect >>> scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')] >>> bisect.insort(scores, (300, 'ruby')) >>> scores [(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]  >>> from heapq import heapify, heappop, heappush >>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0] >>> heapify(data)                      # rearrange the list into heap order >>> heappush(data, -5)                 # add a new entry >>> [heappop(data) for i in range(3)]  # fetch the three smallest entries [-5, 0, 1]  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II\u00b6", "M_Desc": "This second tour covers more advanced modules that support professional programming needs.  These modules rarely occur in small scripts.", "M_Code": "", "L2_Title": "11.8. Decimal Floating Point Arithmetic\u00b6", "L2_Desc": "The decimal module offers a Decimal datatype for decimal floating point arithmetic.  Compared to the built-in float implementation of binary floating point, the class is especially helpful forFor example, calculating a 5% tax on a 70 cent phone charge gives different results in decimal floating point and binary floating point. The difference becomes significant if the results are rounded to the nearest cent:The Decimal result keeps a trailing zero, automatically inferring four place significance from multiplicands with two place significance.  Decimal reproduces mathematics as done by hand and avoids issues that can arise when binary floating point cannot exactly represent decimal quantities.Exact representation enables the Decimal class to perform modulo calculations and equality tests that are unsuitable for binary floating point:The decimal module provides arithmetic with as much precision as needed:", "L2_Code": ">>> from decimal import * >>> round(Decimal('0.70') * Decimal('1.05'), 2) Decimal('0.74') >>> round(.70 * 1.05, 2) 0.73  >>> Decimal('1.00') % Decimal('.10') Decimal('0.00') >>> 1.00 % 0.10 0.09999999999999995  >>> sum([Decimal('0.1')]*10) == Decimal('1.0') True >>> sum([0.1]*10) == 1.0 False  >>> getcontext().prec = 36 >>> Decimal(1) / Decimal(7) Decimal('0.142857142857142857142857142857142857')  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/errors.html", "Language": "Python", "M_Title": "8. Errors and Exceptions\u00b6", "M_Desc": "Until now error messages haven\u2019t been more than mentioned, but if you have tried out the examples you have probably seen some.  There are (at least) two distinguishable kinds of errors: syntax errors and exceptions.", "M_Code": "", "L2_Title": "8.1. Syntax Errors\u00b6", "L2_Desc": "Syntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while you are still learning Python:The parser repeats the offending line and displays a little \u2018arrow\u2019 pointing at the earliest point in the line where the error was detected.  The error is caused by (or at least detected at) the token preceding the arrow: in the example, the error is detected at the function print(), since a colon (':') is missing before it.  File name and line number are printed so you know where to look in case the input came from a script.", "L2_Code": ">>> while True print('Hello world')   File \"<stdin>\", line 1     while True print('Hello world')                    ^ SyntaxError: invalid syntax  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/errors.html", "Language": "Python", "M_Title": "8. Errors and Exceptions\u00b6", "M_Desc": "Until now error messages haven\u2019t been more than mentioned, but if you have tried out the examples you have probably seen some.  There are (at least) two distinguishable kinds of errors: syntax errors and exceptions.", "M_Code": "", "L2_Title": "8.2. Exceptions\u00b6", "L2_Desc": "Even if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called exceptions and are not unconditionally fatal: you will soon learn how to handle them in Python programs.  Most exceptions are not handled by programs, however, and result in error messages as shown here:The last line of the error message indicates what happened. Exceptions come in different types, and the type is printed as part of the message: the types in the example are ZeroDivisionError, NameError and TypeError. The string printed as the exception type is the name of the built-in exception that occurred.  This is true for all built-in exceptions, but need not be true for user-defined exceptions (although it is a useful convention). Standard exception names are built-in identifiers (not reserved keywords).The rest of the line provides detail based on the type of exception and what caused it.The preceding part of the error message shows the context where the exception happened, in the form of a stack traceback. In general it contains a stack traceback listing source lines; however, it will not display lines read from standard input.Built-in Exceptions lists the built-in exceptions and their meanings.", "L2_Code": ">>> 10 * (1/0) Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> ZeroDivisionError: division by zero >>> 4 + spam*3 Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> NameError: name 'spam' is not defined >>> '2' + 2 Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> TypeError: Can't convert 'int' object to str implicitly  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/errors.html", "Language": "Python", "M_Title": "8. Errors and Exceptions\u00b6", "M_Desc": "Until now error messages haven\u2019t been more than mentioned, but if you have tried out the examples you have probably seen some.  There are (at least) two distinguishable kinds of errors: syntax errors and exceptions.", "M_Code": "", "L2_Title": "8.3. Handling Exceptions\u00b6", "L2_Desc": "It is possible to write programs that handle selected exceptions. Look at the following example, which asks the user for input until a valid integer has been entered, but allows the user to interrupt the program (using Control-C or whatever the operating system supports); note that a user-generated interruption is signalled by raising the KeyboardInterrupt exception.The try statement works as follows.A try statement may have more than one except clause, to specify handlers for different exceptions.  At most one handler will be executed. Handlers only handle exceptions that occur in the corresponding try clause, not in other handlers of the same try statement.  An except clause may name multiple exceptions as a parenthesized tuple, for example:A class in an except clause is compatible with an exception if it is the same class or a base class thereof (but not the other way around \u2014 an except clause listing a derived class is not compatible with a base class).  For example, the following code will print B, C, D in that order:Note that if the except clauses were reversed (with except B first), it would have printed B, B, B \u2014 the first matching except clause is triggered.The last except clause may omit the exception name(s), to serve as a wildcard. Use this with extreme caution, since it is easy to mask a real programming error in this way!  It can also be used to print an error message and then re-raise the exception (allowing a caller to handle the exception as well):The try \u2026 except statement has an optional else clause, which, when present, must follow all except clauses.  It is useful for code that must be executed if the try clause does not raise an exception.  For example:The use of the else clause is better than adding additional code to the try clause because it avoids accidentally catching an exception that wasn\u2019t raised by the code being protected by the try \u2026 except statement.When an exception occurs, it may have an associated value, also known as the exception\u2019s argument. The presence and type of the argument depend on the exception type.The except clause may specify a variable after the exception name.  The variable is bound to an exception instance with the arguments stored in instance.args.  For convenience, the exception instance defines __str__() so the arguments can be printed directly without having to reference .args.  One may also instantiate an exception first before raising it and add any attributes to it as desired.If an exception has arguments, they are printed as the last part (\u2018detail\u2019) of the message for unhandled exceptions.Exception handlers don\u2019t just handle exceptions if they occur immediately in the try clause, but also if they occur inside functions that are called (even indirectly) in the try clause. For example:", "L2_Code": ">>> while True: ...     try: ...         x = int(input(\"Please enter a number: \")) ...         break ...     except ValueError: ...         print(\"Oops!  That was no valid number.  Try again...\") ...  ... except (RuntimeError, TypeError, NameError): ...     pass  class B(Exception):     pass  class C(B):     pass  class D(C):     pass  for cls in [B, C, D]:     try:         raise cls()     except D:         print(\"D\")     except C:         print(\"C\")     except B:         print(\"B\")  import sys  try:     f = open('myfile.txt')     s = f.readline()     i = int(s.strip()) except OSError as err:     print(\"OS error: {0}\".format(err)) except ValueError:     print(\"Could not convert data to an integer.\") except:     print(\"Unexpected error:\", sys.exc_info()[0])     raise  for arg in sys.argv[1:]:     try:         f = open(arg, 'r')     except OSError:         print('cannot open', arg)     else:         print(arg, 'has', len(f.readlines()), 'lines')         f.close()  >>> try: ...     raise Exception('spam', 'eggs') ... except Exception as inst: ...     print(type(inst))    # the exception instance ...     print(inst.args)     # arguments stored in .args ...     print(inst)          # __str__ allows args to be printed directly, ...                          # but may be overridden in exception subclasses ...     x, y = inst.args     # unpack args ...     print('x =', x) ...     print('y =', y) ... <class 'Exception'> ('spam', 'eggs') ('spam', 'eggs') x = spam y = eggs  >>> def this_fails(): ...     x = 1/0 ... >>> try: ...     this_fails() ... except ZeroDivisionError as err: ...     print('Handling run-time error:', err) ... Handling run-time error: division by zero  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/errors.html", "Language": "Python", "M_Title": "8. Errors and Exceptions\u00b6", "M_Desc": "Until now error messages haven\u2019t been more than mentioned, but if you have tried out the examples you have probably seen some.  There are (at least) two distinguishable kinds of errors: syntax errors and exceptions.", "M_Code": "", "L2_Title": "8.4. Raising Exceptions\u00b6", "L2_Desc": "The raise statement allows the programmer to force a specified exception to occur. For example:The sole argument to raise indicates the exception to be raised. This must be either an exception instance or an exception class (a class that derives from Exception).  If an exception class is passed, it will be implicitly instantiated by calling its constructor with no arguments:If you need to determine whether an exception was raised but don\u2019t intend to handle it, a simpler form of the raise statement allows you to re-raise the exception:", "L2_Code": ">>> raise NameError('HiThere') Traceback (most recent call last):   File \"<stdin>\", line 1, in <module> NameError: HiThere  raise ValueError  # shorthand for 'raise ValueError()'  >>> try: ...     raise NameError('HiThere') ... except NameError: ...     print('An exception flew by!') ...     raise ... An exception flew by! Traceback (most recent call last):   File \"<stdin>\", line 2, in <module> NameError: HiThere  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/errors.html", "Language": "Python", "M_Title": "8. Errors and Exceptions\u00b6", "M_Desc": "Until now error messages haven\u2019t been more than mentioned, but if you have tried out the examples you have probably seen some.  There are (at least) two distinguishable kinds of errors: syntax errors and exceptions.", "M_Code": "", "L2_Title": "8.5. User-defined Exceptions\u00b6", "L2_Desc": "Programs may name their own exceptions by creating a new exception class (see Classes for more about Python classes).  Exceptions should typically be derived from the Exception class, either directly or indirectly.Exception classes can be defined which do anything any other class can do, but are usually kept simple, often only offering a number of attributes that allow information about the error to be extracted by handlers for the exception.  When creating a module that can raise several distinct errors, a common practice is to create a base class for exceptions defined by that module, and subclass that to create specific exception classes for different error conditions:Most exceptions are defined with names that end in \u201cError,\u201d similar to the naming of the standard exceptions.Many standard modules define their own exceptions to report errors that may occur in functions they define.  More information on classes is presented in chapter Classes.", "L2_Code": "class Error(Exception):     \"\"\"Base class for exceptions in this module.\"\"\"     pass  class InputError(Error):     \"\"\"Exception raised for errors in the input.      Attributes:         expression -- input expression in which the error occurred         message -- explanation of the error     \"\"\"      def __init__(self, expression, message):         self.expression = expression         self.message = message  class TransitionError(Error):     \"\"\"Raised when an operation attempts a state transition that's not     allowed.      Attributes:         previous -- state at beginning of transition         next -- attempted new state         message -- explanation of why the specific transition is not allowed     \"\"\"      def __init__(self, previous, next, message):         self.previous = previous         self.next = next         self.message = message  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/errors.html", "Language": "Python", "M_Title": "8. Errors and Exceptions\u00b6", "M_Desc": "Until now error messages haven\u2019t been more than mentioned, but if you have tried out the examples you have probably seen some.  There are (at least) two distinguishable kinds of errors: syntax errors and exceptions.", "M_Code": "", "L2_Title": "8.6. Defining Clean-up Actions\u00b6", "L2_Desc": "The try statement has another optional clause which is intended to define clean-up actions that must be executed under all circumstances.  For example:A finally clause is always executed before leaving the try statement, whether an exception has occurred or not. When an exception has occurred in the try clause and has not been handled by an except clause (or it has occurred in an except or else clause), it is re-raised after the finally clause has been executed.  The finally clause is also executed \u201con the way out\u201d when any other clause of the try statement is left via a break, continue or return statement.  A more complicated example:As you can see, the finally clause is executed in any event.  The TypeError raised by dividing two strings is not handled by the except clause and therefore re-raised after the finally clause has been executed.In real world applications, the finally clause is useful for releasing external resources (such as files or network connections), regardless of whether the use of the resource was successful.", "L2_Code": ">>> try: ...     raise KeyboardInterrupt ... finally: ...     print('Goodbye, world!') ... Goodbye, world! KeyboardInterrupt Traceback (most recent call last):   File \"<stdin>\", line 2, in <module>  >>> def divide(x, y): ...     try: ...         result = x / y ...     except ZeroDivisionError: ...         print(\"division by zero!\") ...     else: ...         print(\"result is\", result) ...     finally: ...         print(\"executing finally clause\") ... >>> divide(2, 1) result is 2.0 executing finally clause >>> divide(2, 0) division by zero! executing finally clause >>> divide(\"2\", \"1\") executing finally clause Traceback (most recent call last):   File \"<stdin>\", line 1, in <module>   File \"<stdin>\", line 3, in divide TypeError: unsupported operand type(s) for /: 'str' and 'str'  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""},
{"URL": "https://docs.python.org/3/tutorial/errors.html", "Language": "Python", "M_Title": "8. Errors and Exceptions\u00b6", "M_Desc": "Until now error messages haven\u2019t been more than mentioned, but if you have tried out the examples you have probably seen some.  There are (at least) two distinguishable kinds of errors: syntax errors and exceptions.", "M_Code": "", "L2_Title": "8.7. Predefined Clean-up Actions\u00b6", "L2_Desc": "Some objects define standard clean-up actions to be undertaken when the object is no longer needed, regardless of whether or not the operation using the object succeeded or failed. Look at the following example, which tries to open a file and print its contents to the screen.The problem with this code is that it leaves the file open for an indeterminate amount of time after this part of the code has finished executing. This is not an issue in simple scripts, but can be a problem for larger applications. The with statement allows objects like files to be used in a way that ensures they are always cleaned up promptly and correctly.After the statement is executed, the file f is always closed, even if a problem was encountered while processing the lines. Objects which, like files, provide predefined clean-up actions will indicate this in their documentation.", "L2_Code": "for line in open(\"myfile.txt\"):     print(line, end=\"\")  with open(\"myfile.txt\") as f:     for line in f:         print(line, end=\"\")  ", "L3_Title": "", "L3_Desc": "", "L3_Code": ""}
]