[
{"URL": "https://docs.python.org/3/tutorial/appendix.html", "Language": "Python", "M_Title": "16. Appendix", "M_Desc": [], "M_Code": [], "L2_Title": "16.1. Interactive Mode", "L2_Desc": [], "L2_Code": [], "L3_Title": "16.1.1. Error Handling", "L3_Desc": ["When an error occurs, the interpreter prints an error message and a stack trace.\nIn interactive mode, it then returns to the primary prompt; when input came from\na file, it exits with a nonzero exit status after printing the stack trace.\n(Exceptions handled by an ", "except", " clause in a ", "try", " statement\nare not errors in this context.)  Some errors are unconditionally fatal and\ncause an exit with a nonzero exit; this applies to internal inconsistencies and\nsome cases of running out of memory.  All error messages are written to the\nstandard error stream; normal output from executed commands is written to\nstandard output.", "Typing the interrupt character (usually ", "Control-C", " or ", "Delete", ") to the primary or\nsecondary prompt cancels the input and returns to the primary prompt. ", "[1]", "\nTyping an interrupt while a command is executing raises the\n", "KeyboardInterrupt", " exception, which may be handled by a ", "try", "\nstatement."], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/appendix.html", "Language": "Python", "M_Title": "16. Appendix", "M_Desc": [], "M_Code": [], "L2_Title": "16.1. Interactive Mode", "L2_Desc": [], "L2_Code": [], "L3_Title": "16.1.2. Executable Python Scripts", "L3_Desc": ["On BSD\u2019ish Unix systems, Python scripts can be made directly executable, like\nshell scripts, by putting the line", "(assuming that the interpreter is on the user\u2019s ", "PATH", ") at the beginning\nof the script and giving the file an executable mode.  The ", "#!", " must be the\nfirst two characters of the file.  On some platforms, this first line must end\nwith a Unix-style line ending (", "'\\n'", "), not a Windows (", "'\\r\\n'", ") line\nending.  Note that the hash, or pound, character, ", "'#'", ", is used to start a\ncomment in Python.", "The script can be given an executable mode, or permission, using the\n", "chmod", " command.", "On Windows systems, there is no notion of an \u201cexecutable mode\u201d.  The Python\ninstaller automatically associates ", ".py", " files with ", "python.exe", " so that\na double-click on a Python file will run it as a script.  The extension can\nalso be ", ".pyw", ", in that case, the console window that normally appears is\nsuppressed."], "L3_Code": ["#!/usr/bin/env python3.5", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/appendix.html", "Language": "Python", "M_Title": "16. Appendix", "M_Desc": [], "M_Code": [], "L2_Title": "16.1. Interactive Mode", "L2_Desc": [], "L2_Code": [], "L3_Title": "16.1.3. The Interactive Startup File", "L3_Desc": ["When you use Python interactively, it is frequently handy to have some standard\ncommands executed every time the interpreter is started.  You can do this by\nsetting an environment variable named ", "PYTHONSTARTUP", " to the name of a\nfile containing your start-up commands.  This is similar to the ", ".profile", "\nfeature of the Unix shells.", "This file is only read in interactive sessions, not when Python reads commands\nfrom a script, and not when ", "/dev/tty", " is given as the explicit source of\ncommands (which otherwise behaves like an interactive session).  It is executed\nin the same namespace where interactive commands are executed, so that objects\nthat it defines or imports can be used without qualification in the interactive\nsession. You can also change the prompts ", "sys.ps1", " and ", "sys.ps2", " in this\nfile.", "If you want to read an additional start-up file from the current directory, you\ncan program this in the global start-up file using code like ", "if", "\n", "os.path.isfile('.pythonrc.py'):", " ", "exec(open('.pythonrc.py').read())", ".\nIf you want to use the startup file in a script, you must do this explicitly\nin the script:"], "L3_Code": ["import", " ", "os", "\n", "filename", " ", "=", " ", "os", ".", "environ", ".", "get", "(", "'PYTHONSTARTUP'", ")", "\n", "if", " ", "filename", " ", "and", " ", "os", ".", "path", ".", "isfile", "(", "filename", "):", "\n    ", "with", " ", "open", "(", "filename", ")", " ", "as", " ", "fobj", ":", "\n        ", "startup_file", " ", "=", " ", "fobj", ".", "read", "()", "\n    ", "exec", "(", "startup_file", ")", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/appendix.html", "Language": "Python", "M_Title": "16. Appendix", "M_Desc": [], "M_Code": [], "L2_Title": "16.1. Interactive Mode", "L2_Desc": [], "L2_Code": [], "L3_Title": "16.1.4. The Customization Modules", "L3_Desc": ["Python provides two hooks to let you customize it: ", "sitecustomize", " and\n", "usercustomize", ".  To see how it works, you need first to find the location\nof your user site-packages directory.  Start Python and run this code:", "Now you can create a file named ", "usercustomize.py", " in that directory and\nput anything you want in it.  It will affect every invocation of Python, unless\nit is started with the ", "-s", " option to disable the automatic import.", "sitecustomize", " works in the same way, but is typically created by an\nadministrator of the computer in the global site-packages directory, and is\nimported before ", "usercustomize", ".  See the documentation of the ", "site", "\nmodule for more details.", "Footnotes"], "L3_Code": [">>> ", "import", " ", "site", "\n", ">>> ", "site", ".", "getusersitepackages", "()", "\n", "'/home/user/.local/lib/python3.5/site-packages'", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/errors.html", "Language": "Python", "M_Title": "8. Errors and Exceptions", "M_Desc": ["Until now error messages haven\u2019t been more than mentioned, but if you have tried\nout the examples you have probably seen some.  There are (at least) two\ndistinguishable kinds of errors: ", "syntax errors", " and ", "exceptions", "."], "M_Code": [], "L2_Title": "8.1. Syntax Errors", "L2_Desc": ["Syntax errors, also known as parsing errors, are perhaps the most common kind of\ncomplaint you get while you are still learning Python:", "The parser repeats the offending line and displays a little \u2018arrow\u2019 pointing at\nthe earliest point in the line where the error was detected.  The error is\ncaused by (or at least detected at) the token ", "preceding", " the arrow: in the\nexample, the error is detected at the function ", "print()", ", since a colon\n(", "':'", ") is missing before it.  File name and line number are printed so you\nknow where to look in case the input came from a script."], "L2_Code": [">>> ", "while", " ", "True", " ", "print", "(", "'Hello world'", ")", "\n  File ", "\"<stdin>\"", ", line ", "1", "\n    ", "while", " ", "True", " ", "print", "(", "'Hello world'", ")", "\n                   ", "^", "\n", "SyntaxError", ": ", "invalid syntax", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/errors.html", "Language": "Python", "M_Title": "8. Errors and Exceptions", "M_Desc": ["Until now error messages haven\u2019t been more than mentioned, but if you have tried\nout the examples you have probably seen some.  There are (at least) two\ndistinguishable kinds of errors: ", "syntax errors", " and ", "exceptions", "."], "M_Code": [], "L2_Title": "8.2. Exceptions", "L2_Desc": ["Even if a statement or expression is syntactically correct, it may cause an\nerror when an attempt is made to execute it. Errors detected during execution\nare called ", "exceptions", " and are not unconditionally fatal: you will soon learn\nhow to handle them in Python programs.  Most exceptions are not handled by\nprograms, however, and result in error messages as shown here:", "The last line of the error message indicates what happened. Exceptions come in\ndifferent types, and the type is printed as part of the message: the types in\nthe example are ", "ZeroDivisionError", ", ", "NameError", " and ", "TypeError", ".\nThe string printed as the exception type is the name of the built-in exception\nthat occurred.  This is true for all built-in exceptions, but need not be true\nfor user-defined exceptions (although it is a useful convention). Standard\nexception names are built-in identifiers (not reserved keywords).", "The rest of the line provides detail based on the type of exception and what\ncaused it.", "The preceding part of the error message shows the context where the exception\nhappened, in the form of a stack traceback. In general it contains a stack\ntraceback listing source lines; however, it will not display lines read from\nstandard input.", "Built-in Exceptions", " lists the built-in exceptions and their meanings."], "L2_Code": [">>> ", "10", " ", "*", " ", "(", "1", "/", "0", ")", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "1", ", in ", "<module>", "\n", "ZeroDivisionError", ": ", "division by zero", "\n", ">>> ", "4", " ", "+", " ", "spam", "*", "3", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "1", ", in ", "<module>", "\n", "NameError", ": ", "name 'spam' is not defined", "\n", ">>> ", "'2'", " ", "+", " ", "2", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "1", ", in ", "<module>", "\n", "TypeError", ": ", "Can't convert 'int' object to str implicitly", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/errors.html", "Language": "Python", "M_Title": "8. Errors and Exceptions", "M_Desc": ["Until now error messages haven\u2019t been more than mentioned, but if you have tried\nout the examples you have probably seen some.  There are (at least) two\ndistinguishable kinds of errors: ", "syntax errors", " and ", "exceptions", "."], "M_Code": [], "L2_Title": "8.3. Handling Exceptions", "L2_Desc": ["It is possible to write programs that handle selected exceptions. Look at the\nfollowing example, which asks the user for input until a valid integer has been\nentered, but allows the user to interrupt the program (using ", "Control-C", " or\nwhatever the operating system supports); note that a user-generated interruption\nis signalled by raising the ", "KeyboardInterrupt", " exception.", "The ", "try", " statement works as follows.", "A ", "try", " statement may have more than one except clause, to specify\nhandlers for different exceptions.  At most one handler will be executed.\nHandlers only handle exceptions that occur in the corresponding try clause, not\nin other handlers of the same ", "try", " statement.  An except clause may\nname multiple exceptions as a parenthesized tuple, for example:", "A class in an ", "except", " clause is compatible with an exception if it is\nthe same class or a base class thereof (but not the other way around \u2014 an\nexcept clause listing a derived class is not compatible with a base class).  For\nexample, the following code will print B, C, D in that order:", "Note that if the except clauses were reversed (with ", "except", " ", "B", " first), it\nwould have printed B, B, B \u2014 the first matching except clause is triggered.", "The last except clause may omit the exception name(s), to serve as a wildcard.\nUse this with extreme caution, since it is easy to mask a real programming error\nin this way!  It can also be used to print an error message and then re-raise\nthe exception (allowing a caller to handle the exception as well):", "The ", "try", " \u2026 ", "except", " statement has an optional ", "else\nclause", ", which, when present, must follow all except clauses.  It is useful for\ncode that must be executed if the try clause does not raise an exception.  For\nexample:", "The use of the ", "else", " clause is better than adding additional code to\nthe ", "try", " clause because it avoids accidentally catching an exception\nthat wasn\u2019t raised by the code being protected by the ", "try", " \u2026\n", "except", " statement.", "When an exception occurs, it may have an associated value, also known as the\nexception\u2019s ", "argument", ". The presence and type of the argument depend on the\nexception type.", "The except clause may specify a variable after the exception name.  The\nvariable is bound to an exception instance with the arguments stored in\n", "instance.args", ".  For convenience, the exception instance defines\n", "__str__()", " so the arguments can be printed directly without having to\nreference ", ".args", ".  One may also instantiate an exception first before\nraising it and add any attributes to it as desired.", "If an exception has arguments, they are printed as the last part (\u2018detail\u2019) of\nthe message for unhandled exceptions.", "Exception handlers don\u2019t just handle exceptions if they occur immediately in the\ntry clause, but also if they occur inside functions that are called (even\nindirectly) in the try clause. For example:"], "L2_Code": [">>> ", "while", " ", "True", ":", "\n", "... ", "    ", "try", ":", "\n", "... ", "        ", "x", " ", "=", " ", "int", "(", "input", "(", "\"Please enter a number: \"", "))", "\n", "... ", "        ", "break", "\n", "... ", "    ", "except", " ", "ValueError", ":", "\n", "... ", "        ", "print", "(", "\"Oops!  That was no valid number.  Try again...\"", ")", "\n", "...", "\n", "\n", "...", " ", "except", " ", "(", "RuntimeError", ",", " ", "TypeError", ",", " ", "NameError", "):", "\n", "...", "     ", "pass", "\n", "\n", "class", " ", "B", "(", "Exception", "):", "\n    ", "pass", "\n\n", "class", " ", "C", "(", "B", "):", "\n    ", "pass", "\n\n", "class", " ", "D", "(", "C", "):", "\n    ", "pass", "\n\n", "for", " ", "cls", " ", "in", " ", "[", "B", ",", " ", "C", ",", " ", "D", "]:", "\n    ", "try", ":", "\n        ", "raise", " ", "cls", "()", "\n    ", "except", " ", "D", ":", "\n        ", "print", "(", "\"D\"", ")", "\n    ", "except", " ", "C", ":", "\n        ", "print", "(", "\"C\"", ")", "\n    ", "except", " ", "B", ":", "\n        ", "print", "(", "\"B\"", ")", "\n", "\n", "import", " ", "sys", "\n\n", "try", ":", "\n    ", "f", " ", "=", " ", "open", "(", "'myfile.txt'", ")", "\n    ", "s", " ", "=", " ", "f", ".", "readline", "()", "\n    ", "i", " ", "=", " ", "int", "(", "s", ".", "strip", "())", "\n", "except", " ", "OSError", " ", "as", " ", "err", ":", "\n    ", "print", "(", "\"OS error: ", "{0}", "\"", ".", "format", "(", "err", "))", "\n", "except", " ", "ValueError", ":", "\n    ", "print", "(", "\"Could not convert data to an integer.\"", ")", "\n", "except", ":", "\n    ", "print", "(", "\"Unexpected error:\"", ",", " ", "sys", ".", "exc_info", "()[", "0", "])", "\n    ", "raise", "\n", "\n", "for", " ", "arg", " ", "in", " ", "sys", ".", "argv", "[", "1", ":]:", "\n    ", "try", ":", "\n        ", "f", " ", "=", " ", "open", "(", "arg", ",", " ", "'r'", ")", "\n    ", "except", " ", "OSError", ":", "\n        ", "print", "(", "'cannot open'", ",", " ", "arg", ")", "\n    ", "else", ":", "\n        ", "print", "(", "arg", ",", " ", "'has'", ",", " ", "len", "(", "f", ".", "readlines", "()),", " ", "'lines'", ")", "\n        ", "f", ".", "close", "()", "\n", "\n", ">>> ", "try", ":", "\n", "... ", "    ", "raise", " ", "Exception", "(", "'spam'", ",", " ", "'eggs'", ")", "\n", "... ", "except", " ", "Exception", " ", "as", " ", "inst", ":", "\n", "... ", "    ", "print", "(", "type", "(", "inst", "))", "    ", "# the exception instance", "\n", "... ", "    ", "print", "(", "inst", ".", "args", ")", "     ", "# arguments stored in .args", "\n", "... ", "    ", "print", "(", "inst", ")", "          ", "# __str__ allows args to be printed directly,", "\n", "... ", "                         ", "# but may be overridden in exception subclasses", "\n", "... ", "    ", "x", ",", " ", "y", " ", "=", " ", "inst", ".", "args", "     ", "# unpack args", "\n", "... ", "    ", "print", "(", "'x ='", ",", " ", "x", ")", "\n", "... ", "    ", "print", "(", "'y ='", ",", " ", "y", ")", "\n", "...", "\n", "<class 'Exception'>", "\n", "('spam', 'eggs')", "\n", "('spam', 'eggs')", "\n", "x = spam", "\n", "y = eggs", "\n", "\n", ">>> ", "def", " ", "this_fails", "():", "\n", "... ", "    ", "x", " ", "=", " ", "1", "/", "0", "\n", "...", "\n", ">>> ", "try", ":", "\n", "... ", "    ", "this_fails", "()", "\n", "... ", "except", " ", "ZeroDivisionError", " ", "as", " ", "err", ":", "\n", "... ", "    ", "print", "(", "'Handling run-time error:'", ",", " ", "err", ")", "\n", "...", "\n", "Handling run-time error: division by zero", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/errors.html", "Language": "Python", "M_Title": "8. Errors and Exceptions", "M_Desc": ["Until now error messages haven\u2019t been more than mentioned, but if you have tried\nout the examples you have probably seen some.  There are (at least) two\ndistinguishable kinds of errors: ", "syntax errors", " and ", "exceptions", "."], "M_Code": [], "L2_Title": "8.4. Raising Exceptions", "L2_Desc": ["The ", "raise", " statement allows the programmer to force a specified\nexception to occur. For example:", "The sole argument to ", "raise", " indicates the exception to be raised.\nThis must be either an exception instance or an exception class (a class that\nderives from ", "Exception", ").  If an exception class is passed, it will\nbe implicitly instantiated by calling its constructor with no arguments:", "If you need to determine whether an exception was raised but don\u2019t intend to\nhandle it, a simpler form of the ", "raise", " statement allows you to\nre-raise the exception:"], "L2_Code": [">>> ", "raise", " ", "NameError", "(", "'HiThere'", ")", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "1", ", in ", "<module>", "\n", "NameError", ": ", "HiThere", "\n", "\n", "raise", " ", "ValueError", "  ", "# shorthand for 'raise ValueError()'", "\n", "\n", ">>> ", "try", ":", "\n", "... ", "    ", "raise", " ", "NameError", "(", "'HiThere'", ")", "\n", "... ", "except", " ", "NameError", ":", "\n", "... ", "    ", "print", "(", "'An exception flew by!'", ")", "\n", "... ", "    ", "raise", "\n", "...", "\n", "An exception flew by!", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "2", ", in ", "<module>", "\n", "NameError", ": ", "HiThere", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/errors.html", "Language": "Python", "M_Title": "8. Errors and Exceptions", "M_Desc": ["Until now error messages haven\u2019t been more than mentioned, but if you have tried\nout the examples you have probably seen some.  There are (at least) two\ndistinguishable kinds of errors: ", "syntax errors", " and ", "exceptions", "."], "M_Code": [], "L2_Title": "8.5. User-defined Exceptions", "L2_Desc": ["Programs may name their own exceptions by creating a new exception class (see\n", "Classes", " for more about Python classes).  Exceptions should typically\nbe derived from the ", "Exception", " class, either directly or indirectly.", "Exception classes can be defined which do anything any other class can do, but\nare usually kept simple, often only offering a number of attributes that allow\ninformation about the error to be extracted by handlers for the exception.  When\ncreating a module that can raise several distinct errors, a common practice is\nto create a base class for exceptions defined by that module, and subclass that\nto create specific exception classes for different error conditions:", "Most exceptions are defined with names that end in \u201cError,\u201d similar to the\nnaming of the standard exceptions.", "Many standard modules define their own exceptions to report errors that may\noccur in functions they define.  More information on classes is presented in\nchapter ", "Classes", "."], "L2_Code": ["class", " ", "Error", "(", "Exception", "):", "\n    ", "\"\"\"Base class for exceptions in this module.\"\"\"", "\n    ", "pass", "\n\n", "class", " ", "InputError", "(", "Error", "):", "\n    ", "\"\"\"Exception raised for errors in the input.", "\n\n", "    Attributes:", "\n", "        expression -- input expression in which the error occurred", "\n", "        message -- explanation of the error", "\n", "    \"\"\"", "\n\n    ", "def", " ", "__init__", "(", "self", ",", " ", "expression", ",", " ", "message", "):", "\n        ", "self", ".", "expression", " ", "=", " ", "expression", "\n        ", "self", ".", "message", " ", "=", " ", "message", "\n\n", "class", " ", "TransitionError", "(", "Error", "):", "\n    ", "\"\"\"Raised when an operation attempts a state transition that's not", "\n", "    allowed.", "\n\n", "    Attributes:", "\n", "        previous -- state at beginning of transition", "\n", "        next -- attempted new state", "\n", "        message -- explanation of why the specific transition is not allowed", "\n", "    \"\"\"", "\n\n    ", "def", " ", "__init__", "(", "self", ",", " ", "previous", ",", " ", "next", ",", " ", "message", "):", "\n        ", "self", ".", "previous", " ", "=", " ", "previous", "\n        ", "self", ".", "next", " ", "=", " ", "next", "\n        ", "self", ".", "message", " ", "=", " ", "message", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/errors.html", "Language": "Python", "M_Title": "8. Errors and Exceptions", "M_Desc": ["Until now error messages haven\u2019t been more than mentioned, but if you have tried\nout the examples you have probably seen some.  There are (at least) two\ndistinguishable kinds of errors: ", "syntax errors", " and ", "exceptions", "."], "M_Code": [], "L2_Title": "8.6. Defining Clean-up Actions", "L2_Desc": ["The ", "try", " statement has another optional clause which is intended to\ndefine clean-up actions that must be executed under all circumstances.  For\nexample:", "A ", "finally clause", " is always executed before leaving the ", "try", "\nstatement, whether an exception has occurred or not. When an exception has\noccurred in the ", "try", " clause and has not been handled by an\n", "except", " clause (or it has occurred in an ", "except", " or\n", "else", " clause), it is re-raised after the ", "finally", " clause has\nbeen executed.  The ", "finally", " clause is also executed \u201con the way out\u201d\nwhen any other clause of the ", "try", " statement is left via a\n", "break", ", ", "continue", " or ", "return", " statement.  A more\ncomplicated example:", "As you can see, the ", "finally", " clause is executed in any event.  The\n", "TypeError", " raised by dividing two strings is not handled by the\n", "except", " clause and therefore re-raised after the ", "finally", "\nclause has been executed.", "In real world applications, the ", "finally", " clause is useful for\nreleasing external resources (such as files or network connections), regardless\nof whether the use of the resource was successful."], "L2_Code": [">>> ", "try", ":", "\n", "... ", "    ", "raise", " ", "KeyboardInterrupt", "\n", "... ", "finally", ":", "\n", "... ", "    ", "print", "(", "'Goodbye, world!'", ")", "\n", "...", "\n", "Goodbye, world!", "\n", "KeyboardInterrupt", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "2", ", in ", "<module>", "\n", "\n", ">>> ", "def", " ", "divide", "(", "x", ",", " ", "y", "):", "\n", "... ", "    ", "try", ":", "\n", "... ", "        ", "result", " ", "=", " ", "x", " ", "/", " ", "y", "\n", "... ", "    ", "except", " ", "ZeroDivisionError", ":", "\n", "... ", "        ", "print", "(", "\"division by zero!\"", ")", "\n", "... ", "    ", "else", ":", "\n", "... ", "        ", "print", "(", "\"result is\"", ",", " ", "result", ")", "\n", "... ", "    ", "finally", ":", "\n", "... ", "        ", "print", "(", "\"executing finally clause\"", ")", "\n", "...", "\n", ">>> ", "divide", "(", "2", ",", " ", "1", ")", "\n", "result is 2.0", "\n", "executing finally clause", "\n", ">>> ", "divide", "(", "2", ",", " ", "0", ")", "\n", "division by zero!", "\n", "executing finally clause", "\n", ">>> ", "divide", "(", "\"2\"", ",", " ", "\"1\"", ")", "\n", "executing finally clause", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "1", ", in ", "<module>", "\n  File ", "\"<stdin>\"", ", line ", "3", ", in ", "divide", "\n", "TypeError", ": ", "unsupported operand type(s) for /: 'str' and 'str'", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/errors.html", "Language": "Python", "M_Title": "8. Errors and Exceptions", "M_Desc": ["Until now error messages haven\u2019t been more than mentioned, but if you have tried\nout the examples you have probably seen some.  There are (at least) two\ndistinguishable kinds of errors: ", "syntax errors", " and ", "exceptions", "."], "M_Code": [], "L2_Title": "8.7. Predefined Clean-up Actions", "L2_Desc": ["Some objects define standard clean-up actions to be undertaken when the object\nis no longer needed, regardless of whether or not the operation using the object\nsucceeded or failed. Look at the following example, which tries to open a file\nand print its contents to the screen.", "The problem with this code is that it leaves the file open for an indeterminate\namount of time after this part of the code has finished executing.\nThis is not an issue in simple scripts, but can be a problem for larger\napplications. The ", "with", " statement allows objects like files to be\nused in a way that ensures they are always cleaned up promptly and correctly.", "After the statement is executed, the file ", "f", " is always closed, even if a\nproblem was encountered while processing the lines. Objects which, like files,\nprovide predefined clean-up actions will indicate this in their documentation."], "L2_Code": ["for", " ", "line", " ", "in", " ", "open", "(", "\"myfile.txt\"", "):", "\n    ", "print", "(", "line", ",", " ", "end", "=", "\"\"", ")", "\n", "\n", "with", " ", "open", "(", "\"myfile.txt\"", ")", " ", "as", " ", "f", ":", "\n    ", "for", " ", "line", " ", "in", " ", "f", ":", "\n        ", "print", "(", "line", ",", " ", "end", "=", "\"\"", ")", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/inputoutput.html", "Language": "Python", "M_Title": "7. Input and Output", "M_Desc": ["There are several ways to present the output of a program; data can be printed\nin a human-readable form, or written to a file for future use. This chapter will\ndiscuss some of the possibilities."], "M_Code": [], "L2_Title": "7.1. Fancier Output Formatting", "L2_Desc": ["So far we\u2019ve encountered two ways of writing values: ", "expression statements", " and\nthe ", "print()", " function.  (A third way is using the ", "write()", " method\nof file objects; the standard output file can be referenced as ", "sys.stdout", ".\nSee the Library Reference for more information on this.)", "Often you\u2019ll want more control over the formatting of your output than simply\nprinting space-separated values. There are several ways to format output.", "When you don\u2019t need fancy output but just want a quick display of some\nvariables for debugging purposes, you can convert any value to a string with\nthe ", "repr()", " or ", "str()", " functions.", "The ", "str()", " function is meant to return representations of values which are\nfairly human-readable, while ", "repr()", " is meant to generate representations\nwhich can be read by the interpreter (or will force a ", "SyntaxError", " if\nthere is no equivalent syntax).  For objects which don\u2019t have a particular\nrepresentation for human consumption, ", "str()", " will return the same value as\n", "repr()", ".  Many values, such as numbers or structures like lists and\ndictionaries, have the same representation using either function.  Strings, in\nparticular, have two distinct representations.", "Some examples:", "The ", "string", " module contains a ", "Template", " class that offers\nyet another way to substitute values into strings, using placeholders like\n", "$x", " and replacing them with values from a dictionary, but offers much less\ncontrol of the formatting."], "L2_Code": [">>> ", "s", " ", "=", " ", "'Hello, world.'", "\n", ">>> ", "str", "(", "s", ")", "\n", "'Hello, world.'", "\n", ">>> ", "repr", "(", "s", ")", "\n", "\"'Hello, world.'\"", "\n", ">>> ", "str", "(", "1", "/", "7", ")", "\n", "'0.14285714285714285'", "\n", ">>> ", "x", " ", "=", " ", "10", " ", "*", " ", "3.25", "\n", ">>> ", "y", " ", "=", " ", "200", " ", "*", " ", "200", "\n", ">>> ", "s", " ", "=", " ", "'The value of x is '", " ", "+", " ", "repr", "(", "x", ")", " ", "+", " ", "', and y is '", " ", "+", " ", "repr", "(", "y", ")", " ", "+", " ", "'...'", "\n", ">>> ", "print", "(", "s", ")", "\n", "The value of x is 32.5, and y is 40000...", "\n", ">>> ", "# The repr() of a string adds string quotes and backslashes:", "\n", "... ", "hello", " ", "=", " ", "'hello, world", "\\n", "'", "\n", ">>> ", "hellos", " ", "=", " ", "repr", "(", "hello", ")", "\n", ">>> ", "print", "(", "hellos", ")", "\n", "'hello, world\\n'", "\n", ">>> ", "# The argument to repr() may be any Python object:", "\n", "... ", "repr", "((", "x", ",", " ", "y", ",", " ", "(", "'spam'", ",", " ", "'eggs'", ")))", "\n", "\"(32.5, 40000, ('spam', 'eggs'))\"", "\n", "\n"], "L3_Title": "7.1.1. Formatted String Literals", "L3_Desc": ["Formatted string literals", " (also called f-strings for\nshort) let you include the value of Python expressions inside a string by\nprefixing the string with ", "f", " or ", "F", " and writing expressions as\n", "{expression}", ".", "An optional format specifier can follow the expression. This allows greater\ncontrol over how the value is formatted. The following example rounds pi to\nthree places after the decimal:", "Passing an integer after the ", "':'", " will cause that field to be a minimum\nnumber of characters wide.  This is useful for making columns line up.", "Other modifiers can be used to convert the value before it is formatted.\n", "'!a'", " applies ", "ascii()", ", ", "'!s'", " applies ", "str()", ", and ", "'!r'", "\napplies ", "repr()", ":", "For a reference on these format specifications, see\nthe reference guide for the ", "Format Specification Mini-Language", "."], "L3_Code": [">>> ", "import", " ", "math", "\n", ">>> ", "print", "(", "f", "'The value of pi is approximately ", "{math.pi:.3f}", ".'", ")", "\n", "\n", ">>> ", "table", " ", "=", " ", "{", "'Sjoerd'", ":", " ", "4127", ",", " ", "'Jack'", ":", " ", "4098", ",", " ", "'Dcab'", ":", " ", "7678", "}", "\n", ">>> ", "for", " ", "name", ",", " ", "phone", " ", "in", " ", "table", ".", "items", "():", "\n", "... ", "    ", "print", "(", "f", "'", "{name:10}", " ==> ", "{phone:10d}", "'", ")", "\n", "...", "\n", "Sjoerd     ==>       4127", "\n", "Jack       ==>       4098", "\n", "Dcab       ==>       7678", "\n", "\n", ">>> ", "animals", " ", "=", " ", "'eels'", "\n", ">>> ", "print", "(", "f", "'My hovercraft is full of ", "{animals}", ".'", ")", "\n", "My hovercraft is full of eels.", "\n", ">>> ", "print", "(", "f", "'My hovercraft is full of {animals !r}.'", ")", "\n", "My hovercraft is full of 'eels'.", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/inputoutput.html", "Language": "Python", "M_Title": "7. Input and Output", "M_Desc": ["There are several ways to present the output of a program; data can be printed\nin a human-readable form, or written to a file for future use. This chapter will\ndiscuss some of the possibilities."], "M_Code": [], "L2_Title": "7.1. Fancier Output Formatting", "L2_Desc": ["So far we\u2019ve encountered two ways of writing values: ", "expression statements", " and\nthe ", "print()", " function.  (A third way is using the ", "write()", " method\nof file objects; the standard output file can be referenced as ", "sys.stdout", ".\nSee the Library Reference for more information on this.)", "Often you\u2019ll want more control over the formatting of your output than simply\nprinting space-separated values. There are several ways to format output.", "When you don\u2019t need fancy output but just want a quick display of some\nvariables for debugging purposes, you can convert any value to a string with\nthe ", "repr()", " or ", "str()", " functions.", "The ", "str()", " function is meant to return representations of values which are\nfairly human-readable, while ", "repr()", " is meant to generate representations\nwhich can be read by the interpreter (or will force a ", "SyntaxError", " if\nthere is no equivalent syntax).  For objects which don\u2019t have a particular\nrepresentation for human consumption, ", "str()", " will return the same value as\n", "repr()", ".  Many values, such as numbers or structures like lists and\ndictionaries, have the same representation using either function.  Strings, in\nparticular, have two distinct representations.", "Some examples:", "The ", "string", " module contains a ", "Template", " class that offers\nyet another way to substitute values into strings, using placeholders like\n", "$x", " and replacing them with values from a dictionary, but offers much less\ncontrol of the formatting."], "L2_Code": [">>> ", "s", " ", "=", " ", "'Hello, world.'", "\n", ">>> ", "str", "(", "s", ")", "\n", "'Hello, world.'", "\n", ">>> ", "repr", "(", "s", ")", "\n", "\"'Hello, world.'\"", "\n", ">>> ", "str", "(", "1", "/", "7", ")", "\n", "'0.14285714285714285'", "\n", ">>> ", "x", " ", "=", " ", "10", " ", "*", " ", "3.25", "\n", ">>> ", "y", " ", "=", " ", "200", " ", "*", " ", "200", "\n", ">>> ", "s", " ", "=", " ", "'The value of x is '", " ", "+", " ", "repr", "(", "x", ")", " ", "+", " ", "', and y is '", " ", "+", " ", "repr", "(", "y", ")", " ", "+", " ", "'...'", "\n", ">>> ", "print", "(", "s", ")", "\n", "The value of x is 32.5, and y is 40000...", "\n", ">>> ", "# The repr() of a string adds string quotes and backslashes:", "\n", "... ", "hello", " ", "=", " ", "'hello, world", "\\n", "'", "\n", ">>> ", "hellos", " ", "=", " ", "repr", "(", "hello", ")", "\n", ">>> ", "print", "(", "hellos", ")", "\n", "'hello, world\\n'", "\n", ">>> ", "# The argument to repr() may be any Python object:", "\n", "... ", "repr", "((", "x", ",", " ", "y", ",", " ", "(", "'spam'", ",", " ", "'eggs'", ")))", "\n", "\"(32.5, 40000, ('spam', 'eggs'))\"", "\n", "\n"], "L3_Title": "7.1.2. The String format() Method", "L3_Desc": ["Basic usage of the ", "str.format()", " method looks like this:", "The brackets and characters within them (called format fields) are replaced with\nthe objects passed into the ", "str.format()", " method.  A number in the\nbrackets can be used to refer to the position of the object passed into the\n", "str.format()", " method.", "If keyword arguments are used in the ", "str.format()", " method, their values\nare referred to by using the name of the argument.", "Positional and keyword arguments can be arbitrarily combined:", "If you have a really long format string that you don\u2019t want to split up, it\nwould be nice if you could reference the variables to be formatted by name\ninstead of by position.  This can be done by simply passing the dict and using\nsquare brackets ", "'[]'", " to access the keys", "This could also be done by passing the table as keyword arguments with the \u2018**\u2019\nnotation.", "This is particularly useful in combination with the built-in function\n", "vars()", ", which returns a dictionary containing all local variables.", "As an example, the following lines produce a tidily-aligned\nset of columns giving integers and their squares and cubes:", "For a complete overview of string formatting with ", "str.format()", ", see\n", "Format String Syntax", "."], "L3_Code": [">>> ", "print", "(", "'We are the ", "{}", " who say \"", "{}", "!\"'", ".", "format", "(", "'knights'", ",", " ", "'Ni'", "))", "\n", "We are the knights who say \"Ni!\"", "\n", "\n", ">>> ", "print", "(", "'", "{0}", " and ", "{1}", "'", ".", "format", "(", "'spam'", ",", " ", "'eggs'", "))", "\n", "spam and eggs", "\n", ">>> ", "print", "(", "'", "{1}", " and ", "{0}", "'", ".", "format", "(", "'spam'", ",", " ", "'eggs'", "))", "\n", "eggs and spam", "\n", "\n", ">>> ", "print", "(", "'This ", "{food}", " is ", "{adjective}", ".'", ".", "format", "(", "\n", "... ", "      ", "food", "=", "'spam'", ",", " ", "adjective", "=", "'absolutely horrible'", "))", "\n", "This spam is absolutely horrible.", "\n", "\n", ">>> ", "print", "(", "'The story of ", "{0}", ", ", "{1}", ", and ", "{other}", ".'", ".", "format", "(", "'Bill'", ",", " ", "'Manfred'", ",", "\n", "                                                       other='Georg'))", "\n", "The story of Bill, Manfred, and Georg.", "\n", "\n", ">>> ", "table", " ", "=", " ", "{", "'Sjoerd'", ":", " ", "4127", ",", " ", "'Jack'", ":", " ", "4098", ",", " ", "'Dcab'", ":", " ", "8637678", "}", "\n", ">>> ", "print", "(", "'Jack: ", "{0[Jack]:d}", "; Sjoerd: ", "{0[Sjoerd]:d}", "; '", "\n", "... ", "      ", "'Dcab: ", "{0[Dcab]:d}", "'", ".", "format", "(", "table", "))", "\n", "Jack: 4098; Sjoerd: 4127; Dcab: 8637678", "\n", "\n", ">>> ", "table", " ", "=", " ", "{", "'Sjoerd'", ":", " ", "4127", ",", " ", "'Jack'", ":", " ", "4098", ",", " ", "'Dcab'", ":", " ", "8637678", "}", "\n", ">>> ", "print", "(", "'Jack: ", "{Jack:d}", "; Sjoerd: ", "{Sjoerd:d}", "; Dcab: ", "{Dcab:d}", "'", ".", "format", "(", "**", "table", "))", "\n", "Jack: 4098; Sjoerd: 4127; Dcab: 8637678", "\n", "\n", ">>> ", "for", " ", "x", " ", "in", " ", "range", "(", "1", ",", " ", "11", "):", "\n", "... ", "    ", "print", "(", "'", "{0:2d}", " ", "{1:3d}", " ", "{2:4d}", "'", ".", "format", "(", "x", ",", " ", "x", "*", "x", ",", " ", "x", "*", "x", "*", "x", "))", "\n", "...", "\n", " 1   1    1", "\n", " 2   4    8", "\n", " 3   9   27", "\n", " 4  16   64", "\n", " 5  25  125", "\n", " 6  36  216", "\n", " 7  49  343", "\n", " 8  64  512", "\n", " 9  81  729", "\n", "10 100 1000", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/inputoutput.html", "Language": "Python", "M_Title": "7. Input and Output", "M_Desc": ["There are several ways to present the output of a program; data can be printed\nin a human-readable form, or written to a file for future use. This chapter will\ndiscuss some of the possibilities."], "M_Code": [], "L2_Title": "7.1. Fancier Output Formatting", "L2_Desc": ["So far we\u2019ve encountered two ways of writing values: ", "expression statements", " and\nthe ", "print()", " function.  (A third way is using the ", "write()", " method\nof file objects; the standard output file can be referenced as ", "sys.stdout", ".\nSee the Library Reference for more information on this.)", "Often you\u2019ll want more control over the formatting of your output than simply\nprinting space-separated values. There are several ways to format output.", "When you don\u2019t need fancy output but just want a quick display of some\nvariables for debugging purposes, you can convert any value to a string with\nthe ", "repr()", " or ", "str()", " functions.", "The ", "str()", " function is meant to return representations of values which are\nfairly human-readable, while ", "repr()", " is meant to generate representations\nwhich can be read by the interpreter (or will force a ", "SyntaxError", " if\nthere is no equivalent syntax).  For objects which don\u2019t have a particular\nrepresentation for human consumption, ", "str()", " will return the same value as\n", "repr()", ".  Many values, such as numbers or structures like lists and\ndictionaries, have the same representation using either function.  Strings, in\nparticular, have two distinct representations.", "Some examples:", "The ", "string", " module contains a ", "Template", " class that offers\nyet another way to substitute values into strings, using placeholders like\n", "$x", " and replacing them with values from a dictionary, but offers much less\ncontrol of the formatting."], "L2_Code": [">>> ", "s", " ", "=", " ", "'Hello, world.'", "\n", ">>> ", "str", "(", "s", ")", "\n", "'Hello, world.'", "\n", ">>> ", "repr", "(", "s", ")", "\n", "\"'Hello, world.'\"", "\n", ">>> ", "str", "(", "1", "/", "7", ")", "\n", "'0.14285714285714285'", "\n", ">>> ", "x", " ", "=", " ", "10", " ", "*", " ", "3.25", "\n", ">>> ", "y", " ", "=", " ", "200", " ", "*", " ", "200", "\n", ">>> ", "s", " ", "=", " ", "'The value of x is '", " ", "+", " ", "repr", "(", "x", ")", " ", "+", " ", "', and y is '", " ", "+", " ", "repr", "(", "y", ")", " ", "+", " ", "'...'", "\n", ">>> ", "print", "(", "s", ")", "\n", "The value of x is 32.5, and y is 40000...", "\n", ">>> ", "# The repr() of a string adds string quotes and backslashes:", "\n", "... ", "hello", " ", "=", " ", "'hello, world", "\\n", "'", "\n", ">>> ", "hellos", " ", "=", " ", "repr", "(", "hello", ")", "\n", ">>> ", "print", "(", "hellos", ")", "\n", "'hello, world\\n'", "\n", ">>> ", "# The argument to repr() may be any Python object:", "\n", "... ", "repr", "((", "x", ",", " ", "y", ",", " ", "(", "'spam'", ",", " ", "'eggs'", ")))", "\n", "\"(32.5, 40000, ('spam', 'eggs'))\"", "\n", "\n"], "L3_Title": "7.1.3. Manual String Formatting", "L3_Desc": ["Here\u2019s the same table of squares and cubes, formatted manually:", "(Note that the one space between each column was added by the\nway ", "print()", " works: it always adds spaces between its arguments.)", "The ", "str.rjust()", " method of string objects right-justifies a string in a\nfield of a given width by padding it with spaces on the left. There are\nsimilar methods ", "str.ljust()", " and ", "str.center()", ". These methods do\nnot write anything, they just return a new string. If the input string is too\nlong, they don\u2019t truncate it, but return it unchanged; this will mess up your\ncolumn lay-out but that\u2019s usually better than the alternative, which would be\nlying about a value. (If you really want truncation you can always add a\nslice operation, as in ", "x.ljust(n)[:n]", ".)", "There is another method, ", "str.zfill()", ", which pads a numeric string on the\nleft with zeros.  It understands about plus and minus signs:"], "L3_Code": [">>> ", "for", " ", "x", " ", "in", " ", "range", "(", "1", ",", " ", "11", "):", "\n", "... ", "    ", "print", "(", "repr", "(", "x", ")", ".", "rjust", "(", "2", "),", " ", "repr", "(", "x", "*", "x", ")", ".", "rjust", "(", "3", "),", " ", "end", "=", "' '", ")", "\n", "... ", "    ", "# Note use of 'end' on previous line", "\n", "... ", "    ", "print", "(", "repr", "(", "x", "*", "x", "*", "x", ")", ".", "rjust", "(", "4", "))", "\n", "...", "\n", " 1   1    1", "\n", " 2   4    8", "\n", " 3   9   27", "\n", " 4  16   64", "\n", " 5  25  125", "\n", " 6  36  216", "\n", " 7  49  343", "\n", " 8  64  512", "\n", " 9  81  729", "\n", "10 100 1000", "\n", "\n", ">>> ", "'12'", ".", "zfill", "(", "5", ")", "\n", "'00012'", "\n", ">>> ", "'-3.14'", ".", "zfill", "(", "7", ")", "\n", "'-003.14'", "\n", ">>> ", "'3.14159265359'", ".", "zfill", "(", "5", ")", "\n", "'3.14159265359'", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/inputoutput.html", "Language": "Python", "M_Title": "7. Input and Output", "M_Desc": ["There are several ways to present the output of a program; data can be printed\nin a human-readable form, or written to a file for future use. This chapter will\ndiscuss some of the possibilities."], "M_Code": [], "L2_Title": "7.1. Fancier Output Formatting", "L2_Desc": ["So far we\u2019ve encountered two ways of writing values: ", "expression statements", " and\nthe ", "print()", " function.  (A third way is using the ", "write()", " method\nof file objects; the standard output file can be referenced as ", "sys.stdout", ".\nSee the Library Reference for more information on this.)", "Often you\u2019ll want more control over the formatting of your output than simply\nprinting space-separated values. There are several ways to format output.", "When you don\u2019t need fancy output but just want a quick display of some\nvariables for debugging purposes, you can convert any value to a string with\nthe ", "repr()", " or ", "str()", " functions.", "The ", "str()", " function is meant to return representations of values which are\nfairly human-readable, while ", "repr()", " is meant to generate representations\nwhich can be read by the interpreter (or will force a ", "SyntaxError", " if\nthere is no equivalent syntax).  For objects which don\u2019t have a particular\nrepresentation for human consumption, ", "str()", " will return the same value as\n", "repr()", ".  Many values, such as numbers or structures like lists and\ndictionaries, have the same representation using either function.  Strings, in\nparticular, have two distinct representations.", "Some examples:", "The ", "string", " module contains a ", "Template", " class that offers\nyet another way to substitute values into strings, using placeholders like\n", "$x", " and replacing them with values from a dictionary, but offers much less\ncontrol of the formatting."], "L2_Code": [">>> ", "s", " ", "=", " ", "'Hello, world.'", "\n", ">>> ", "str", "(", "s", ")", "\n", "'Hello, world.'", "\n", ">>> ", "repr", "(", "s", ")", "\n", "\"'Hello, world.'\"", "\n", ">>> ", "str", "(", "1", "/", "7", ")", "\n", "'0.14285714285714285'", "\n", ">>> ", "x", " ", "=", " ", "10", " ", "*", " ", "3.25", "\n", ">>> ", "y", " ", "=", " ", "200", " ", "*", " ", "200", "\n", ">>> ", "s", " ", "=", " ", "'The value of x is '", " ", "+", " ", "repr", "(", "x", ")", " ", "+", " ", "', and y is '", " ", "+", " ", "repr", "(", "y", ")", " ", "+", " ", "'...'", "\n", ">>> ", "print", "(", "s", ")", "\n", "The value of x is 32.5, and y is 40000...", "\n", ">>> ", "# The repr() of a string adds string quotes and backslashes:", "\n", "... ", "hello", " ", "=", " ", "'hello, world", "\\n", "'", "\n", ">>> ", "hellos", " ", "=", " ", "repr", "(", "hello", ")", "\n", ">>> ", "print", "(", "hellos", ")", "\n", "'hello, world\\n'", "\n", ">>> ", "# The argument to repr() may be any Python object:", "\n", "... ", "repr", "((", "x", ",", " ", "y", ",", " ", "(", "'spam'", ",", " ", "'eggs'", ")))", "\n", "\"(32.5, 40000, ('spam', 'eggs'))\"", "\n", "\n"], "L3_Title": "7.1.4. Old string formatting", "L3_Desc": ["The ", "%", " operator can also be used for string formatting. It interprets the\nleft argument much like a ", "sprintf()", "-style format string to be applied\nto the right argument, and returns the string resulting from this formatting\noperation. For example:", "More information can be found in the ", "printf-style String Formatting", " section."], "L3_Code": [">>> ", "import", " ", "math", "\n", ">>> ", "print", "(", "'The value of pi is approximately ", "%5.3f", ".'", " ", "%", " ", "math", ".", "pi", ")", "\n", "The value of pi is approximately 3.142.", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/inputoutput.html", "Language": "Python", "M_Title": "7. Input and Output", "M_Desc": ["There are several ways to present the output of a program; data can be printed\nin a human-readable form, or written to a file for future use. This chapter will\ndiscuss some of the possibilities."], "M_Code": [], "L2_Title": "7.2. Reading and Writing Files", "L2_Desc": ["open()", " returns a ", "file object", ", and is most commonly used with\ntwo arguments: ", "open(filename,", " ", "mode)", ".", "The first argument is a string containing the filename.  The second argument is\nanother string containing a few characters describing the way in which the file\nwill be used.  ", "mode", " can be ", "'r'", " when the file will only be read, ", "'w'", "\nfor only writing (an existing file with the same name will be erased), and\n", "'a'", " opens the file for appending; any data written to the file is\nautomatically added to the end.  ", "'r+'", " opens the file for both reading and\nwriting. The ", "mode", " argument is optional; ", "'r'", " will be assumed if it\u2019s\nomitted.", "Normally, files are opened in ", "text mode", ", that means, you read and write\nstrings from and to the file, which are encoded in a specific encoding. If\nencoding is not specified, the default is platform dependent (see\n", "open()", "). ", "'b'", " appended to the mode opens the file in\n", "binary mode", ": now the data is read and written in the form of bytes\nobjects.  This mode should be used for all files that don\u2019t contain text.", "In text mode, the default when reading is to convert platform-specific line\nendings (", "\\n", " on Unix, ", "\\r\\n", " on Windows) to just ", "\\n", ".  When writing in\ntext mode, the default is to convert occurrences of ", "\\n", " back to\nplatform-specific line endings.  This behind-the-scenes modification\nto file data is fine for text files, but will corrupt binary data like that in\n", "JPEG", " or ", "EXE", " files.  Be very careful to use binary mode when\nreading and writing such files.", "It is good practice to use the ", "with", " keyword when dealing\nwith file objects.  The advantage is that the file is properly closed\nafter its suite finishes, even if an exception is raised at some\npoint.  Using ", "with", " is also much shorter than writing\nequivalent ", "try", "-", "finally", " blocks:", "If you\u2019re not using the ", "with", " keyword, then you should call\n", "f.close()", " to close the file and immediately free up any system\nresources used by it. If you don\u2019t explicitly close a file, Python\u2019s\ngarbage collector will eventually destroy the object and close the\nopen file for you, but the file may stay open for a while.  Another\nrisk is that different Python implementations will do this clean-up at\ndifferent times.", "After a file object is closed, either by a ", "with", " statement\nor by calling ", "f.close()", ", attempts to use the file object will\nautomatically fail."], "L2_Code": [">>> ", "f", " ", "=", " ", "open", "(", "'workfile'", ",", " ", "'w'", ")", "\n", "\n", ">>> ", "with", " ", "open", "(", "'workfile'", ")", " ", "as", " ", "f", ":", "\n", "... ", "    ", "read_data", " ", "=", " ", "f", ".", "read", "()", "\n", ">>> ", "f", ".", "closed", "\n", "True", "\n", "\n", ">>> ", "f", ".", "close", "()", "\n", ">>> ", "f", ".", "read", "()", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "1", ", in ", "<module>", "\n", "ValueError", ": ", "I/O operation on closed file.", "\n", "\n"], "L3_Title": "7.2.1. Methods of File Objects", "L3_Desc": ["The rest of the examples in this section will assume that a file object called\n", "f", " has already been created.", "To read a file\u2019s contents, call ", "f.read(size)", ", which reads some quantity of\ndata and returns it as a string (in text mode) or bytes object (in binary mode).\n", "size", " is an optional numeric argument.  When ", "size", " is omitted or negative, the\nentire contents of the file will be read and returned; it\u2019s your problem if the\nfile is twice as large as your machine\u2019s memory. Otherwise, at most ", "size", " bytes\nare read and returned.\nIf the end of the file has been reached, ", "f.read()", " will return an empty\nstring (", "''", ").", "f.readline()", " reads a single line from the file; a newline character (", "\\n", ")\nis left at the end of the string, and is only omitted on the last line of the\nfile if the file doesn\u2019t end in a newline.  This makes the return value\nunambiguous; if ", "f.readline()", " returns an empty string, the end of the file\nhas been reached, while a blank line is represented by ", "'\\n'", ", a string\ncontaining only a single newline.", "For reading lines from a file, you can loop over the file object. This is memory\nefficient, fast, and leads to simple code:", "If you want to read all the lines of a file in a list you can also use\n", "list(f)", " or ", "f.readlines()", ".", "f.write(string)", " writes the contents of ", "string", " to the file, returning\nthe number of characters written.", "Other types of objects need to be converted \u2013 either to a string (in text mode)\nor a bytes object (in binary mode) \u2013 before writing them:", "f.tell()", " returns an integer giving the file object\u2019s current position in the file\nrepresented as number of bytes from the beginning of the file when in binary mode and\nan opaque number when in text mode.", "To change the file object\u2019s position, use ", "f.seek(offset,", " ", "from_what)", ".  The position is computed\nfrom adding ", "offset", " to a reference point; the reference point is selected by\nthe ", "from_what", " argument.  A ", "from_what", " value of 0 measures from the beginning\nof the file, 1 uses the current file position, and 2 uses the end of the file as\nthe reference point.  ", "from_what", " can be omitted and defaults to 0, using the\nbeginning of the file as the reference point.", "In text files (those opened without a ", "b", " in the mode string), only seeks\nrelative to the beginning of the file are allowed (the exception being seeking\nto the very file end with ", "seek(0,", " ", "2)", ") and the only valid ", "offset", " values are\nthose returned from the ", "f.tell()", ", or zero. Any other ", "offset", " value produces\nundefined behaviour.", "File objects have some additional methods, such as ", "isatty()", " and\n", "truncate()", " which are less frequently used; consult the Library\nReference for a complete guide to file objects."], "L3_Code": [">>> ", "f", ".", "read", "()", "\n", "'This is the entire file.\\n'", "\n", ">>> ", "f", ".", "read", "()", "\n", "''", "\n", "\n", ">>> ", "f", ".", "readline", "()", "\n", "'This is the first line of the file.\\n'", "\n", ">>> ", "f", ".", "readline", "()", "\n", "'Second line of the file\\n'", "\n", ">>> ", "f", ".", "readline", "()", "\n", "''", "\n", "\n", ">>> ", "for", " ", "line", " ", "in", " ", "f", ":", "\n", "... ", "    ", "print", "(", "line", ",", " ", "end", "=", "''", ")", "\n", "...", "\n", "This is the first line of the file.", "\n", "Second line of the file", "\n", "\n", ">>> ", "f", ".", "write", "(", "'This is a test", "\\n", "'", ")", "\n", "15", "\n", "\n", ">>> ", "value", " ", "=", " ", "(", "'the answer'", ",", " ", "42", ")", "\n", ">>> ", "s", " ", "=", " ", "str", "(", "value", ")", "  ", "# convert the tuple to string", "\n", ">>> ", "f", ".", "write", "(", "s", ")", "\n", "18", "\n", "\n", ">>> ", "f", " ", "=", " ", "open", "(", "'workfile'", ",", " ", "'rb+'", ")", "\n", ">>> ", "f", ".", "write", "(", "b", "'0123456789abcdef'", ")", "\n", "16", "\n", ">>> ", "f", ".", "seek", "(", "5", ")", "      ", "# Go to the 6th byte in the file", "\n", "5", "\n", ">>> ", "f", ".", "read", "(", "1", ")", "\n", "b'5'", "\n", ">>> ", "f", ".", "seek", "(", "-", "3", ",", " ", "2", ")", "  ", "# Go to the 3rd byte before the end", "\n", "13", "\n", ">>> ", "f", ".", "read", "(", "1", ")", "\n", "b'd'", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/inputoutput.html", "Language": "Python", "M_Title": "7. Input and Output", "M_Desc": ["There are several ways to present the output of a program; data can be printed\nin a human-readable form, or written to a file for future use. This chapter will\ndiscuss some of the possibilities."], "M_Code": [], "L2_Title": "7.2. Reading and Writing Files", "L2_Desc": ["open()", " returns a ", "file object", ", and is most commonly used with\ntwo arguments: ", "open(filename,", " ", "mode)", ".", "The first argument is a string containing the filename.  The second argument is\nanother string containing a few characters describing the way in which the file\nwill be used.  ", "mode", " can be ", "'r'", " when the file will only be read, ", "'w'", "\nfor only writing (an existing file with the same name will be erased), and\n", "'a'", " opens the file for appending; any data written to the file is\nautomatically added to the end.  ", "'r+'", " opens the file for both reading and\nwriting. The ", "mode", " argument is optional; ", "'r'", " will be assumed if it\u2019s\nomitted.", "Normally, files are opened in ", "text mode", ", that means, you read and write\nstrings from and to the file, which are encoded in a specific encoding. If\nencoding is not specified, the default is platform dependent (see\n", "open()", "). ", "'b'", " appended to the mode opens the file in\n", "binary mode", ": now the data is read and written in the form of bytes\nobjects.  This mode should be used for all files that don\u2019t contain text.", "In text mode, the default when reading is to convert platform-specific line\nendings (", "\\n", " on Unix, ", "\\r\\n", " on Windows) to just ", "\\n", ".  When writing in\ntext mode, the default is to convert occurrences of ", "\\n", " back to\nplatform-specific line endings.  This behind-the-scenes modification\nto file data is fine for text files, but will corrupt binary data like that in\n", "JPEG", " or ", "EXE", " files.  Be very careful to use binary mode when\nreading and writing such files.", "It is good practice to use the ", "with", " keyword when dealing\nwith file objects.  The advantage is that the file is properly closed\nafter its suite finishes, even if an exception is raised at some\npoint.  Using ", "with", " is also much shorter than writing\nequivalent ", "try", "-", "finally", " blocks:", "If you\u2019re not using the ", "with", " keyword, then you should call\n", "f.close()", " to close the file and immediately free up any system\nresources used by it. If you don\u2019t explicitly close a file, Python\u2019s\ngarbage collector will eventually destroy the object and close the\nopen file for you, but the file may stay open for a while.  Another\nrisk is that different Python implementations will do this clean-up at\ndifferent times.", "After a file object is closed, either by a ", "with", " statement\nor by calling ", "f.close()", ", attempts to use the file object will\nautomatically fail."], "L2_Code": [">>> ", "f", " ", "=", " ", "open", "(", "'workfile'", ",", " ", "'w'", ")", "\n", "\n", ">>> ", "with", " ", "open", "(", "'workfile'", ")", " ", "as", " ", "f", ":", "\n", "... ", "    ", "read_data", " ", "=", " ", "f", ".", "read", "()", "\n", ">>> ", "f", ".", "closed", "\n", "True", "\n", "\n", ">>> ", "f", ".", "close", "()", "\n", ">>> ", "f", ".", "read", "()", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "1", ", in ", "<module>", "\n", "ValueError", ": ", "I/O operation on closed file.", "\n", "\n"], "L3_Title": "7.2.2. Saving structured data with ", "L3_Desc": ["Strings can easily be written to and read from a file.  Numbers take a bit more\neffort, since the ", "read()", " method only returns strings, which will have to\nbe passed to a function like ", "int()", ", which takes a string like ", "'123'", "\nand returns its numeric value 123.  When you want to save more complex data\ntypes like nested lists and dictionaries, parsing and serializing by hand\nbecomes complicated.", "Rather than having users constantly writing and debugging code to save\ncomplicated data types to files, Python allows you to use the popular data\ninterchange format called ", "JSON (JavaScript Object Notation)", ".  The standard module called ", "json", " can take Python\ndata hierarchies, and convert them to string representations; this process is\ncalled ", "serializing", ".  Reconstructing the data from the string representation\nis called ", "deserializing", ".  Between serializing and deserializing, the\nstring representing the object may have been stored in a file or data, or\nsent over a network connection to some distant machine.", "If you have an object ", "x", ", you can view its JSON string representation with a\nsimple line of code:", "Another variant of the ", "dumps()", " function, called ", "dump()", ",\nsimply serializes the object to a ", "text file", ".  So if ", "f", " is a\n", "text file", " object opened for writing, we can do this:", "To decode the object again, if ", "f", " is a ", "text file", " object which has\nbeen opened for reading:", "This simple serialization technique can handle lists and dictionaries, but\nserializing arbitrary class instances in JSON requires a bit of extra effort.\nThe reference for the ", "json", " module contains an explanation of this."], "L3_Code": [">>> ", "import", " ", "json", "\n", ">>> ", "json", ".", "dumps", "([", "1", ",", " ", "'simple'", ",", " ", "'list'", "])", "\n", "'[1, \"simple\", \"list\"]'", "\n", "\n", "json", ".", "dump", "(", "x", ",", " ", "f", ")", "\n", "\n", "x", " ", "=", " ", "json", ".", "load", "(", "f", ")", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/floatingpoint.html", "Language": "Python", "M_Title": "15. Floating Point Arithmetic:  Issues and Limitations", "M_Desc": ["Floating-point numbers are represented in computer hardware as base 2 (binary)\nfractions.  For example, the decimal fraction", "has value 1/10 + 2/100 + 5/1000, and in the same way the binary fraction", "has value 0/2 + 0/4 + 1/8.  These two fractions have identical values, the only\nreal difference being that the first is written in base 10 fractional notation,\nand the second in base 2.", "Unfortunately, most decimal fractions cannot be represented exactly as binary\nfractions.  A consequence is that, in general, the decimal floating-point\nnumbers you enter are only approximated by the binary floating-point numbers\nactually stored in the machine.", "The problem is easier to understand at first in base 10.  Consider the fraction\n1/3.  You can approximate that as a base 10 fraction:", "or, better,", "or, better,", "and so on.  No matter how many digits you\u2019re willing to write down, the result\nwill never be exactly 1/3, but will be an increasingly better approximation of\n1/3.", "In the same way, no matter how many base 2 digits you\u2019re willing to use, the\ndecimal value 0.1 cannot be represented exactly as a base 2 fraction.  In base\n2, 1/10 is the infinitely repeating fraction", "Stop at any finite number of bits, and you get an approximation.  On most\nmachines today, floats are approximated using a binary fraction with\nthe numerator using the first 53 bits starting with the most significant bit and\nwith the denominator as a power of two.  In the case of 1/10, the binary fraction\nis ", "3602879701896397", " ", "/", " ", "2", " ", "**", " ", "55", " which is close to but not exactly\nequal to the true value of 1/10.", "Many users are not aware of the approximation because of the way values are\ndisplayed.  Python only prints a decimal approximation to the true decimal\nvalue of the binary approximation stored by the machine.  On most machines, if\nPython were to print the true decimal value of the binary approximation stored\nfor 0.1, it would have to display", "That is more digits than most people find useful, so Python keeps the number\nof digits manageable by displaying a rounded value instead", "Just remember, even though the printed result looks like the exact value\nof 1/10, the actual stored value is the nearest representable binary fraction.", "Interestingly, there are many different decimal numbers that share the same\nnearest approximate binary fraction.  For example, the numbers ", "0.1", " and\n", "0.10000000000000001", " and\n", "0.1000000000000000055511151231257827021181583404541015625", " are all\napproximated by ", "3602879701896397", " ", "/", " ", "2", " ", "**", " ", "55", ".  Since all of these decimal\nvalues share the same approximation, any one of them could be displayed\nwhile still preserving the invariant ", "eval(repr(x))", " ", "==", " ", "x", ".", "Historically, the Python prompt and built-in ", "repr()", " function would choose\nthe one with 17 significant digits, ", "0.10000000000000001", ".   Starting with\nPython 3.1, Python (on most systems) is now able to choose the shortest of\nthese and simply display ", "0.1", ".", "Note that this is in the very nature of binary floating-point: this is not a bug\nin Python, and it is not a bug in your code either.  You\u2019ll see the same kind of\nthing in all languages that support your hardware\u2019s floating-point arithmetic\n(although some languages may not ", "display", " the difference by default, or in all\noutput modes).", "For more pleasant output, you may wish to use string formatting to produce a limited number of significant digits:", "It\u2019s important to realize that this is, in a real sense, an illusion: you\u2019re\nsimply rounding the ", "display", " of the true machine value.", "One illusion may beget another.  For example, since 0.1 is not exactly 1/10,\nsumming three values of 0.1 may not yield exactly 0.3, either:", "Also, since the 0.1 cannot get any closer to the exact value of 1/10 and\n0.3 cannot get any closer to the exact value of 3/10, then pre-rounding with\n", "round()", " function cannot help:", "Though the numbers cannot be made closer to their intended exact values,\nthe ", "round()", " function can be useful for post-rounding so that results\nwith inexact values become comparable to one another:", "Binary floating-point arithmetic holds many surprises like this.  The problem\nwith \u201c0.1\u201d is explained in precise detail below, in the \u201cRepresentation Error\u201d\nsection.  See ", "The Perils of Floating Point", "\nfor a more complete account of other common surprises.", "As that says near the end, \u201cthere are no easy answers.\u201d  Still, don\u2019t be unduly\nwary of floating-point!  The errors in Python float operations are inherited\nfrom the floating-point hardware, and on most machines are on the order of no\nmore than 1 part in 2**53 per operation.  That\u2019s more than adequate for most\ntasks, but you do need to keep in mind that it\u2019s not decimal arithmetic and\nthat every float operation can suffer a new rounding error.", "While pathological cases do exist, for most casual use of floating-point\narithmetic you\u2019ll see the result you expect in the end if you simply round the\ndisplay of your final results to the number of decimal digits you expect.\n", "str()", " usually suffices, and for finer control see the ", "str.format()", "\nmethod\u2019s format specifiers in ", "Format String Syntax", ".", "For use cases which require exact decimal representation, try using the\n", "decimal", " module which implements decimal arithmetic suitable for\naccounting applications and high-precision applications.", "Another form of exact arithmetic is supported by the ", "fractions", " module\nwhich implements arithmetic based on rational numbers (so the numbers like\n1/3 can be represented exactly).", "If you are a heavy user of floating point operations you should take a look\nat the Numerical Python package and many other packages for mathematical and\nstatistical operations supplied by the SciPy project. See <", "https://scipy.org", ">.", "Python provides tools that may help on those rare occasions when you really\n", "do", " want to know the exact value of a float.  The\n", "float.as_integer_ratio()", " method expresses the value of a float as a\nfraction:", "Since the ratio is exact, it can be used to losslessly recreate the\noriginal value:", "The ", "float.hex()", " method expresses a float in hexadecimal (base\n16), again giving the exact value stored by your computer:", "This precise hexadecimal representation can be used to reconstruct\nthe float value exactly:", "Since the representation is exact, it is useful for reliably porting values\nacross different versions of Python (platform independence) and exchanging\ndata with other languages that support the same format (such as Java and C99).", "Another helpful tool is the ", "math.fsum()", " function which helps mitigate\nloss-of-precision during summation.  It tracks \u201clost digits\u201d as values are\nadded onto a running total.  That can make a difference in overall accuracy\nso that the errors do not accumulate to the point where they affect the\nfinal total:"], "M_Code": ["0.125", "\n", "\n", "0.001", "\n", "\n", "0.3", "\n", "\n", "0.33", "\n", "\n", "0.333", "\n", "\n", "0.0001100110011001100110011001100110011001100110011", "...", "\n", "\n", ">>> ", "0.1", "\n", "0.1000000000000000055511151231257827021181583404541015625", "\n", "\n", ">>> ", "1", " ", "/", " ", "10", "\n", "0.1", "\n", "\n", ">>> ", "format", "(", "math", ".", "pi", ",", " ", "'.12g'", ")", "  ", "# give 12 significant digits", "\n", "'3.14159265359'", "\n\n", ">>> ", "format", "(", "math", ".", "pi", ",", " ", "'.2f'", ")", "   ", "# give 2 digits after the point", "\n", "'3.14'", "\n\n", ">>> ", "repr", "(", "math", ".", "pi", ")", "\n", "'3.141592653589793'", "\n", "\n", ">>> ", ".", "1", " ", "+", " ", ".", "1", " ", "+", " ", ".", "1", " ", "==", " ", ".", "3", "\n", "False", "\n", "\n", ">>> ", "round", "(", ".", "1", ",", " ", "1", ")", " ", "+", " ", "round", "(", ".", "1", ",", " ", "1", ")", " ", "+", " ", "round", "(", ".", "1", ",", " ", "1", ")", " ", "==", " ", "round", "(", ".", "3", ",", " ", "1", ")", "\n", "False", "\n", "\n", ">>> ", "round", "(", ".", "1", " ", "+", " ", ".", "1", " ", "+", " ", ".", "1", ",", " ", "10", ")", " ", "==", " ", "round", "(", ".", "3", ",", " ", "10", ")", "\n", "True", "\n", "\n", ">>> ", "x", " ", "=", " ", "3.14159", "\n", ">>> ", "x", ".", "as_integer_ratio", "()", "\n", "(3537115888337719, 1125899906842624)", "\n", "\n", ">>> ", "x", " ", "==", " ", "3537115888337719", " ", "/", " ", "1125899906842624", "\n", "True", "\n", "\n", ">>> ", "x", ".", "hex", "()", "\n", "'0x1.921f9f01b866ep+1'", "\n", "\n", ">>> ", "x", " ", "==", " ", "float", ".", "fromhex", "(", "'0x1.921f9f01b866ep+1'", ")", "\n", "True", "\n", "\n", ">>> ", "sum", "([", "0.1", "]", " ", "*", " ", "10", ")", " ", "==", " ", "1.0", "\n", "False", "\n", ">>> ", "math", ".", "fsum", "([", "0.1", "]", " ", "*", " ", "10", ")", " ", "==", " ", "1.0", "\n", "True", "\n", "\n"], "L2_Title": "15.1. Representation Error", "L2_Desc": ["This section explains the \u201c0.1\u201d example in detail, and shows how you can perform\nan exact analysis of cases like this yourself.  Basic familiarity with binary\nfloating-point representation is assumed.", "Representation error", " refers to the fact that some (most, actually)\ndecimal fractions cannot be represented exactly as binary (base 2) fractions.\nThis is the chief reason why Python (or Perl, C, C++, Java, Fortran, and many\nothers) often won\u2019t display the exact decimal number you expect.", "Why is that?  1/10 is not exactly representable as a binary fraction. Almost all\nmachines today (November 2000) use IEEE-754 floating point arithmetic, and\nalmost all platforms map Python floats to IEEE-754 \u201cdouble precision\u201d.  754\ndoubles contain 53 bits of precision, so on input the computer strives to\nconvert 0.1 to the closest fraction it can of the form ", "J", "/2**", "N", " where ", "J", " is\nan integer containing exactly 53 bits.  Rewriting", "as", "and recalling that ", "J", " has exactly 53 bits (is ", ">=", " ", "2**52", " but ", "<", " ", "2**53", "),\nthe best value for ", "N", " is 56:", "That is, 56 is the only value for ", "N", " that leaves ", "J", " with exactly 53 bits.  The\nbest possible value for ", "J", " is then that quotient rounded:", "Since the remainder is more than half of 10, the best approximation is obtained\nby rounding up:", "Therefore the best possible approximation to 1/10 in 754 double precision is:", "Dividing both the numerator and denominator by two reduces the fraction to:", "Note that since we rounded up, this is actually a little bit larger than 1/10;\nif we had not rounded up, the quotient would have been a little bit smaller than\n1/10.  But in no case can it be ", "exactly", " 1/10!", "So the computer never \u201csees\u201d 1/10:  what it sees is the exact fraction given\nabove, the best 754 double approximation it can get:", "If we multiply that fraction by 10**55, we can see the value out to\n55 decimal digits:", "meaning that the exact number stored in the computer is equal to\nthe decimal value 0.1000000000000000055511151231257827021181583404541015625.\nInstead of displaying the full decimal value, many languages (including\nolder versions of Python), round the result to 17 significant digits:", "The ", "fractions", " and ", "decimal", " modules make these calculations\neasy:"], "L2_Code": ["1", " ", "/", " ", "10", " ", "~=", " ", "J", " ", "/", " ", "(", "2", "**", "N", ")", "\n", "\n", "J", " ", "~=", " ", "2", "**", "N", " ", "/", " ", "10", "\n", "\n", ">>> ", "2", "**", "52", " ", "<=", "  ", "2", "**", "56", " ", "//", " ", "10", "  ", "<", " ", "2", "**", "53", "\n", "True", "\n", "\n", ">>> ", "q", ",", " ", "r", " ", "=", " ", "divmod", "(", "2", "**", "56", ",", " ", "10", ")", "\n", ">>> ", "r", "\n", "6", "\n", "\n", ">>> ", "q", "+", "1", "\n", "7205759403792794", "\n", "\n", "7205759403792794", " ", "/", " ", "2", " ", "**", " ", "56", "\n", "\n", "3602879701896397", " ", "/", " ", "2", " ", "**", " ", "55", "\n", "\n", ">>> ", "0.1", " ", "*", " ", "2", " ", "**", " ", "55", "\n", "3602879701896397.0", "\n", "\n", ">>> ", "3602879701896397", " ", "*", " ", "10", " ", "**", " ", "55", " ", "//", " ", "2", " ", "**", " ", "55", "\n", "1000000000000000055511151231257827021181583404541015625", "\n", "\n", ">>> ", "format", "(", "0.1", ",", " ", "'.17f'", ")", "\n", "'0.10000000000000001'", "\n", "\n", ">>> ", "from", " ", "decimal", " ", "import", " ", "Decimal", "\n", ">>> ", "from", " ", "fractions", " ", "import", " ", "Fraction", "\n\n", ">>> ", "Fraction", ".", "from_float", "(", "0.1", ")", "\n", "Fraction(3602879701896397, 36028797018963968)", "\n\n", ">>> ", "(", "0.1", ")", ".", "as_integer_ratio", "()", "\n", "(3602879701896397, 36028797018963968)", "\n\n", ">>> ", "Decimal", ".", "from_float", "(", "0.1", ")", "\n", "Decimal('0.1000000000000000055511151231257827021181583404541015625')", "\n\n", ">>> ", "format", "(", "Decimal", ".", "from_float", "(", "0.1", "),", " ", "'.17'", ")", "\n", "'0.10000000000000001'", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules", "M_Desc": ["If you quit from the Python interpreter and enter it again, the definitions you\nhave made (functions and variables) are lost. Therefore, if you want to write a\nsomewhat longer program, you are better off using a text editor to prepare the\ninput for the interpreter and running it with that file as input instead.  This\nis known as creating a ", "script", ".  As your program gets longer, you may want to\nsplit it into several files for easier maintenance.  You may also want to use a\nhandy function that you\u2019ve written in several programs without copying its\ndefinition into each program.", "To support this, Python has a way to put definitions in a file and use them in a\nscript or in an interactive instance of the interpreter. Such a file is called a\n", "module", "; definitions from a module can be ", "imported", " into other modules or into\nthe ", "main", " module (the collection of variables that you have access to in a\nscript executed at the top level and in calculator mode).", "A module is a file containing Python definitions and statements.  The file name\nis the module name with the suffix ", ".py", " appended.  Within a module, the\nmodule\u2019s name (as a string) is available as the value of the global variable\n", "__name__", ".  For instance, use your favorite text editor to create a file\ncalled ", "fibo.py", " in the current directory with the following contents:", "Now enter the Python interpreter and import this module with the following\ncommand:", "This does not enter the names of the functions defined in ", "fibo", "  directly in\nthe current symbol table; it only enters the module name ", "fibo", " there. Using\nthe module name you can access the functions:", "If you intend to use a function often you can assign it to a local name:"], "M_Code": ["# Fibonacci numbers module", "\n\n", "def", " ", "fib", "(", "n", "):", "    ", "# write Fibonacci series up to n", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "print", "(", "a", ",", " ", "end", "=", "' '", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "print", "()", "\n\n", "def", " ", "fib2", "(", "n", "):", "   ", "# return Fibonacci series up to n", "\n    ", "result", " ", "=", " ", "[]", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "result", ".", "append", "(", "a", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "return", " ", "result", "\n", "\n", ">>> ", "import", " ", "fibo", "\n", "\n", ">>> ", "fibo", ".", "fib", "(", "1000", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987", "\n", ">>> ", "fibo", ".", "fib2", "(", "100", ")", "\n", "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]", "\n", ">>> ", "fibo", ".", "__name__", "\n", "'fibo'", "\n", "\n", ">>> ", "fib", " ", "=", " ", "fibo", ".", "fib", "\n", ">>> ", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n"], "L2_Title": "6.1. More on Modules", "L2_Desc": ["A module can contain executable statements as well as function definitions.\nThese statements are intended to initialize the module. They are executed only\nthe ", "first", " time the module name is encountered in an import statement. ", "[1]", "\n(They are also run if the file is executed as a script.)", "Each module has its own private symbol table, which is used as the global symbol\ntable by all functions defined in the module. Thus, the author of a module can\nuse global variables in the module without worrying about accidental clashes\nwith a user\u2019s global variables. On the other hand, if you know what you are\ndoing you can touch a module\u2019s global variables with the same notation used to\nrefer to its functions, ", "modname.itemname", ".", "Modules can import other modules.  It is customary but not required to place all\n", "import", " statements at the beginning of a module (or script, for that\nmatter).  The imported module names are placed in the importing module\u2019s global\nsymbol table.", "There is a variant of the ", "import", " statement that imports names from a\nmodule directly into the importing module\u2019s symbol table.  For example:", "This does not introduce the module name from which the imports are taken in the\nlocal symbol table (so in the example, ", "fibo", " is not defined).", "There is even a variant to import all names that a module defines:", "This imports all names except those beginning with an underscore (", "_", ").\nIn most cases Python programmers do not use this facility since it introduces\nan unknown set of names into the interpreter, possibly hiding some things\nyou have already defined.", "Note that in general the practice of importing ", "*", " from a module or package is\nfrowned upon, since it often causes poorly readable code. However, it is okay to\nuse it to save typing in interactive sessions.", "If the module name is followed by ", "as", ", then the name\nfollowing ", "as", " is bound directly to the imported module.", "This is effectively importing the module in the same way that ", "import", " ", "fibo", "\nwill do, with the only difference of it being available as ", "fib", ".", "It can also be used when utilising ", "from", " with similar effects:"], "L2_Code": [">>> ", "from", " ", "fibo", " ", "import", " ", "fib", ",", " ", "fib2", "\n", ">>> ", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n", ">>> ", "from", " ", "fibo", " ", "import", " ", "*", "\n", ">>> ", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n", ">>> ", "import", " ", "fibo", " ", "as", " ", "fib", "\n", ">>> ", "fib", ".", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n", ">>> ", "from", " ", "fibo", " ", "import", " ", "fib", " ", "as", " ", "fibonacci", "\n", ">>> ", "fibonacci", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n"], "L3_Title": "6.1.1. Executing modules as scripts", "L3_Desc": ["When you run a Python module with", "the code in the module will be executed, just as if you imported it, but with\nthe ", "__name__", " set to ", "\"__main__\"", ".  That means that by adding this code at\nthe end of your module:", "you can make the file usable as a script as well as an importable module,\nbecause the code that parses the command line only runs if the module is\nexecuted as the \u201cmain\u201d file:", "If the module is imported, the code is not run:", "This is often used either to provide a convenient user interface to a module, or\nfor testing purposes (running the module as a script executes a test suite)."], "L3_Code": ["python", " ", "fibo", ".", "py", " ", "<", "arguments", ">", "\n", "\n", "if", " ", "__name__", " ", "==", " ", "\"__main__\"", ":", "\n    ", "import", " ", "sys", "\n    ", "fib", "(", "int", "(", "sys", ".", "argv", "[", "1", "]))", "\n", "\n", ">>> ", "import", " ", "fibo", "\n", ">>>", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules", "M_Desc": ["If you quit from the Python interpreter and enter it again, the definitions you\nhave made (functions and variables) are lost. Therefore, if you want to write a\nsomewhat longer program, you are better off using a text editor to prepare the\ninput for the interpreter and running it with that file as input instead.  This\nis known as creating a ", "script", ".  As your program gets longer, you may want to\nsplit it into several files for easier maintenance.  You may also want to use a\nhandy function that you\u2019ve written in several programs without copying its\ndefinition into each program.", "To support this, Python has a way to put definitions in a file and use them in a\nscript or in an interactive instance of the interpreter. Such a file is called a\n", "module", "; definitions from a module can be ", "imported", " into other modules or into\nthe ", "main", " module (the collection of variables that you have access to in a\nscript executed at the top level and in calculator mode).", "A module is a file containing Python definitions and statements.  The file name\nis the module name with the suffix ", ".py", " appended.  Within a module, the\nmodule\u2019s name (as a string) is available as the value of the global variable\n", "__name__", ".  For instance, use your favorite text editor to create a file\ncalled ", "fibo.py", " in the current directory with the following contents:", "Now enter the Python interpreter and import this module with the following\ncommand:", "This does not enter the names of the functions defined in ", "fibo", "  directly in\nthe current symbol table; it only enters the module name ", "fibo", " there. Using\nthe module name you can access the functions:", "If you intend to use a function often you can assign it to a local name:"], "M_Code": ["# Fibonacci numbers module", "\n\n", "def", " ", "fib", "(", "n", "):", "    ", "# write Fibonacci series up to n", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "print", "(", "a", ",", " ", "end", "=", "' '", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "print", "()", "\n\n", "def", " ", "fib2", "(", "n", "):", "   ", "# return Fibonacci series up to n", "\n    ", "result", " ", "=", " ", "[]", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "result", ".", "append", "(", "a", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "return", " ", "result", "\n", "\n", ">>> ", "import", " ", "fibo", "\n", "\n", ">>> ", "fibo", ".", "fib", "(", "1000", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987", "\n", ">>> ", "fibo", ".", "fib2", "(", "100", ")", "\n", "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]", "\n", ">>> ", "fibo", ".", "__name__", "\n", "'fibo'", "\n", "\n", ">>> ", "fib", " ", "=", " ", "fibo", ".", "fib", "\n", ">>> ", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n"], "L2_Title": "6.1. More on Modules", "L2_Desc": ["A module can contain executable statements as well as function definitions.\nThese statements are intended to initialize the module. They are executed only\nthe ", "first", " time the module name is encountered in an import statement. ", "[1]", "\n(They are also run if the file is executed as a script.)", "Each module has its own private symbol table, which is used as the global symbol\ntable by all functions defined in the module. Thus, the author of a module can\nuse global variables in the module without worrying about accidental clashes\nwith a user\u2019s global variables. On the other hand, if you know what you are\ndoing you can touch a module\u2019s global variables with the same notation used to\nrefer to its functions, ", "modname.itemname", ".", "Modules can import other modules.  It is customary but not required to place all\n", "import", " statements at the beginning of a module (or script, for that\nmatter).  The imported module names are placed in the importing module\u2019s global\nsymbol table.", "There is a variant of the ", "import", " statement that imports names from a\nmodule directly into the importing module\u2019s symbol table.  For example:", "This does not introduce the module name from which the imports are taken in the\nlocal symbol table (so in the example, ", "fibo", " is not defined).", "There is even a variant to import all names that a module defines:", "This imports all names except those beginning with an underscore (", "_", ").\nIn most cases Python programmers do not use this facility since it introduces\nan unknown set of names into the interpreter, possibly hiding some things\nyou have already defined.", "Note that in general the practice of importing ", "*", " from a module or package is\nfrowned upon, since it often causes poorly readable code. However, it is okay to\nuse it to save typing in interactive sessions.", "If the module name is followed by ", "as", ", then the name\nfollowing ", "as", " is bound directly to the imported module.", "This is effectively importing the module in the same way that ", "import", " ", "fibo", "\nwill do, with the only difference of it being available as ", "fib", ".", "It can also be used when utilising ", "from", " with similar effects:"], "L2_Code": [">>> ", "from", " ", "fibo", " ", "import", " ", "fib", ",", " ", "fib2", "\n", ">>> ", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n", ">>> ", "from", " ", "fibo", " ", "import", " ", "*", "\n", ">>> ", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n", ">>> ", "import", " ", "fibo", " ", "as", " ", "fib", "\n", ">>> ", "fib", ".", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n", ">>> ", "from", " ", "fibo", " ", "import", " ", "fib", " ", "as", " ", "fibonacci", "\n", ">>> ", "fibonacci", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n"], "L3_Title": "6.1.2. The Module Search Path", "L3_Desc": ["When a module named ", "spam", " is imported, the interpreter first searches for\na built-in module with that name. If not found, it then searches for a file\nnamed ", "spam.py", " in a list of directories given by the variable\n", "sys.path", ".  ", "sys.path", " is initialized from these locations:", "After initialization, Python programs can modify ", "sys.path", ".  The\ndirectory containing the script being run is placed at the beginning of the\nsearch path, ahead of the standard library path. This means that scripts in that\ndirectory will be loaded instead of modules of the same name in the library\ndirectory. This is an error unless the replacement is intended.  See section\n", "Standard Modules", " for more information."], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules", "M_Desc": ["If you quit from the Python interpreter and enter it again, the definitions you\nhave made (functions and variables) are lost. Therefore, if you want to write a\nsomewhat longer program, you are better off using a text editor to prepare the\ninput for the interpreter and running it with that file as input instead.  This\nis known as creating a ", "script", ".  As your program gets longer, you may want to\nsplit it into several files for easier maintenance.  You may also want to use a\nhandy function that you\u2019ve written in several programs without copying its\ndefinition into each program.", "To support this, Python has a way to put definitions in a file and use them in a\nscript or in an interactive instance of the interpreter. Such a file is called a\n", "module", "; definitions from a module can be ", "imported", " into other modules or into\nthe ", "main", " module (the collection of variables that you have access to in a\nscript executed at the top level and in calculator mode).", "A module is a file containing Python definitions and statements.  The file name\nis the module name with the suffix ", ".py", " appended.  Within a module, the\nmodule\u2019s name (as a string) is available as the value of the global variable\n", "__name__", ".  For instance, use your favorite text editor to create a file\ncalled ", "fibo.py", " in the current directory with the following contents:", "Now enter the Python interpreter and import this module with the following\ncommand:", "This does not enter the names of the functions defined in ", "fibo", "  directly in\nthe current symbol table; it only enters the module name ", "fibo", " there. Using\nthe module name you can access the functions:", "If you intend to use a function often you can assign it to a local name:"], "M_Code": ["# Fibonacci numbers module", "\n\n", "def", " ", "fib", "(", "n", "):", "    ", "# write Fibonacci series up to n", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "print", "(", "a", ",", " ", "end", "=", "' '", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "print", "()", "\n\n", "def", " ", "fib2", "(", "n", "):", "   ", "# return Fibonacci series up to n", "\n    ", "result", " ", "=", " ", "[]", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "result", ".", "append", "(", "a", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "return", " ", "result", "\n", "\n", ">>> ", "import", " ", "fibo", "\n", "\n", ">>> ", "fibo", ".", "fib", "(", "1000", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987", "\n", ">>> ", "fibo", ".", "fib2", "(", "100", ")", "\n", "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]", "\n", ">>> ", "fibo", ".", "__name__", "\n", "'fibo'", "\n", "\n", ">>> ", "fib", " ", "=", " ", "fibo", ".", "fib", "\n", ">>> ", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n"], "L2_Title": "6.1. More on Modules", "L2_Desc": ["A module can contain executable statements as well as function definitions.\nThese statements are intended to initialize the module. They are executed only\nthe ", "first", " time the module name is encountered in an import statement. ", "[1]", "\n(They are also run if the file is executed as a script.)", "Each module has its own private symbol table, which is used as the global symbol\ntable by all functions defined in the module. Thus, the author of a module can\nuse global variables in the module without worrying about accidental clashes\nwith a user\u2019s global variables. On the other hand, if you know what you are\ndoing you can touch a module\u2019s global variables with the same notation used to\nrefer to its functions, ", "modname.itemname", ".", "Modules can import other modules.  It is customary but not required to place all\n", "import", " statements at the beginning of a module (or script, for that\nmatter).  The imported module names are placed in the importing module\u2019s global\nsymbol table.", "There is a variant of the ", "import", " statement that imports names from a\nmodule directly into the importing module\u2019s symbol table.  For example:", "This does not introduce the module name from which the imports are taken in the\nlocal symbol table (so in the example, ", "fibo", " is not defined).", "There is even a variant to import all names that a module defines:", "This imports all names except those beginning with an underscore (", "_", ").\nIn most cases Python programmers do not use this facility since it introduces\nan unknown set of names into the interpreter, possibly hiding some things\nyou have already defined.", "Note that in general the practice of importing ", "*", " from a module or package is\nfrowned upon, since it often causes poorly readable code. However, it is okay to\nuse it to save typing in interactive sessions.", "If the module name is followed by ", "as", ", then the name\nfollowing ", "as", " is bound directly to the imported module.", "This is effectively importing the module in the same way that ", "import", " ", "fibo", "\nwill do, with the only difference of it being available as ", "fib", ".", "It can also be used when utilising ", "from", " with similar effects:"], "L2_Code": [">>> ", "from", " ", "fibo", " ", "import", " ", "fib", ",", " ", "fib2", "\n", ">>> ", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n", ">>> ", "from", " ", "fibo", " ", "import", " ", "*", "\n", ">>> ", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n", ">>> ", "import", " ", "fibo", " ", "as", " ", "fib", "\n", ">>> ", "fib", ".", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n", ">>> ", "from", " ", "fibo", " ", "import", " ", "fib", " ", "as", " ", "fibonacci", "\n", ">>> ", "fibonacci", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n"], "L3_Title": "6.1.3. \u201cCompiled\u201d Python files", "L3_Desc": ["To speed up loading modules, Python caches the compiled version of each module\nin the ", "__pycache__", " directory under the name ", "module.", "version", ".pyc", ",\nwhere the version encodes the format of the compiled file; it generally contains\nthe Python version number.  For example, in CPython release 3.3 the compiled\nversion of spam.py would be cached as ", "__pycache__/spam.cpython-33.pyc", ".  This\nnaming convention allows compiled modules from different releases and different\nversions of Python to coexist.", "Python checks the modification date of the source against the compiled version\nto see if it\u2019s out of date and needs to be recompiled.  This is a completely\nautomatic process.  Also, the compiled modules are platform-independent, so the\nsame library can be shared among systems with different architectures.", "Python does not check the cache in two circumstances.  First, it always\nrecompiles and does not store the result for the module that\u2019s loaded directly\nfrom the command line.  Second, it does not check the cache if there is no\nsource module.  To support a non-source (compiled only) distribution, the\ncompiled module must be in the source directory, and there must not be a source\nmodule.", "Some tips for experts:"], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules", "M_Desc": ["If you quit from the Python interpreter and enter it again, the definitions you\nhave made (functions and variables) are lost. Therefore, if you want to write a\nsomewhat longer program, you are better off using a text editor to prepare the\ninput for the interpreter and running it with that file as input instead.  This\nis known as creating a ", "script", ".  As your program gets longer, you may want to\nsplit it into several files for easier maintenance.  You may also want to use a\nhandy function that you\u2019ve written in several programs without copying its\ndefinition into each program.", "To support this, Python has a way to put definitions in a file and use them in a\nscript or in an interactive instance of the interpreter. Such a file is called a\n", "module", "; definitions from a module can be ", "imported", " into other modules or into\nthe ", "main", " module (the collection of variables that you have access to in a\nscript executed at the top level and in calculator mode).", "A module is a file containing Python definitions and statements.  The file name\nis the module name with the suffix ", ".py", " appended.  Within a module, the\nmodule\u2019s name (as a string) is available as the value of the global variable\n", "__name__", ".  For instance, use your favorite text editor to create a file\ncalled ", "fibo.py", " in the current directory with the following contents:", "Now enter the Python interpreter and import this module with the following\ncommand:", "This does not enter the names of the functions defined in ", "fibo", "  directly in\nthe current symbol table; it only enters the module name ", "fibo", " there. Using\nthe module name you can access the functions:", "If you intend to use a function often you can assign it to a local name:"], "M_Code": ["# Fibonacci numbers module", "\n\n", "def", " ", "fib", "(", "n", "):", "    ", "# write Fibonacci series up to n", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "print", "(", "a", ",", " ", "end", "=", "' '", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "print", "()", "\n\n", "def", " ", "fib2", "(", "n", "):", "   ", "# return Fibonacci series up to n", "\n    ", "result", " ", "=", " ", "[]", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "result", ".", "append", "(", "a", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "return", " ", "result", "\n", "\n", ">>> ", "import", " ", "fibo", "\n", "\n", ">>> ", "fibo", ".", "fib", "(", "1000", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987", "\n", ">>> ", "fibo", ".", "fib2", "(", "100", ")", "\n", "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]", "\n", ">>> ", "fibo", ".", "__name__", "\n", "'fibo'", "\n", "\n", ">>> ", "fib", " ", "=", " ", "fibo", ".", "fib", "\n", ">>> ", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n"], "L2_Title": "6.2. Standard Modules", "L2_Desc": ["Python comes with a library of standard modules, described in a separate\ndocument, the Python Library Reference (\u201cLibrary Reference\u201d hereafter).  Some\nmodules are built into the interpreter; these provide access to operations that\nare not part of the core of the language but are nevertheless built in, either\nfor efficiency or to provide access to operating system primitives such as\nsystem calls.  The set of such modules is a configuration option which also\ndepends on the underlying platform.  For example, the ", "winreg", " module is only\nprovided on Windows systems. One particular module deserves some attention:\n", "sys", ", which is built into every Python interpreter.  The variables\n", "sys.ps1", " and ", "sys.ps2", " define the strings used as primary and secondary\nprompts:", "These two variables are only defined if the interpreter is in interactive mode.", "The variable ", "sys.path", " is a list of strings that determines the interpreter\u2019s\nsearch path for modules. It is initialized to a default path taken from the\nenvironment variable ", "PYTHONPATH", ", or from a built-in default if\n", "PYTHONPATH", " is not set.  You can modify it using standard list\noperations:"], "L2_Code": [">>> ", "import", " ", "sys", "\n", ">>> ", "sys", ".", "ps1", "\n", "'>>> '", "\n", ">>> ", "sys", ".", "ps2", "\n", "'... '", "\n", ">>> ", "sys", ".", "ps1", " ", "=", " ", "'C> '", "\n", "C> print('Yuck!')", "\n", "Yuck!", "\n", "C>", "\n", "\n", ">>> ", "import", " ", "sys", "\n", ">>> ", "sys", ".", "path", ".", "append", "(", "'/ufs/guido/lib/python'", ")", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules", "M_Desc": ["If you quit from the Python interpreter and enter it again, the definitions you\nhave made (functions and variables) are lost. Therefore, if you want to write a\nsomewhat longer program, you are better off using a text editor to prepare the\ninput for the interpreter and running it with that file as input instead.  This\nis known as creating a ", "script", ".  As your program gets longer, you may want to\nsplit it into several files for easier maintenance.  You may also want to use a\nhandy function that you\u2019ve written in several programs without copying its\ndefinition into each program.", "To support this, Python has a way to put definitions in a file and use them in a\nscript or in an interactive instance of the interpreter. Such a file is called a\n", "module", "; definitions from a module can be ", "imported", " into other modules or into\nthe ", "main", " module (the collection of variables that you have access to in a\nscript executed at the top level and in calculator mode).", "A module is a file containing Python definitions and statements.  The file name\nis the module name with the suffix ", ".py", " appended.  Within a module, the\nmodule\u2019s name (as a string) is available as the value of the global variable\n", "__name__", ".  For instance, use your favorite text editor to create a file\ncalled ", "fibo.py", " in the current directory with the following contents:", "Now enter the Python interpreter and import this module with the following\ncommand:", "This does not enter the names of the functions defined in ", "fibo", "  directly in\nthe current symbol table; it only enters the module name ", "fibo", " there. Using\nthe module name you can access the functions:", "If you intend to use a function often you can assign it to a local name:"], "M_Code": ["# Fibonacci numbers module", "\n\n", "def", " ", "fib", "(", "n", "):", "    ", "# write Fibonacci series up to n", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "print", "(", "a", ",", " ", "end", "=", "' '", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "print", "()", "\n\n", "def", " ", "fib2", "(", "n", "):", "   ", "# return Fibonacci series up to n", "\n    ", "result", " ", "=", " ", "[]", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "result", ".", "append", "(", "a", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "return", " ", "result", "\n", "\n", ">>> ", "import", " ", "fibo", "\n", "\n", ">>> ", "fibo", ".", "fib", "(", "1000", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987", "\n", ">>> ", "fibo", ".", "fib2", "(", "100", ")", "\n", "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]", "\n", ">>> ", "fibo", ".", "__name__", "\n", "'fibo'", "\n", "\n", ">>> ", "fib", " ", "=", " ", "fibo", ".", "fib", "\n", ">>> ", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n"], "L2_Title": "6.3. The ", "L2_Desc": ["The built-in function ", "dir()", " is used to find out which names a module\ndefines.  It returns a sorted list of strings:", "Without arguments, ", "dir()", " lists the names you have defined currently:", "Note that it lists all types of names: variables, modules, functions, etc.", "dir()", " does not list the names of built-in functions and variables.  If you\nwant a list of those, they are defined in the standard module\n", "builtins", ":"], "L2_Code": [">>> ", "import", " ", "fibo", ",", " ", "sys", "\n", ">>> ", "dir", "(", "fibo", ")", "\n", "['__name__', 'fib', 'fib2']", "\n", ">>> ", "dir", "(", "sys", ")", "  \n", "['__displayhook__', '__doc__', '__excepthook__', '__loader__', '__name__',", "\n", " '__package__', '__stderr__', '__stdin__', '__stdout__',", "\n", " '_clear_type_cache', '_current_frames', '_debugmallocstats', '_getframe',", "\n", " '_home', '_mercurial', '_xoptions', 'abiflags', 'api_version', 'argv',", "\n", " 'base_exec_prefix', 'base_prefix', 'builtin_module_names', 'byteorder',", "\n", " 'call_tracing', 'callstats', 'copyright', 'displayhook',", "\n", " 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix',", "\n", " 'executable', 'exit', 'flags', 'float_info', 'float_repr_style',", "\n", " 'getcheckinterval', 'getdefaultencoding', 'getdlopenflags',", "\n", " 'getfilesystemencoding', 'getobjects', 'getprofile', 'getrecursionlimit',", "\n", " 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettotalrefcount',", "\n", " 'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info',", "\n", " 'intern', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path',", "\n", " 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1',", "\n", " 'setcheckinterval', 'setdlopenflags', 'setprofile', 'setrecursionlimit',", "\n", " 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout',", "\n", " 'thread_info', 'version', 'version_info', 'warnoptions']", "\n", "\n", ">>> ", "a", " ", "=", " ", "[", "1", ",", " ", "2", ",", " ", "3", ",", " ", "4", ",", " ", "5", "]", "\n", ">>> ", "import", " ", "fibo", "\n", ">>> ", "fib", " ", "=", " ", "fibo", ".", "fib", "\n", ">>> ", "dir", "()", "\n", "['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']", "\n", "\n", ">>> ", "import", " ", "builtins", "\n", ">>> ", "dir", "(", "builtins", ")", "  \n", "['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException',", "\n", " 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning',", "\n", " 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError',", "\n", " 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning',", "\n", " 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False',", "\n", " 'FileExistsError', 'FileNotFoundError', 'FloatingPointError',", "\n", " 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError',", "\n", " 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError',", "\n", " 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError',", "\n", " 'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented',", "\n", " 'NotImplementedError', 'OSError', 'OverflowError',", "\n", " 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError',", "\n", " 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning',", "\n", " 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError',", "\n", " 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError',", "\n", " 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError',", "\n", " 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning',", "\n", " 'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__',", "\n", " '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs',", "\n", " 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable',", "\n", " 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits',", "\n", " 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit',", "\n", " 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr',", "\n", " 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass',", "\n", " 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview',", "\n", " 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property',", "\n", " 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice',", "\n", " 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars',", "\n", " 'zip']", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules", "M_Desc": ["If you quit from the Python interpreter and enter it again, the definitions you\nhave made (functions and variables) are lost. Therefore, if you want to write a\nsomewhat longer program, you are better off using a text editor to prepare the\ninput for the interpreter and running it with that file as input instead.  This\nis known as creating a ", "script", ".  As your program gets longer, you may want to\nsplit it into several files for easier maintenance.  You may also want to use a\nhandy function that you\u2019ve written in several programs without copying its\ndefinition into each program.", "To support this, Python has a way to put definitions in a file and use them in a\nscript or in an interactive instance of the interpreter. Such a file is called a\n", "module", "; definitions from a module can be ", "imported", " into other modules or into\nthe ", "main", " module (the collection of variables that you have access to in a\nscript executed at the top level and in calculator mode).", "A module is a file containing Python definitions and statements.  The file name\nis the module name with the suffix ", ".py", " appended.  Within a module, the\nmodule\u2019s name (as a string) is available as the value of the global variable\n", "__name__", ".  For instance, use your favorite text editor to create a file\ncalled ", "fibo.py", " in the current directory with the following contents:", "Now enter the Python interpreter and import this module with the following\ncommand:", "This does not enter the names of the functions defined in ", "fibo", "  directly in\nthe current symbol table; it only enters the module name ", "fibo", " there. Using\nthe module name you can access the functions:", "If you intend to use a function often you can assign it to a local name:"], "M_Code": ["# Fibonacci numbers module", "\n\n", "def", " ", "fib", "(", "n", "):", "    ", "# write Fibonacci series up to n", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "print", "(", "a", ",", " ", "end", "=", "' '", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "print", "()", "\n\n", "def", " ", "fib2", "(", "n", "):", "   ", "# return Fibonacci series up to n", "\n    ", "result", " ", "=", " ", "[]", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "result", ".", "append", "(", "a", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "return", " ", "result", "\n", "\n", ">>> ", "import", " ", "fibo", "\n", "\n", ">>> ", "fibo", ".", "fib", "(", "1000", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987", "\n", ">>> ", "fibo", ".", "fib2", "(", "100", ")", "\n", "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]", "\n", ">>> ", "fibo", ".", "__name__", "\n", "'fibo'", "\n", "\n", ">>> ", "fib", " ", "=", " ", "fibo", ".", "fib", "\n", ">>> ", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n"], "L2_Title": "6.4. Packages", "L2_Desc": ["Packages are a way of structuring Python\u2019s module namespace by using \u201cdotted\nmodule names\u201d.  For example, the module name ", "A.B", " designates a submodule\nnamed ", "B", " in a package named ", "A", ".  Just like the use of modules saves the\nauthors of different modules from having to worry about each other\u2019s global\nvariable names, the use of dotted module names saves the authors of multi-module\npackages like NumPy or Pillow from having to worry about\neach other\u2019s module names.", "Suppose you want to design a collection of modules (a \u201cpackage\u201d) for the uniform\nhandling of sound files and sound data.  There are many different sound file\nformats (usually recognized by their extension, for example: ", ".wav", ",\n", ".aiff", ", ", ".au", "), so you may need to create and maintain a growing\ncollection of modules for the conversion between the various file formats.\nThere are also many different operations you might want to perform on sound data\n(such as mixing, adding echo, applying an equalizer function, creating an\nartificial stereo effect), so in addition you will be writing a never-ending\nstream of modules to perform these operations.  Here\u2019s a possible structure for\nyour package (expressed in terms of a hierarchical filesystem):", "When importing the package, Python searches through the directories on\n", "sys.path", " looking for the package subdirectory.", "The ", "__init__.py", " files are required to make Python treat the directories\nas containing packages; this is done to prevent directories with a common name,\nsuch as ", "string", ", from unintentionally hiding valid modules that occur later\non the module search path. In the simplest case, ", "__init__.py", " can just be\nan empty file, but it can also execute initialization code for the package or\nset the ", "__all__", " variable, described later.", "Users of the package can import individual modules from the package, for\nexample:", "This loads the submodule ", "sound.effects.echo", ".  It must be referenced with\nits full name.", "An alternative way of importing the submodule is:", "This also loads the submodule ", "echo", ", and makes it available without its\npackage prefix, so it can be used as follows:", "Yet another variation is to import the desired function or variable directly:", "Again, this loads the submodule ", "echo", ", but this makes its function\n", "echofilter()", " directly available:", "Note that when using ", "from", " ", "package", " ", "import", " ", "item", ", the item can be either a\nsubmodule (or subpackage) of the package, or some  other name defined in the\npackage, like a function, class or variable.  The ", "import", " statement first\ntests whether the item is defined in the package; if not, it assumes it is a\nmodule and attempts to load it.  If it fails to find it, an ", "ImportError", "\nexception is raised.", "Contrarily, when using syntax like ", "import", " ", "item.subitem.subsubitem", ", each item\nexcept for the last must be a package; the last item can be a module or a\npackage but can\u2019t be a class or function or variable defined in the previous\nitem."], "L2_Code": ["import", " ", "sound.effects.echo", "\n", "\n", "sound", ".", "effects", ".", "echo", ".", "echofilter", "(", "input", ",", " ", "output", ",", " ", "delay", "=", "0.7", ",", " ", "atten", "=", "4", ")", "\n", "\n", "from", " ", "sound.effects", " ", "import", " ", "echo", "\n", "\n", "echo", ".", "echofilter", "(", "input", ",", " ", "output", ",", " ", "delay", "=", "0.7", ",", " ", "atten", "=", "4", ")", "\n", "\n", "from", " ", "sound.effects.echo", " ", "import", " ", "echofilter", "\n", "\n", "echofilter", "(", "input", ",", " ", "output", ",", " ", "delay", "=", "0.7", ",", " ", "atten", "=", "4", ")", "\n", "\n"], "L3_Title": "6.4.1. Importing * From a Package", "L3_Desc": ["Now what happens when the user writes ", "from", " ", "sound.effects", " ", "import", " ", "*", "?  Ideally,\none would hope that this somehow goes out to the filesystem, finds which\nsubmodules are present in the package, and imports them all.  This could take a\nlong time and importing sub-modules might have unwanted side-effects that should\nonly happen when the sub-module is explicitly imported.", "The only solution is for the package author to provide an explicit index of the\npackage.  The ", "import", " statement uses the following convention: if a package\u2019s\n", "__init__.py", " code defines a list named ", "__all__", ", it is taken to be the\nlist of module names that should be imported when ", "from", " ", "package", " ", "import", " ", "*", " is\nencountered.  It is up to the package author to keep this list up-to-date when a\nnew version of the package is released.  Package authors may also decide not to\nsupport it, if they don\u2019t see a use for importing * from their package.  For\nexample, the file ", "sound/effects/__init__.py", " could contain the following\ncode:", "This would mean that ", "from", " ", "sound.effects", " ", "import", " ", "*", " would import the three\nnamed submodules of the ", "sound", " package.", "If ", "__all__", " is not defined, the statement ", "from", " ", "sound.effects", " ", "import", " ", "*", "\ndoes ", "not", " import all submodules from the package ", "sound.effects", " into the\ncurrent namespace; it only ensures that the package ", "sound.effects", " has\nbeen imported (possibly running any initialization code in ", "__init__.py", ")\nand then imports whatever names are defined in the package.  This includes any\nnames defined (and submodules explicitly loaded) by ", "__init__.py", ".  It\nalso includes any submodules of the package that were explicitly loaded by\nprevious ", "import", " statements.  Consider this code:", "In this example, the ", "echo", " and ", "surround", " modules are imported in the\ncurrent namespace because they are defined in the ", "sound.effects", " package\nwhen the ", "from...import", " statement is executed.  (This also works when\n", "__all__", " is defined.)", "Although certain modules are designed to export only names that follow certain\npatterns when you use ", "import", " ", "*", ", it is still considered bad practice in\nproduction code.", "Remember, there is nothing wrong with using ", "from", " ", "Package", " ", "import", "\n", "specific_submodule", "!  In fact, this is the recommended notation unless the\nimporting module needs to use submodules with the same name from different\npackages."], "L3_Code": ["__all__", " ", "=", " ", "[", "\"echo\"", ",", " ", "\"surround\"", ",", " ", "\"reverse\"", "]", "\n", "\n", "import", " ", "sound.effects.echo", "\n", "import", " ", "sound.effects.surround", "\n", "from", " ", "sound.effects", " ", "import", " ", "*", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/whatnow.html", "Language": "Python", "M_Title": "13. What Now?", "M_Desc": ["Reading this tutorial has probably reinforced your interest in using Python \u2014\nyou should be eager to apply Python to solving your real-world problems. Where\nshould you go to learn more?", "This tutorial is part of Python\u2019s documentation set.   Some other documents in\nthe set are:", "More Python resources:", "For Python-related questions and problem reports, you can post to the newsgroup\n", "comp.lang.python", ", or send them to the mailing list at\n", "python-list", "@", "python", ".", "org", ".  The newsgroup and mailing list are gatewayed, so\nmessages posted to one will automatically be forwarded to the other.  There are\nhundreds of postings a day, asking (and\nanswering) questions, suggesting new features, and announcing new modules.\nMailing list archives are available at ", "https://mail.python.org/pipermail/", ".", "Before posting, be sure to check the list of\n", "Frequently Asked Questions", " (also called the FAQ).  The\nFAQ answers many of the questions that come up again and again, and may\nalready contain the solution for your problem."], "M_Code": [], "L2_Title": "", "L2_Desc": [], "L2_Code": [], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules", "M_Desc": ["If you quit from the Python interpreter and enter it again, the definitions you\nhave made (functions and variables) are lost. Therefore, if you want to write a\nsomewhat longer program, you are better off using a text editor to prepare the\ninput for the interpreter and running it with that file as input instead.  This\nis known as creating a ", "script", ".  As your program gets longer, you may want to\nsplit it into several files for easier maintenance.  You may also want to use a\nhandy function that you\u2019ve written in several programs without copying its\ndefinition into each program.", "To support this, Python has a way to put definitions in a file and use them in a\nscript or in an interactive instance of the interpreter. Such a file is called a\n", "module", "; definitions from a module can be ", "imported", " into other modules or into\nthe ", "main", " module (the collection of variables that you have access to in a\nscript executed at the top level and in calculator mode).", "A module is a file containing Python definitions and statements.  The file name\nis the module name with the suffix ", ".py", " appended.  Within a module, the\nmodule\u2019s name (as a string) is available as the value of the global variable\n", "__name__", ".  For instance, use your favorite text editor to create a file\ncalled ", "fibo.py", " in the current directory with the following contents:", "Now enter the Python interpreter and import this module with the following\ncommand:", "This does not enter the names of the functions defined in ", "fibo", "  directly in\nthe current symbol table; it only enters the module name ", "fibo", " there. Using\nthe module name you can access the functions:", "If you intend to use a function often you can assign it to a local name:"], "M_Code": ["# Fibonacci numbers module", "\n\n", "def", " ", "fib", "(", "n", "):", "    ", "# write Fibonacci series up to n", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "print", "(", "a", ",", " ", "end", "=", "' '", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "print", "()", "\n\n", "def", " ", "fib2", "(", "n", "):", "   ", "# return Fibonacci series up to n", "\n    ", "result", " ", "=", " ", "[]", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "result", ".", "append", "(", "a", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "return", " ", "result", "\n", "\n", ">>> ", "import", " ", "fibo", "\n", "\n", ">>> ", "fibo", ".", "fib", "(", "1000", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987", "\n", ">>> ", "fibo", ".", "fib2", "(", "100", ")", "\n", "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]", "\n", ">>> ", "fibo", ".", "__name__", "\n", "'fibo'", "\n", "\n", ">>> ", "fib", " ", "=", " ", "fibo", ".", "fib", "\n", ">>> ", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n"], "L2_Title": "6.4. Packages", "L2_Desc": ["Packages are a way of structuring Python\u2019s module namespace by using \u201cdotted\nmodule names\u201d.  For example, the module name ", "A.B", " designates a submodule\nnamed ", "B", " in a package named ", "A", ".  Just like the use of modules saves the\nauthors of different modules from having to worry about each other\u2019s global\nvariable names, the use of dotted module names saves the authors of multi-module\npackages like NumPy or Pillow from having to worry about\neach other\u2019s module names.", "Suppose you want to design a collection of modules (a \u201cpackage\u201d) for the uniform\nhandling of sound files and sound data.  There are many different sound file\nformats (usually recognized by their extension, for example: ", ".wav", ",\n", ".aiff", ", ", ".au", "), so you may need to create and maintain a growing\ncollection of modules for the conversion between the various file formats.\nThere are also many different operations you might want to perform on sound data\n(such as mixing, adding echo, applying an equalizer function, creating an\nartificial stereo effect), so in addition you will be writing a never-ending\nstream of modules to perform these operations.  Here\u2019s a possible structure for\nyour package (expressed in terms of a hierarchical filesystem):", "When importing the package, Python searches through the directories on\n", "sys.path", " looking for the package subdirectory.", "The ", "__init__.py", " files are required to make Python treat the directories\nas containing packages; this is done to prevent directories with a common name,\nsuch as ", "string", ", from unintentionally hiding valid modules that occur later\non the module search path. In the simplest case, ", "__init__.py", " can just be\nan empty file, but it can also execute initialization code for the package or\nset the ", "__all__", " variable, described later.", "Users of the package can import individual modules from the package, for\nexample:", "This loads the submodule ", "sound.effects.echo", ".  It must be referenced with\nits full name.", "An alternative way of importing the submodule is:", "This also loads the submodule ", "echo", ", and makes it available without its\npackage prefix, so it can be used as follows:", "Yet another variation is to import the desired function or variable directly:", "Again, this loads the submodule ", "echo", ", but this makes its function\n", "echofilter()", " directly available:", "Note that when using ", "from", " ", "package", " ", "import", " ", "item", ", the item can be either a\nsubmodule (or subpackage) of the package, or some  other name defined in the\npackage, like a function, class or variable.  The ", "import", " statement first\ntests whether the item is defined in the package; if not, it assumes it is a\nmodule and attempts to load it.  If it fails to find it, an ", "ImportError", "\nexception is raised.", "Contrarily, when using syntax like ", "import", " ", "item.subitem.subsubitem", ", each item\nexcept for the last must be a package; the last item can be a module or a\npackage but can\u2019t be a class or function or variable defined in the previous\nitem."], "L2_Code": ["import", " ", "sound.effects.echo", "\n", "\n", "sound", ".", "effects", ".", "echo", ".", "echofilter", "(", "input", ",", " ", "output", ",", " ", "delay", "=", "0.7", ",", " ", "atten", "=", "4", ")", "\n", "\n", "from", " ", "sound.effects", " ", "import", " ", "echo", "\n", "\n", "echo", ".", "echofilter", "(", "input", ",", " ", "output", ",", " ", "delay", "=", "0.7", ",", " ", "atten", "=", "4", ")", "\n", "\n", "from", " ", "sound.effects.echo", " ", "import", " ", "echofilter", "\n", "\n", "echofilter", "(", "input", ",", " ", "output", ",", " ", "delay", "=", "0.7", ",", " ", "atten", "=", "4", ")", "\n", "\n"], "L3_Title": "6.4.2. Intra-package References", "L3_Desc": ["When packages are structured into subpackages (as with the ", "sound", " package\nin the example), you can use absolute imports to refer to submodules of siblings\npackages.  For example, if the module ", "sound.filters.vocoder", " needs to use\nthe ", "echo", " module in the ", "sound.effects", " package, it can use ", "from", "\n", "sound.effects", " ", "import", " ", "echo", ".", "You can also write relative imports, with the ", "from", " ", "module", " ", "import", " ", "name", " form\nof import statement.  These imports use leading dots to indicate the current and\nparent packages involved in the relative import.  From the ", "surround", "\nmodule for example, you might use:", "Note that relative imports are based on the name of the current module.  Since\nthe name of the main module is always ", "\"__main__\"", ", modules intended for use\nas the main module of a Python application must always use absolute imports."], "L3_Code": ["from", " ", ".", " ", "import", " ", "echo", "\n", "from", " ", "..", " ", "import", " ", "formats", "\n", "from", " ", "..filters", " ", "import", " ", "equalizer", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/modules.html", "Language": "Python", "M_Title": "6. Modules", "M_Desc": ["If you quit from the Python interpreter and enter it again, the definitions you\nhave made (functions and variables) are lost. Therefore, if you want to write a\nsomewhat longer program, you are better off using a text editor to prepare the\ninput for the interpreter and running it with that file as input instead.  This\nis known as creating a ", "script", ".  As your program gets longer, you may want to\nsplit it into several files for easier maintenance.  You may also want to use a\nhandy function that you\u2019ve written in several programs without copying its\ndefinition into each program.", "To support this, Python has a way to put definitions in a file and use them in a\nscript or in an interactive instance of the interpreter. Such a file is called a\n", "module", "; definitions from a module can be ", "imported", " into other modules or into\nthe ", "main", " module (the collection of variables that you have access to in a\nscript executed at the top level and in calculator mode).", "A module is a file containing Python definitions and statements.  The file name\nis the module name with the suffix ", ".py", " appended.  Within a module, the\nmodule\u2019s name (as a string) is available as the value of the global variable\n", "__name__", ".  For instance, use your favorite text editor to create a file\ncalled ", "fibo.py", " in the current directory with the following contents:", "Now enter the Python interpreter and import this module with the following\ncommand:", "This does not enter the names of the functions defined in ", "fibo", "  directly in\nthe current symbol table; it only enters the module name ", "fibo", " there. Using\nthe module name you can access the functions:", "If you intend to use a function often you can assign it to a local name:"], "M_Code": ["# Fibonacci numbers module", "\n\n", "def", " ", "fib", "(", "n", "):", "    ", "# write Fibonacci series up to n", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "print", "(", "a", ",", " ", "end", "=", "' '", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "print", "()", "\n\n", "def", " ", "fib2", "(", "n", "):", "   ", "# return Fibonacci series up to n", "\n    ", "result", " ", "=", " ", "[]", "\n    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n        ", "result", ".", "append", "(", "a", ")", "\n        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n    ", "return", " ", "result", "\n", "\n", ">>> ", "import", " ", "fibo", "\n", "\n", ">>> ", "fibo", ".", "fib", "(", "1000", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987", "\n", ">>> ", "fibo", ".", "fib2", "(", "100", ")", "\n", "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]", "\n", ">>> ", "fibo", ".", "__name__", "\n", "'fibo'", "\n", "\n", ">>> ", "fib", " ", "=", " ", "fibo", ".", "fib", "\n", ">>> ", "fib", "(", "500", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377", "\n", "\n"], "L2_Title": "6.4. Packages", "L2_Desc": ["Packages are a way of structuring Python\u2019s module namespace by using \u201cdotted\nmodule names\u201d.  For example, the module name ", "A.B", " designates a submodule\nnamed ", "B", " in a package named ", "A", ".  Just like the use of modules saves the\nauthors of different modules from having to worry about each other\u2019s global\nvariable names, the use of dotted module names saves the authors of multi-module\npackages like NumPy or Pillow from having to worry about\neach other\u2019s module names.", "Suppose you want to design a collection of modules (a \u201cpackage\u201d) for the uniform\nhandling of sound files and sound data.  There are many different sound file\nformats (usually recognized by their extension, for example: ", ".wav", ",\n", ".aiff", ", ", ".au", "), so you may need to create and maintain a growing\ncollection of modules for the conversion between the various file formats.\nThere are also many different operations you might want to perform on sound data\n(such as mixing, adding echo, applying an equalizer function, creating an\nartificial stereo effect), so in addition you will be writing a never-ending\nstream of modules to perform these operations.  Here\u2019s a possible structure for\nyour package (expressed in terms of a hierarchical filesystem):", "When importing the package, Python searches through the directories on\n", "sys.path", " looking for the package subdirectory.", "The ", "__init__.py", " files are required to make Python treat the directories\nas containing packages; this is done to prevent directories with a common name,\nsuch as ", "string", ", from unintentionally hiding valid modules that occur later\non the module search path. In the simplest case, ", "__init__.py", " can just be\nan empty file, but it can also execute initialization code for the package or\nset the ", "__all__", " variable, described later.", "Users of the package can import individual modules from the package, for\nexample:", "This loads the submodule ", "sound.effects.echo", ".  It must be referenced with\nits full name.", "An alternative way of importing the submodule is:", "This also loads the submodule ", "echo", ", and makes it available without its\npackage prefix, so it can be used as follows:", "Yet another variation is to import the desired function or variable directly:", "Again, this loads the submodule ", "echo", ", but this makes its function\n", "echofilter()", " directly available:", "Note that when using ", "from", " ", "package", " ", "import", " ", "item", ", the item can be either a\nsubmodule (or subpackage) of the package, or some  other name defined in the\npackage, like a function, class or variable.  The ", "import", " statement first\ntests whether the item is defined in the package; if not, it assumes it is a\nmodule and attempts to load it.  If it fails to find it, an ", "ImportError", "\nexception is raised.", "Contrarily, when using syntax like ", "import", " ", "item.subitem.subsubitem", ", each item\nexcept for the last must be a package; the last item can be a module or a\npackage but can\u2019t be a class or function or variable defined in the previous\nitem."], "L2_Code": ["import", " ", "sound.effects.echo", "\n", "\n", "sound", ".", "effects", ".", "echo", ".", "echofilter", "(", "input", ",", " ", "output", ",", " ", "delay", "=", "0.7", ",", " ", "atten", "=", "4", ")", "\n", "\n", "from", " ", "sound.effects", " ", "import", " ", "echo", "\n", "\n", "echo", ".", "echofilter", "(", "input", ",", " ", "output", ",", " ", "delay", "=", "0.7", ",", " ", "atten", "=", "4", ")", "\n", "\n", "from", " ", "sound.effects.echo", " ", "import", " ", "echofilter", "\n", "\n", "echofilter", "(", "input", ",", " ", "output", ",", " ", "delay", "=", "0.7", ",", " ", "atten", "=", "4", ")", "\n", "\n"], "L3_Title": "6.4.3. Packages in Multiple Directories", "L3_Desc": ["Packages support one more special attribute, ", "__path__", ".  This is\ninitialized to be a list containing the name of the directory holding the\npackage\u2019s ", "__init__.py", " before the code in that file is executed.  This\nvariable can be modified; doing so affects future searches for modules and\nsubpackages contained in the package.", "While this feature is not often needed, it can be used to extend the set of\nmodules found in a package.", "Footnotes"], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/interactive.html", "Language": "Python", "M_Title": "14. Interactive Input Editing and History Substitution", "M_Desc": ["Some versions of the Python interpreter support editing of the current input\nline and history substitution, similar to facilities found in the Korn shell and\nthe GNU Bash shell.  This is implemented using the ", "GNU Readline", " library,\nwhich supports various styles of editing.  This library has its own\ndocumentation which we won\u2019t duplicate here."], "M_Code": [], "L2_Title": "14.1. Tab Completion and History Editing", "L2_Desc": ["Completion of variable and module names is\n", "automatically enabled", " at interpreter startup so\nthat the ", "Tab", " key invokes the completion function; it looks at\nPython statement names, the current local variables, and the available\nmodule names.  For dotted expressions such as ", "string.a", ", it will evaluate\nthe expression up to the final ", "'.'", " and then suggest completions from\nthe attributes of the resulting object.  Note that this may execute\napplication-defined code if an object with a ", "__getattr__()", " method\nis part of the expression.  The default configuration also saves your\nhistory into a file named ", ".python_history", " in your user directory.\nThe history will be available again during the next interactive interpreter\nsession."], "L2_Code": [], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/interactive.html", "Language": "Python", "M_Title": "14. Interactive Input Editing and History Substitution", "M_Desc": ["Some versions of the Python interpreter support editing of the current input\nline and history substitution, similar to facilities found in the Korn shell and\nthe GNU Bash shell.  This is implemented using the ", "GNU Readline", " library,\nwhich supports various styles of editing.  This library has its own\ndocumentation which we won\u2019t duplicate here."], "M_Code": [], "L2_Title": "14.2. Alternatives to the Interactive Interpreter", "L2_Desc": ["This facility is an enormous step forward compared to earlier versions of the\ninterpreter; however, some wishes are left: It would be nice if the proper\nindentation were suggested on continuation lines (the parser knows if an indent\ntoken is required next).  The completion mechanism might use the interpreter\u2019s\nsymbol table.  A command to check (or even suggest) matching parentheses,\nquotes, etc., would also be useful.", "One alternative enhanced interactive interpreter that has been around for quite\nsome time is ", "IPython", ", which features tab completion, object exploration and\nadvanced history management.  It can also be thoroughly customized and embedded\ninto other applications.  Another similar enhanced interactive environment is\n", "bpython", "."], "L2_Code": [], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/venv.html", "Language": "Python", "M_Title": "12. Virtual Environments and Packages", "M_Desc": [], "M_Code": [], "L2_Title": "12.1. Introduction", "L2_Desc": ["Python applications will often use packages and modules that don\u2019t\ncome as part of the standard library.  Applications will sometimes\nneed a specific version of a library, because the application may\nrequire that a particular bug has been fixed or the application may be\nwritten using an obsolete version of the library\u2019s interface.", "This means it may not be possible for one Python installation to meet\nthe requirements of every application.  If application A needs version\n1.0 of a particular module but application B needs version 2.0, then\nthe requirements are in conflict and installing either version 1.0 or 2.0\nwill leave one application unable to run.", "The solution for this problem is to create a ", "virtual environment", ", a\nself-contained directory tree that contains a Python installation for a\nparticular version of Python, plus a number of additional packages.", "Different applications can then use different virtual environments.\nTo resolve the earlier example of conflicting requirements,\napplication A can have its own virtual environment with version 1.0\ninstalled while application B has another virtual environment with version 2.0.\nIf application B requires a library be upgraded to version 3.0, this will\nnot affect application A\u2019s environment."], "L2_Code": [], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/venv.html", "Language": "Python", "M_Title": "12. Virtual Environments and Packages", "M_Desc": [], "M_Code": [], "L2_Title": "12.2. Creating Virtual Environments", "L2_Desc": ["The module used to create and manage virtual environments is called\n", "venv", ".  ", "venv", " will usually install the most recent version of\nPython that you have available. If you have multiple versions of Python on your\nsystem, you can select a specific Python version by running ", "python3", " or\nwhichever version you want.", "To create a virtual environment, decide upon a directory where you want to\nplace it, and run the ", "venv", " module as a script with the directory path:", "This will create the ", "tutorial-env", " directory if it doesn\u2019t exist,\nand also create directories inside it containing a copy of the Python\ninterpreter, the standard library, and various supporting files.", "Once you\u2019ve created a virtual environment, you may activate it.", "On Windows, run:", "On Unix or MacOS, run:", "(This script is written for the bash shell.  If you use the\n", "csh", " or ", "fish", " shells, there are alternate\n", "activate.csh", " and ", "activate.fish", " scripts you should use\ninstead.)", "Activating the virtual environment will change your shell\u2019s prompt to show what\nvirtual environment you\u2019re using, and modify the environment so that running\n", "python", " will get you that particular version and installation of Python.\nFor example:"], "L2_Code": ["python3", " ", "-", "m", " ", "venv", " ", "tutorial", "-", "env", "\n", "\n", "tutorial", "-", "env", "\\", "Scripts", "\\", "activate", ".", "bat", "\n", "\n", "source", " ", "tutorial", "-", "env", "/", "bin", "/", "activate", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/venv.html", "Language": "Python", "M_Title": "12. Virtual Environments and Packages", "M_Desc": [], "M_Code": [], "L2_Title": "12.3. Managing Packages with pip", "L2_Desc": ["You can install, upgrade, and remove packages using a program called\n", "pip", ".  By default ", "pip", " will install packages from the Python\nPackage Index, <", "https://pypi.org", ">.  You can browse the Python\nPackage Index by going to it in your web browser, or you can use ", "pip", "\u2019s\nlimited search feature:", "pip", " has a number of subcommands: \u201csearch\u201d, \u201cinstall\u201d, \u201cuninstall\u201d,\n\u201cfreeze\u201d, etc.  (Consult the ", "Installing Python Modules", " guide for\ncomplete documentation for ", "pip", ".)", "You can install the latest version of a package by specifying a package\u2019s name:", "You can also install a specific version of a package by giving the\npackage name  followed by ", "==", " and the version number:", "If you re-run this command, ", "pip", " will notice that the requested\nversion is already installed and do nothing.  You can supply a\ndifferent version number to get that version, or you can run ", "pip", "\n", "install", " ", "--upgrade", " to upgrade the package to the latest version:", "pip", " ", "uninstall", " followed by one or more package names will remove the\npackages from the virtual environment.", "pip", " ", "show", " will display information about a particular package:", "pip", " ", "list", " will display all of the packages installed in the virtual\nenvironment:", "pip", " ", "freeze", " will produce a similar list of the installed packages,\nbut the output uses the format that ", "pip", " ", "install", " expects.\nA common convention is to put this list in a ", "requirements.txt", " file:", "The ", "requirements.txt", " can then be committed to version control and\nshipped as part of an application.  Users can then install all the\nnecessary packages with ", "install", " ", "-r", ":", "pip", " has many more options.  Consult the ", "Installing Python Modules", "\nguide for complete documentation for ", "pip", ".  When you\u2019ve written\na package and want to make it available on the Python Package Index,\nconsult the ", "Distributing Python Modules", " guide."], "L2_Code": [], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures", "M_Desc": ["This chapter describes some things you\u2019ve learned about already in more detail,\nand adds some new things as well."], "M_Code": [], "L2_Title": "5.1. More on Lists", "L2_Desc": ["The list data type has some more methods.  Here are all of the methods of list\nobjects:", "An example that uses most of the list methods:", "You might have noticed that methods like ", "insert", ", ", "remove", " or ", "sort", " that\nonly modify the list have no return value printed \u2013 they return the default\n", "None", ". ", "[1]", "  This is a design principle for all mutable data structures in\nPython."], "L2_Code": [">>> ", "fruits", " ", "=", " ", "[", "'orange'", ",", " ", "'apple'", ",", " ", "'pear'", ",", " ", "'banana'", ",", " ", "'kiwi'", ",", " ", "'apple'", ",", " ", "'banana'", "]", "\n", ">>> ", "fruits", ".", "count", "(", "'apple'", ")", "\n", "2", "\n", ">>> ", "fruits", ".", "count", "(", "'tangerine'", ")", "\n", "0", "\n", ">>> ", "fruits", ".", "index", "(", "'banana'", ")", "\n", "3", "\n", ">>> ", "fruits", ".", "index", "(", "'banana'", ",", " ", "4", ")", "  ", "# Find next banana starting a position 4", "\n", "6", "\n", ">>> ", "fruits", ".", "reverse", "()", "\n", ">>> ", "fruits", "\n", "['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']", "\n", ">>> ", "fruits", ".", "append", "(", "'grape'", ")", "\n", ">>> ", "fruits", "\n", "['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']", "\n", ">>> ", "fruits", ".", "sort", "()", "\n", ">>> ", "fruits", "\n", "['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']", "\n", ">>> ", "fruits", ".", "pop", "()", "\n", "'pear'", "\n", "\n"], "L3_Title": "5.1.1. Using Lists as Stacks", "L3_Desc": ["The list methods make it very easy to use a list as a stack, where the last\nelement added is the first element retrieved (\u201clast-in, first-out\u201d).  To add an\nitem to the top of the stack, use ", "append()", ".  To retrieve an item from the\ntop of the stack, use ", "pop()", " without an explicit index.  For example:"], "L3_Code": [">>> ", "stack", " ", "=", " ", "[", "3", ",", " ", "4", ",", " ", "5", "]", "\n", ">>> ", "stack", ".", "append", "(", "6", ")", "\n", ">>> ", "stack", ".", "append", "(", "7", ")", "\n", ">>> ", "stack", "\n", "[3, 4, 5, 6, 7]", "\n", ">>> ", "stack", ".", "pop", "()", "\n", "7", "\n", ">>> ", "stack", "\n", "[3, 4, 5, 6]", "\n", ">>> ", "stack", ".", "pop", "()", "\n", "6", "\n", ">>> ", "stack", ".", "pop", "()", "\n", "5", "\n", ">>> ", "stack", "\n", "[3, 4]", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures", "M_Desc": ["This chapter describes some things you\u2019ve learned about already in more detail,\nand adds some new things as well."], "M_Code": [], "L2_Title": "5.1. More on Lists", "L2_Desc": ["The list data type has some more methods.  Here are all of the methods of list\nobjects:", "An example that uses most of the list methods:", "You might have noticed that methods like ", "insert", ", ", "remove", " or ", "sort", " that\nonly modify the list have no return value printed \u2013 they return the default\n", "None", ". ", "[1]", "  This is a design principle for all mutable data structures in\nPython."], "L2_Code": [">>> ", "fruits", " ", "=", " ", "[", "'orange'", ",", " ", "'apple'", ",", " ", "'pear'", ",", " ", "'banana'", ",", " ", "'kiwi'", ",", " ", "'apple'", ",", " ", "'banana'", "]", "\n", ">>> ", "fruits", ".", "count", "(", "'apple'", ")", "\n", "2", "\n", ">>> ", "fruits", ".", "count", "(", "'tangerine'", ")", "\n", "0", "\n", ">>> ", "fruits", ".", "index", "(", "'banana'", ")", "\n", "3", "\n", ">>> ", "fruits", ".", "index", "(", "'banana'", ",", " ", "4", ")", "  ", "# Find next banana starting a position 4", "\n", "6", "\n", ">>> ", "fruits", ".", "reverse", "()", "\n", ">>> ", "fruits", "\n", "['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']", "\n", ">>> ", "fruits", ".", "append", "(", "'grape'", ")", "\n", ">>> ", "fruits", "\n", "['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']", "\n", ">>> ", "fruits", ".", "sort", "()", "\n", ">>> ", "fruits", "\n", "['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']", "\n", ">>> ", "fruits", ".", "pop", "()", "\n", "'pear'", "\n", "\n"], "L3_Title": "5.1.2. Using Lists as Queues", "L3_Desc": ["It is also possible to use a list as a queue, where the first element added is\nthe first element retrieved (\u201cfirst-in, first-out\u201d); however, lists are not\nefficient for this purpose.  While appends and pops from the end of list are\nfast, doing inserts or pops from the beginning of a list is slow (because all\nof the other elements have to be shifted by one).", "To implement a queue, use ", "collections.deque", " which was designed to\nhave fast appends and pops from both ends.  For example:"], "L3_Code": [">>> ", "from", " ", "collections", " ", "import", " ", "deque", "\n", ">>> ", "queue", " ", "=", " ", "deque", "([", "\"Eric\"", ",", " ", "\"John\"", ",", " ", "\"Michael\"", "])", "\n", ">>> ", "queue", ".", "append", "(", "\"Terry\"", ")", "           ", "# Terry arrives", "\n", ">>> ", "queue", ".", "append", "(", "\"Graham\"", ")", "          ", "# Graham arrives", "\n", ">>> ", "queue", ".", "popleft", "()", "                 ", "# The first to arrive now leaves", "\n", "'Eric'", "\n", ">>> ", "queue", ".", "popleft", "()", "                 ", "# The second to arrive now leaves", "\n", "'John'", "\n", ">>> ", "queue", "                           ", "# Remaining queue in order of arrival", "\n", "deque(['Michael', 'Terry', 'Graham'])", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures", "M_Desc": ["This chapter describes some things you\u2019ve learned about already in more detail,\nand adds some new things as well."], "M_Code": [], "L2_Title": "5.1. More on Lists", "L2_Desc": ["The list data type has some more methods.  Here are all of the methods of list\nobjects:", "An example that uses most of the list methods:", "You might have noticed that methods like ", "insert", ", ", "remove", " or ", "sort", " that\nonly modify the list have no return value printed \u2013 they return the default\n", "None", ". ", "[1]", "  This is a design principle for all mutable data structures in\nPython."], "L2_Code": [">>> ", "fruits", " ", "=", " ", "[", "'orange'", ",", " ", "'apple'", ",", " ", "'pear'", ",", " ", "'banana'", ",", " ", "'kiwi'", ",", " ", "'apple'", ",", " ", "'banana'", "]", "\n", ">>> ", "fruits", ".", "count", "(", "'apple'", ")", "\n", "2", "\n", ">>> ", "fruits", ".", "count", "(", "'tangerine'", ")", "\n", "0", "\n", ">>> ", "fruits", ".", "index", "(", "'banana'", ")", "\n", "3", "\n", ">>> ", "fruits", ".", "index", "(", "'banana'", ",", " ", "4", ")", "  ", "# Find next banana starting a position 4", "\n", "6", "\n", ">>> ", "fruits", ".", "reverse", "()", "\n", ">>> ", "fruits", "\n", "['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']", "\n", ">>> ", "fruits", ".", "append", "(", "'grape'", ")", "\n", ">>> ", "fruits", "\n", "['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']", "\n", ">>> ", "fruits", ".", "sort", "()", "\n", ">>> ", "fruits", "\n", "['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']", "\n", ">>> ", "fruits", ".", "pop", "()", "\n", "'pear'", "\n", "\n"], "L3_Title": "5.1.3. List Comprehensions", "L3_Desc": ["List comprehensions provide a concise way to create lists.\nCommon applications are to make new lists where each element is the result of\nsome operations applied to each member of another sequence or iterable, or to\ncreate a subsequence of those elements that satisfy a certain condition.", "For example, assume we want to create a list of squares, like:", "Note that this creates (or overwrites) a variable named ", "x", " that still exists\nafter the loop completes.  We can calculate the list of squares without any\nside effects using:", "or, equivalently:", "which is more concise and readable.", "A list comprehension consists of brackets containing an expression followed\nby a ", "for", " clause, then zero or more ", "for", " or ", "if", "\nclauses.  The result will be a new list resulting from evaluating the expression\nin the context of the ", "for", " and ", "if", " clauses which follow it.\nFor example, this listcomp combines the elements of two lists if they are not\nequal:", "and it\u2019s equivalent to:", "Note how the order of the ", "for", " and ", "if", " statements is the\nsame in both these snippets.", "If the expression is a tuple (e.g. the ", "(x,", " ", "y)", " in the previous example),\nit must be parenthesized.", "List comprehensions can contain complex expressions and nested functions:"], "L3_Code": [">>> ", "squares", " ", "=", " ", "[]", "\n", ">>> ", "for", " ", "x", " ", "in", " ", "range", "(", "10", "):", "\n", "... ", "    ", "squares", ".", "append", "(", "x", "**", "2", ")", "\n", "...", "\n", ">>> ", "squares", "\n", "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]", "\n", "\n", "squares", " ", "=", " ", "list", "(", "map", "(", "lambda", " ", "x", ":", " ", "x", "**", "2", ",", " ", "range", "(", "10", ")))", "\n", "\n", "squares", " ", "=", " ", "[", "x", "**", "2", " ", "for", " ", "x", " ", "in", " ", "range", "(", "10", ")]", "\n", "\n", ">>> ", "[(", "x", ",", " ", "y", ")", " ", "for", " ", "x", " ", "in", " ", "[", "1", ",", "2", ",", "3", "]", " ", "for", " ", "y", " ", "in", " ", "[", "3", ",", "1", ",", "4", "]", " ", "if", " ", "x", " ", "!=", " ", "y", "]", "\n", "[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]", "\n", "\n", ">>> ", "combs", " ", "=", " ", "[]", "\n", ">>> ", "for", " ", "x", " ", "in", " ", "[", "1", ",", "2", ",", "3", "]:", "\n", "... ", "    ", "for", " ", "y", " ", "in", " ", "[", "3", ",", "1", ",", "4", "]:", "\n", "... ", "        ", "if", " ", "x", " ", "!=", " ", "y", ":", "\n", "... ", "            ", "combs", ".", "append", "((", "x", ",", " ", "y", "))", "\n", "...", "\n", ">>> ", "combs", "\n", "[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]", "\n", "\n", ">>> ", "vec", " ", "=", " ", "[", "-", "4", ",", " ", "-", "2", ",", " ", "0", ",", " ", "2", ",", " ", "4", "]", "\n", ">>> ", "# create a new list with the values doubled", "\n", ">>> ", "[", "x", "*", "2", " ", "for", " ", "x", " ", "in", " ", "vec", "]", "\n", "[-8, -4, 0, 4, 8]", "\n", ">>> ", "# filter the list to exclude negative numbers", "\n", ">>> ", "[", "x", " ", "for", " ", "x", " ", "in", " ", "vec", " ", "if", " ", "x", " ", ">=", " ", "0", "]", "\n", "[0, 2, 4]", "\n", ">>> ", "# apply a function to all the elements", "\n", ">>> ", "[", "abs", "(", "x", ")", " ", "for", " ", "x", " ", "in", " ", "vec", "]", "\n", "[4, 2, 0, 2, 4]", "\n", ">>> ", "# call a method on each element", "\n", ">>> ", "freshfruit", " ", "=", " ", "[", "'  banana'", ",", " ", "'  loganberry '", ",", " ", "'passion fruit  '", "]", "\n", ">>> ", "[", "weapon", ".", "strip", "()", " ", "for", " ", "weapon", " ", "in", " ", "freshfruit", "]", "\n", "['banana', 'loganberry', 'passion fruit']", "\n", ">>> ", "# create a list of 2-tuples like (number, square)", "\n", ">>> ", "[(", "x", ",", " ", "x", "**", "2", ")", " ", "for", " ", "x", " ", "in", " ", "range", "(", "6", ")]", "\n", "[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]", "\n", ">>> ", "# the tuple must be parenthesized, otherwise an error is raised", "\n", ">>> ", "[", "x", ",", " ", "x", "**", "2", " ", "for", " ", "x", " ", "in", " ", "range", "(", "6", ")]", "\n", "  File \"<stdin>\", line 1, in <module>", "\n", "    [x, x**2 for x in range(6)]", "\n", "               ^", "\n", "SyntaxError: invalid syntax", "\n", ">>> ", "# flatten a list using a listcomp with two 'for'", "\n", ">>> ", "vec", " ", "=", " ", "[[", "1", ",", "2", ",", "3", "],", " ", "[", "4", ",", "5", ",", "6", "],", " ", "[", "7", ",", "8", ",", "9", "]]", "\n", ">>> ", "[", "num", " ", "for", " ", "elem", " ", "in", " ", "vec", " ", "for", " ", "num", " ", "in", " ", "elem", "]", "\n", "[1, 2, 3, 4, 5, 6, 7, 8, 9]", "\n", "\n", ">>> ", "from", " ", "math", " ", "import", " ", "pi", "\n", ">>> ", "[", "str", "(", "round", "(", "pi", ",", " ", "i", "))", " ", "for", " ", "i", " ", "in", " ", "range", "(", "1", ",", " ", "6", ")]", "\n", "['3.1', '3.14', '3.142', '3.1416', '3.14159']", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures", "M_Desc": ["This chapter describes some things you\u2019ve learned about already in more detail,\nand adds some new things as well."], "M_Code": [], "L2_Title": "5.1. More on Lists", "L2_Desc": ["The list data type has some more methods.  Here are all of the methods of list\nobjects:", "An example that uses most of the list methods:", "You might have noticed that methods like ", "insert", ", ", "remove", " or ", "sort", " that\nonly modify the list have no return value printed \u2013 they return the default\n", "None", ". ", "[1]", "  This is a design principle for all mutable data structures in\nPython."], "L2_Code": [">>> ", "fruits", " ", "=", " ", "[", "'orange'", ",", " ", "'apple'", ",", " ", "'pear'", ",", " ", "'banana'", ",", " ", "'kiwi'", ",", " ", "'apple'", ",", " ", "'banana'", "]", "\n", ">>> ", "fruits", ".", "count", "(", "'apple'", ")", "\n", "2", "\n", ">>> ", "fruits", ".", "count", "(", "'tangerine'", ")", "\n", "0", "\n", ">>> ", "fruits", ".", "index", "(", "'banana'", ")", "\n", "3", "\n", ">>> ", "fruits", ".", "index", "(", "'banana'", ",", " ", "4", ")", "  ", "# Find next banana starting a position 4", "\n", "6", "\n", ">>> ", "fruits", ".", "reverse", "()", "\n", ">>> ", "fruits", "\n", "['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']", "\n", ">>> ", "fruits", ".", "append", "(", "'grape'", ")", "\n", ">>> ", "fruits", "\n", "['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']", "\n", ">>> ", "fruits", ".", "sort", "()", "\n", ">>> ", "fruits", "\n", "['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']", "\n", ">>> ", "fruits", ".", "pop", "()", "\n", "'pear'", "\n", "\n"], "L3_Title": "5.1.4. Nested List Comprehensions", "L3_Desc": ["The initial expression in a list comprehension can be any arbitrary expression,\nincluding another list comprehension.", "Consider the following example of a 3x4 matrix implemented as a list of\n3 lists of length 4:", "The following list comprehension will transpose rows and columns:", "As we saw in the previous section, the nested listcomp is evaluated in\nthe context of the ", "for", " that follows it, so this example is\nequivalent to:", "which, in turn, is the same as:", "In the real world, you should prefer built-in functions to complex flow statements.\nThe ", "zip()", " function would do a great job for this use case:", "See ", "Unpacking Argument Lists", " for details on the asterisk in this line."], "L3_Code": [">>> ", "matrix", " ", "=", " ", "[", "\n", "... ", "    ", "[", "1", ",", " ", "2", ",", " ", "3", ",", " ", "4", "],", "\n", "... ", "    ", "[", "5", ",", " ", "6", ",", " ", "7", ",", " ", "8", "],", "\n", "... ", "    ", "[", "9", ",", " ", "10", ",", " ", "11", ",", " ", "12", "],", "\n", "... ", "]", "\n", "\n", ">>> ", "[[", "row", "[", "i", "]", " ", "for", " ", "row", " ", "in", " ", "matrix", "]", " ", "for", " ", "i", " ", "in", " ", "range", "(", "4", ")]", "\n", "[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]", "\n", "\n", ">>> ", "transposed", " ", "=", " ", "[]", "\n", ">>> ", "for", " ", "i", " ", "in", " ", "range", "(", "4", "):", "\n", "... ", "    ", "transposed", ".", "append", "([", "row", "[", "i", "]", " ", "for", " ", "row", " ", "in", " ", "matrix", "])", "\n", "...", "\n", ">>> ", "transposed", "\n", "[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]", "\n", "\n", ">>> ", "transposed", " ", "=", " ", "[]", "\n", ">>> ", "for", " ", "i", " ", "in", " ", "range", "(", "4", "):", "\n", "... ", "    ", "# the following 3 lines implement the nested listcomp", "\n", "... ", "    ", "transposed_row", " ", "=", " ", "[]", "\n", "... ", "    ", "for", " ", "row", " ", "in", " ", "matrix", ":", "\n", "... ", "        ", "transposed_row", ".", "append", "(", "row", "[", "i", "])", "\n", "... ", "    ", "transposed", ".", "append", "(", "transposed_row", ")", "\n", "...", "\n", ">>> ", "transposed", "\n", "[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]", "\n", "\n", ">>> ", "list", "(", "zip", "(", "*", "matrix", "))", "\n", "[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures", "M_Desc": ["This chapter describes some things you\u2019ve learned about already in more detail,\nand adds some new things as well."], "M_Code": [], "L2_Title": "5.2. The ", "L2_Desc": ["There is a way to remove an item from a list given its index instead of its\nvalue: the ", "del", " statement.  This differs from the ", "pop()", " method\nwhich returns a value.  The ", "del", " statement can also be used to remove\nslices from a list or clear the entire list (which we did earlier by assignment\nof an empty list to the slice).  For example:", "del", " can also be used to delete entire variables:", "Referencing the name ", "a", " hereafter is an error (at least until another value\nis assigned to it).  We\u2019ll find other uses for ", "del", " later."], "L2_Code": [">>> ", "a", " ", "=", " ", "[", "-", "1", ",", " ", "1", ",", " ", "66.25", ",", " ", "333", ",", " ", "333", ",", " ", "1234.5", "]", "\n", ">>> ", "del", " ", "a", "[", "0", "]", "\n", ">>> ", "a", "\n", "[1, 66.25, 333, 333, 1234.5]", "\n", ">>> ", "del", " ", "a", "[", "2", ":", "4", "]", "\n", ">>> ", "a", "\n", "[1, 66.25, 1234.5]", "\n", ">>> ", "del", " ", "a", "[:]", "\n", ">>> ", "a", "\n", "[]", "\n", "\n", ">>> ", "del", " ", "a", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures", "M_Desc": ["This chapter describes some things you\u2019ve learned about already in more detail,\nand adds some new things as well."], "M_Code": [], "L2_Title": "5.3. Tuples and Sequences", "L2_Desc": ["We saw that lists and strings have many common properties, such as indexing and\nslicing operations.  They are two examples of ", "sequence", " data types (see\n", "Sequence Types \u2014 list, tuple, range", ").  Since Python is an evolving language, other sequence data\ntypes may be added.  There is also another standard sequence data type: the\n", "tuple", ".", "A tuple consists of a number of values separated by commas, for instance:", "As you see, on output tuples are always enclosed in parentheses, so that nested\ntuples are interpreted correctly; they may be input with or without surrounding\nparentheses, although often parentheses are necessary anyway (if the tuple is\npart of a larger expression).  It is not possible to assign to the individual\nitems of a tuple, however it is possible to create tuples which contain mutable\nobjects, such as lists.", "Though tuples may seem similar to lists, they are often used in different\nsituations and for different purposes.\nTuples are ", "immutable", ", and usually contain a heterogeneous sequence of\nelements that are accessed via unpacking (see later in this section) or indexing\n(or even by attribute in the case of ", "namedtuples", ").\nLists are ", "mutable", ", and their elements are usually homogeneous and are\naccessed by iterating over the list.", "A special problem is the construction of tuples containing 0 or 1 items: the\nsyntax has some extra quirks to accommodate these.  Empty tuples are constructed\nby an empty pair of parentheses; a tuple with one item is constructed by\nfollowing a value with a comma (it is not sufficient to enclose a single value\nin parentheses). Ugly, but effective.  For example:", "The statement ", "t", " ", "=", " ", "12345,", " ", "54321,", " ", "'hello!'", " is an example of ", "tuple packing", ":\nthe values ", "12345", ", ", "54321", " and ", "'hello!'", " are packed together in a tuple.\nThe reverse operation is also possible:", "This is called, appropriately enough, ", "sequence unpacking", " and works for any\nsequence on the right-hand side.  Sequence unpacking requires that there are as\nmany variables on the left side of the equals sign as there are elements in the\nsequence.  Note that multiple assignment is really just a combination of tuple\npacking and sequence unpacking."], "L2_Code": [">>> ", "t", " ", "=", " ", "12345", ",", " ", "54321", ",", " ", "'hello!'", "\n", ">>> ", "t", "[", "0", "]", "\n", "12345", "\n", ">>> ", "t", "\n", "(12345, 54321, 'hello!')", "\n", ">>> ", "# Tuples may be nested:", "\n", "... ", "u", " ", "=", " ", "t", ",", " ", "(", "1", ",", " ", "2", ",", " ", "3", ",", " ", "4", ",", " ", "5", ")", "\n", ">>> ", "u", "\n", "((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))", "\n", ">>> ", "# Tuples are immutable:", "\n", "... ", "t", "[", "0", "]", " ", "=", " ", "88888", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "1", ", in ", "<module>", "\n", "TypeError", ": ", "'tuple' object does not support item assignment", "\n", ">>> ", "# but they can contain mutable objects:", "\n", "... ", "v", " ", "=", " ", "([", "1", ",", " ", "2", ",", " ", "3", "],", " ", "[", "3", ",", " ", "2", ",", " ", "1", "])", "\n", ">>> ", "v", "\n", "([1, 2, 3], [3, 2, 1])", "\n", "\n", ">>> ", "empty", " ", "=", " ", "()", "\n", ">>> ", "singleton", " ", "=", " ", "'hello'", ",", "    ", "# <-- note trailing comma", "\n", ">>> ", "len", "(", "empty", ")", "\n", "0", "\n", ">>> ", "len", "(", "singleton", ")", "\n", "1", "\n", ">>> ", "singleton", "\n", "('hello',)", "\n", "\n", ">>> ", "x", ",", " ", "y", ",", " ", "z", " ", "=", " ", "t", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures", "M_Desc": ["This chapter describes some things you\u2019ve learned about already in more detail,\nand adds some new things as well."], "M_Code": [], "L2_Title": "5.4. Sets", "L2_Desc": ["Python also includes a data type for ", "sets", ".  A set is an unordered collection\nwith no duplicate elements.  Basic uses include membership testing and\neliminating duplicate entries.  Set objects also support mathematical operations\nlike union, intersection, difference, and symmetric difference.", "Curly braces or the ", "set()", " function can be used to create sets.  Note: to\ncreate an empty set you have to use ", "set()", ", not ", "{}", "; the latter creates an\nempty dictionary, a data structure that we discuss in the next section.", "Here is a brief demonstration:", "Similarly to ", "list comprehensions", ", set comprehensions\nare also supported:"], "L2_Code": [">>> ", "basket", " ", "=", " ", "{", "'apple'", ",", " ", "'orange'", ",", " ", "'apple'", ",", " ", "'pear'", ",", " ", "'orange'", ",", " ", "'banana'", "}", "\n", ">>> ", "print", "(", "basket", ")", "                      ", "# show that duplicates have been removed", "\n", "{'orange', 'banana', 'pear', 'apple'}", "\n", ">>> ", "'orange'", " ", "in", " ", "basket", "                 ", "# fast membership testing", "\n", "True", "\n", ">>> ", "'crabgrass'", " ", "in", " ", "basket", "\n", "False", "\n\n", ">>> ", "# Demonstrate set operations on unique letters from two words", "\n", "...", "\n", ">>> ", "a", " ", "=", " ", "set", "(", "'abracadabra'", ")", "\n", ">>> ", "b", " ", "=", " ", "set", "(", "'alacazam'", ")", "\n", ">>> ", "a", "                                  ", "# unique letters in a", "\n", "{'a', 'r', 'b', 'c', 'd'}", "\n", ">>> ", "a", " ", "-", " ", "b", "                              ", "# letters in a but not in b", "\n", "{'r', 'd', 'b'}", "\n", ">>> ", "a", " ", "|", " ", "b", "                              ", "# letters in a or b or both", "\n", "{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}", "\n", ">>> ", "a", " ", "&", " ", "b", "                              ", "# letters in both a and b", "\n", "{'a', 'c'}", "\n", ">>> ", "a", " ", "^", " ", "b", "                              ", "# letters in a or b but not both", "\n", "{'r', 'd', 'b', 'm', 'z', 'l'}", "\n", "\n", ">>> ", "a", " ", "=", " ", "{", "x", " ", "for", " ", "x", " ", "in", " ", "'abracadabra'", " ", "if", " ", "x", " ", "not", " ", "in", " ", "'abc'", "}", "\n", ">>> ", "a", "\n", "{'r', 'd'}", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures", "M_Desc": ["This chapter describes some things you\u2019ve learned about already in more detail,\nand adds some new things as well."], "M_Code": [], "L2_Title": "5.5. Dictionaries", "L2_Desc": ["Another useful data type built into Python is the ", "dictionary", " (see\n", "Mapping Types \u2014 dict", "). Dictionaries are sometimes found in other languages as\n\u201cassociative memories\u201d or \u201cassociative arrays\u201d.  Unlike sequences, which are\nindexed by a range of numbers, dictionaries are indexed by ", "keys", ", which can be\nany immutable type; strings and numbers can always be keys.  Tuples can be used\nas keys if they contain only strings, numbers, or tuples; if a tuple contains\nany mutable object either directly or indirectly, it cannot be used as a key.\nYou can\u2019t use lists as keys, since lists can be modified in place using index\nassignments, slice assignments, or methods like ", "append()", " and\n", "extend()", ".", "It is best to think of a dictionary as a set of ", "key: value", " pairs,\nwith the requirement that the keys are unique (within one dictionary). A pair of\nbraces creates an empty dictionary: ", "{}", ". Placing a comma-separated list of\nkey:value pairs within the braces adds initial key:value pairs to the\ndictionary; this is also the way dictionaries are written on output.", "The main operations on a dictionary are storing a value with some key and\nextracting the value given the key.  It is also possible to delete a key:value\npair with ", "del", ". If you store using a key that is already in use, the old\nvalue associated with that key is forgotten.  It is an error to extract a value\nusing a non-existent key.", "Performing ", "list(d)", " on a dictionary returns a list of all the keys\nused in the dictionary, in insertion order (if you want it sorted, just use\n", "sorted(d)", " instead). To check whether a single key is in the\ndictionary, use the ", "in", " keyword.", "Here is a small example using a dictionary:", "The ", "dict()", " constructor builds dictionaries directly from sequences of\nkey-value pairs:", "In addition, dict comprehensions can be used to create dictionaries from\narbitrary key and value expressions:", "When the keys are simple strings, it is sometimes easier to specify pairs using\nkeyword arguments:"], "L2_Code": [">>> ", "tel", " ", "=", " ", "{", "'jack'", ":", " ", "4098", ",", " ", "'sape'", ":", " ", "4139", "}", "\n", ">>> ", "tel", "[", "'guido'", "]", " ", "=", " ", "4127", "\n", ">>> ", "tel", "\n", "{'jack': 4098, 'sape': 4139, 'guido': 4127}", "\n", ">>> ", "tel", "[", "'jack'", "]", "\n", "4098", "\n", ">>> ", "del", " ", "tel", "[", "'sape'", "]", "\n", ">>> ", "tel", "[", "'irv'", "]", " ", "=", " ", "4127", "\n", ">>> ", "tel", "\n", "{'jack': 4098, 'guido': 4127, 'irv': 4127}", "\n", ">>> ", "list", "(", "tel", ")", "\n", "['jack', 'guido', 'irv']", "\n", ">>> ", "sorted", "(", "tel", ")", "\n", "['guido', 'irv', 'jack']", "\n", ">>> ", "'guido'", " ", "in", " ", "tel", "\n", "True", "\n", ">>> ", "'jack'", " ", "not", " ", "in", " ", "tel", "\n", "False", "\n", "\n", ">>> ", "dict", "([(", "'sape'", ",", " ", "4139", "),", " ", "(", "'guido'", ",", " ", "4127", "),", " ", "(", "'jack'", ",", " ", "4098", ")])", "\n", "{'sape': 4139, 'guido': 4127, 'jack': 4098}", "\n", "\n", ">>> ", "{", "x", ":", " ", "x", "**", "2", " ", "for", " ", "x", " ", "in", " ", "(", "2", ",", " ", "4", ",", " ", "6", ")}", "\n", "{2: 4, 4: 16, 6: 36}", "\n", "\n", ">>> ", "dict", "(", "sape", "=", "4139", ",", " ", "guido", "=", "4127", ",", " ", "jack", "=", "4098", ")", "\n", "{'sape': 4139, 'guido': 4127, 'jack': 4098}", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures", "M_Desc": ["This chapter describes some things you\u2019ve learned about already in more detail,\nand adds some new things as well."], "M_Code": [], "L2_Title": "5.6. Looping Techniques", "L2_Desc": ["When looping through dictionaries, the key and corresponding value can be\nretrieved at the same time using the ", "items()", " method.", "When looping through a sequence, the position index and corresponding value can\nbe retrieved at the same time using the ", "enumerate()", " function.", "To loop over two or more sequences at the same time, the entries can be paired\nwith the ", "zip()", " function.", "To loop over a sequence in reverse, first specify the sequence in a forward\ndirection and then call the ", "reversed()", " function.", "To loop over a sequence in sorted order, use the ", "sorted()", " function which\nreturns a new sorted list while leaving the source unaltered.", "It is sometimes tempting to change a list while you are looping over it;\nhowever, it is often simpler and safer to create a new list instead."], "L2_Code": [">>> ", "knights", " ", "=", " ", "{", "'gallahad'", ":", " ", "'the pure'", ",", " ", "'robin'", ":", " ", "'the brave'", "}", "\n", ">>> ", "for", " ", "k", ",", " ", "v", " ", "in", " ", "knights", ".", "items", "():", "\n", "... ", "    ", "print", "(", "k", ",", " ", "v", ")", "\n", "...", "\n", "gallahad the pure", "\n", "robin the brave", "\n", "\n", ">>> ", "for", " ", "i", ",", " ", "v", " ", "in", " ", "enumerate", "([", "'tic'", ",", " ", "'tac'", ",", " ", "'toe'", "]):", "\n", "... ", "    ", "print", "(", "i", ",", " ", "v", ")", "\n", "...", "\n", "0 tic", "\n", "1 tac", "\n", "2 toe", "\n", "\n", ">>> ", "questions", " ", "=", " ", "[", "'name'", ",", " ", "'quest'", ",", " ", "'favorite color'", "]", "\n", ">>> ", "answers", " ", "=", " ", "[", "'lancelot'", ",", " ", "'the holy grail'", ",", " ", "'blue'", "]", "\n", ">>> ", "for", " ", "q", ",", " ", "a", " ", "in", " ", "zip", "(", "questions", ",", " ", "answers", "):", "\n", "... ", "    ", "print", "(", "'What is your ", "{0}", "?  It is ", "{1}", ".'", ".", "format", "(", "q", ",", " ", "a", "))", "\n", "...", "\n", "What is your name?  It is lancelot.", "\n", "What is your quest?  It is the holy grail.", "\n", "What is your favorite color?  It is blue.", "\n", "\n", ">>> ", "for", " ", "i", " ", "in", " ", "reversed", "(", "range", "(", "1", ",", " ", "10", ",", " ", "2", ")):", "\n", "... ", "    ", "print", "(", "i", ")", "\n", "...", "\n", "9", "\n", "7", "\n", "5", "\n", "3", "\n", "1", "\n", "\n", ">>> ", "basket", " ", "=", " ", "[", "'apple'", ",", " ", "'orange'", ",", " ", "'apple'", ",", " ", "'pear'", ",", " ", "'orange'", ",", " ", "'banana'", "]", "\n", ">>> ", "for", " ", "f", " ", "in", " ", "sorted", "(", "set", "(", "basket", ")):", "\n", "... ", "    ", "print", "(", "f", ")", "\n", "...", "\n", "apple", "\n", "banana", "\n", "orange", "\n", "pear", "\n", "\n", ">>> ", "import", " ", "math", "\n", ">>> ", "raw_data", " ", "=", " ", "[", "56.2", ",", " ", "float", "(", "'NaN'", "),", " ", "51.7", ",", " ", "55.3", ",", " ", "52.5", ",", " ", "float", "(", "'NaN'", "),", " ", "47.8", "]", "\n", ">>> ", "filtered_data", " ", "=", " ", "[]", "\n", ">>> ", "for", " ", "value", " ", "in", " ", "raw_data", ":", "\n", "... ", "    ", "if", " ", "not", " ", "math", ".", "isnan", "(", "value", "):", "\n", "... ", "        ", "filtered_data", ".", "append", "(", "value", ")", "\n", "...", "\n", ">>> ", "filtered_data", "\n", "[56.2, 51.7, 55.3, 52.5, 47.8]", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures", "M_Desc": ["This chapter describes some things you\u2019ve learned about already in more detail,\nand adds some new things as well."], "M_Code": [], "L2_Title": "5.7. More on Conditions", "L2_Desc": ["The conditions used in ", "while", " and ", "if", " statements can contain any\noperators, not just comparisons.", "The comparison operators ", "in", " and ", "not", " ", "in", " check whether a value occurs\n(does not occur) in a sequence.  The operators ", "is", " and ", "is", " ", "not", " compare\nwhether two objects are really the same object; this only matters for mutable\nobjects like lists.  All comparison operators have the same priority, which is\nlower than that of all numerical operators.", "Comparisons can be chained.  For example, ", "a", " ", "<", " ", "b", " ", "==", " ", "c", " tests whether ", "a", " is\nless than ", "b", " and moreover ", "b", " equals ", "c", ".", "Comparisons may be combined using the Boolean operators ", "and", " and ", "or", ", and\nthe outcome of a comparison (or of any other Boolean expression) may be negated\nwith ", "not", ".  These have lower priorities than comparison operators; between\nthem, ", "not", " has the highest priority and ", "or", " the lowest, so that ", "A", " ", "and", "\n", "not", " ", "B", " ", "or", " ", "C", " is equivalent to ", "(A", " ", "and", " ", "(not", " ", "B))", " ", "or", " ", "C", ". As always, parentheses\ncan be used to express the desired composition.", "The Boolean operators ", "and", " and ", "or", " are so-called ", "short-circuit", "\noperators: their arguments are evaluated from left to right, and evaluation\nstops as soon as the outcome is determined.  For example, if ", "A", " and ", "C", " are\ntrue but ", "B", " is false, ", "A", " ", "and", " ", "B", " ", "and", " ", "C", " does not evaluate the expression\n", "C", ".  When used as a general value and not as a Boolean, the return value of a\nshort-circuit operator is the last evaluated argument.", "It is possible to assign the result of a comparison or other Boolean expression\nto a variable.  For example,", "Note that in Python, unlike C, assignment cannot occur inside expressions. C\nprogrammers may grumble about this, but it avoids a common class of problems\nencountered in C programs: typing ", "=", " in an expression when ", "==", " was\nintended."], "L2_Code": [">>> ", "string1", ",", " ", "string2", ",", " ", "string3", " ", "=", " ", "''", ",", " ", "'Trondheim'", ",", " ", "'Hammer Dance'", "\n", ">>> ", "non_null", " ", "=", " ", "string1", " ", "or", " ", "string2", " ", "or", " ", "string3", "\n", ">>> ", "non_null", "\n", "'Trondheim'", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/datastructures.html", "Language": "Python", "M_Title": "5. Data Structures", "M_Desc": ["This chapter describes some things you\u2019ve learned about already in more detail,\nand adds some new things as well."], "M_Code": [], "L2_Title": "5.8. Comparing Sequences and Other Types", "L2_Desc": ["Sequence objects may be compared to other objects with the same sequence type.\nThe comparison uses ", "lexicographical", " ordering: first the first two items are\ncompared, and if they differ this determines the outcome of the comparison; if\nthey are equal, the next two items are compared, and so on, until either\nsequence is exhausted. If two items to be compared are themselves sequences of\nthe same type, the lexicographical comparison is carried out recursively.  If\nall items of two sequences compare equal, the sequences are considered equal.\nIf one sequence is an initial sub-sequence of the other, the shorter sequence is\nthe smaller (lesser) one.  Lexicographical ordering for strings uses the Unicode\ncode point number to order individual characters.  Some examples of comparisons\nbetween sequences of the same type:", "Note that comparing objects of different types with ", "<", " or ", ">", " is legal\nprovided that the objects have appropriate comparison methods.  For example,\nmixed numeric types are compared according to their numeric value, so 0 equals\n0.0, etc.  Otherwise, rather than providing an arbitrary ordering, the\ninterpreter will raise a ", "TypeError", " exception.", "Footnotes"], "L2_Code": ["(", "1", ",", " ", "2", ",", " ", "3", ")", "              ", "<", " ", "(", "1", ",", " ", "2", ",", " ", "4", ")", "\n", "[", "1", ",", " ", "2", ",", " ", "3", "]", "              ", "<", " ", "[", "1", ",", " ", "2", ",", " ", "4", "]", "\n", "'ABC'", " ", "<", " ", "'C'", " ", "<", " ", "'Pascal'", " ", "<", " ", "'Python'", "\n", "(", "1", ",", " ", "2", ",", " ", "3", ",", " ", "4", ")", "           ", "<", " ", "(", "1", ",", " ", "2", ",", " ", "4", ")", "\n", "(", "1", ",", " ", "2", ")", "                 ", "<", " ", "(", "1", ",", " ", "2", ",", " ", "-", "1", ")", "\n", "(", "1", ",", " ", "2", ",", " ", "3", ")", "             ", "==", " ", "(", "1.0", ",", " ", "2.0", ",", " ", "3.0", ")", "\n", "(", "1", ",", " ", "2", ",", " ", "(", "'aa'", ",", " ", "'ab'", "))", "   ", "<", " ", "(", "1", ",", " ", "2", ",", " ", "(", "'abc'", ",", " ", "'a'", "),", " ", "4", ")", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II", "M_Desc": ["This second tour covers more advanced modules that support professional\nprogramming needs.  These modules rarely occur in small scripts."], "M_Code": [], "L2_Title": "11.1. Output Formatting", "L2_Desc": ["The ", "reprlib", " module provides a version of ", "repr()", " customized for\nabbreviated displays of large or deeply nested containers:", "The ", "pprint", " module offers more sophisticated control over printing both\nbuilt-in and user defined objects in a way that is readable by the interpreter.\nWhen the result is longer than one line, the \u201cpretty printer\u201d adds line breaks\nand indentation to more clearly reveal data structure:", "The ", "textwrap", " module formats paragraphs of text to fit a given screen\nwidth:", "The ", "locale", " module accesses a database of culture specific data formats.\nThe grouping attribute of locale\u2019s format function provides a direct way of\nformatting numbers with group separators:"], "L2_Code": [">>> ", "import", " ", "reprlib", "\n", ">>> ", "reprlib", ".", "repr", "(", "set", "(", "'supercalifragilisticexpialidocious'", "))", "\n", "\"{'a', 'c', 'd', 'e', 'f', 'g', ...}\"", "\n", "\n", ">>> ", "import", " ", "pprint", "\n", ">>> ", "t", " ", "=", " ", "[[[[", "'black'", ",", " ", "'cyan'", "],", " ", "'white'", ",", " ", "[", "'green'", ",", " ", "'red'", "]],", " ", "[[", "'magenta'", ",", "\n", "... ", "    ", "'yellow'", "],", " ", "'blue'", "]]]", "\n", "...", "\n", ">>> ", "pprint", ".", "pprint", "(", "t", ",", " ", "width", "=", "30", ")", "\n", "[[[['black', 'cyan'],", "\n", "   'white',", "\n", "   ['green', 'red']],", "\n", "  [['magenta', 'yellow'],", "\n", "   'blue']]]", "\n", "\n", ">>> ", "import", " ", "textwrap", "\n", ">>> ", "doc", " ", "=", " ", "\"\"\"The wrap() method is just like fill() except that it returns", "\n", "... ", "a list of strings instead of one big string with newlines to separate", "\n", "... ", "the wrapped lines.\"\"\"", "\n", "...", "\n", ">>> ", "print", "(", "textwrap", ".", "fill", "(", "doc", ",", " ", "width", "=", "40", "))", "\n", "The wrap() method is just like fill()", "\n", "except that it returns a list of strings", "\n", "instead of one big string with newlines", "\n", "to separate the wrapped lines.", "\n", "\n", ">>> ", "import", " ", "locale", "\n", ">>> ", "locale", ".", "setlocale", "(", "locale", ".", "LC_ALL", ",", " ", "'English_United States.1252'", ")", "\n", "'English_United States.1252'", "\n", ">>> ", "conv", " ", "=", " ", "locale", ".", "localeconv", "()", "          ", "# get a mapping of conventions", "\n", ">>> ", "x", " ", "=", " ", "1234567.8", "\n", ">>> ", "locale", ".", "format", "(", "\"", "%d", "\"", ",", " ", "x", ",", " ", "grouping", "=", "True", ")", "\n", "'1,234,567'", "\n", ">>> ", "locale", ".", "format_string", "(", "\"", "%s%.*f", "\"", ",", " ", "(", "conv", "[", "'currency_symbol'", "],", "\n", "... ", "                     ", "conv", "[", "'frac_digits'", "],", " ", "x", "),", " ", "grouping", "=", "True", ")", "\n", "'$1,234,567.80'", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II", "M_Desc": ["This second tour covers more advanced modules that support professional\nprogramming needs.  These modules rarely occur in small scripts."], "M_Code": [], "L2_Title": "11.2. Templating", "L2_Desc": ["The ", "string", " module includes a versatile ", "Template", " class\nwith a simplified syntax suitable for editing by end-users.  This allows users\nto customize their applications without having to alter the application.", "The format uses placeholder names formed by ", "$", " with valid Python identifiers\n(alphanumeric characters and underscores).  Surrounding the placeholder with\nbraces allows it to be followed by more alphanumeric letters with no intervening\nspaces.  Writing ", "$$", " creates a single escaped ", "$", ":", "The ", "substitute()", " method raises a ", "KeyError", " when a\nplaceholder is not supplied in a dictionary or a keyword argument.  For\nmail-merge style applications, user supplied data may be incomplete and the\n", "safe_substitute()", " method may be more appropriate \u2014\nit will leave placeholders unchanged if data is missing:", "Template subclasses can specify a custom delimiter.  For example, a batch\nrenaming utility for a photo browser may elect to use percent signs for\nplaceholders such as the current date, image sequence number, or file format:", "Another application for templating is separating program logic from the details\nof multiple output formats.  This makes it possible to substitute custom\ntemplates for XML files, plain text reports, and HTML web reports."], "L2_Code": [">>> ", "from", " ", "string", " ", "import", " ", "Template", "\n", ">>> ", "t", " ", "=", " ", "Template", "(", "'$", "{village}", "folk send $$10 to $cause.'", ")", "\n", ">>> ", "t", ".", "substitute", "(", "village", "=", "'Nottingham'", ",", " ", "cause", "=", "'the ditch fund'", ")", "\n", "'Nottinghamfolk send $10 to the ditch fund.'", "\n", "\n", ">>> ", "t", " ", "=", " ", "Template", "(", "'Return the $item to $owner.'", ")", "\n", ">>> ", "d", " ", "=", " ", "dict", "(", "item", "=", "'unladen swallow'", ")", "\n", ">>> ", "t", ".", "substitute", "(", "d", ")", "\n", "Traceback (most recent call last):", "\n  ", "...", "\n", "KeyError", ": ", "'owner'", "\n", ">>> ", "t", ".", "safe_substitute", "(", "d", ")", "\n", "'Return the unladen swallow to $owner.'", "\n", "\n", ">>> ", "import", " ", "time", ",", " ", "os.path", "\n", ">>> ", "photofiles", " ", "=", " ", "[", "'img_1074.jpg'", ",", " ", "'img_1076.jpg'", ",", " ", "'img_1077.jpg'", "]", "\n", ">>> ", "class", " ", "BatchRename", "(", "Template", "):", "\n", "... ", "    ", "delimiter", " ", "=", " ", "'%'", "\n", ">>> ", "fmt", " ", "=", " ", "input", "(", "'Enter rename style (", "%d", "-date %n-seqnum ", "%f", "-format):  '", ")", "\n", "Enter rename style (%d-date %n-seqnum %f-format):  Ashley_%n%f", "\n\n", ">>> ", "t", " ", "=", " ", "BatchRename", "(", "fmt", ")", "\n", ">>> ", "date", " ", "=", " ", "time", ".", "strftime", "(", "'", "%d", "%b%y'", ")", "\n", ">>> ", "for", " ", "i", ",", " ", "filename", " ", "in", " ", "enumerate", "(", "photofiles", "):", "\n", "... ", "    ", "base", ",", " ", "ext", " ", "=", " ", "os", ".", "path", ".", "splitext", "(", "filename", ")", "\n", "... ", "    ", "newname", " ", "=", " ", "t", ".", "substitute", "(", "d", "=", "date", ",", " ", "n", "=", "i", ",", " ", "f", "=", "ext", ")", "\n", "... ", "    ", "print", "(", "'", "{0}", " --> ", "{1}", "'", ".", "format", "(", "filename", ",", " ", "newname", "))", "\n\n", "img_1074.jpg --> Ashley_0.jpg", "\n", "img_1076.jpg --> Ashley_1.jpg", "\n", "img_1077.jpg --> Ashley_2.jpg", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II", "M_Desc": ["This second tour covers more advanced modules that support professional\nprogramming needs.  These modules rarely occur in small scripts."], "M_Code": [], "L2_Title": "11.3. Working with Binary Data Record Layouts", "L2_Desc": ["The ", "struct", " module provides ", "pack()", " and\n", "unpack()", " functions for working with variable length binary\nrecord formats.  The following example shows\nhow to loop through header information in a ZIP file without using the\n", "zipfile", " module.  Pack codes ", "\"H\"", " and ", "\"I\"", " represent two and four\nbyte unsigned numbers respectively.  The ", "\"<\"", " indicates that they are\nstandard size and in little-endian byte order:"], "L2_Code": ["import", " ", "struct", "\n\n", "with", " ", "open", "(", "'myfile.zip'", ",", " ", "'rb'", ")", " ", "as", " ", "f", ":", "\n    ", "data", " ", "=", " ", "f", ".", "read", "()", "\n\n", "start", " ", "=", " ", "0", "\n", "for", " ", "i", " ", "in", " ", "range", "(", "3", "):", "                      ", "# show the first 3 file headers", "\n    ", "start", " ", "+=", " ", "14", "\n    ", "fields", " ", "=", " ", "struct", ".", "unpack", "(", "'<IIIHH'", ",", " ", "data", "[", "start", ":", "start", "+", "16", "])", "\n    ", "crc32", ",", " ", "comp_size", ",", " ", "uncomp_size", ",", " ", "filenamesize", ",", " ", "extra_size", " ", "=", " ", "fields", "\n\n    ", "start", " ", "+=", " ", "16", "\n    ", "filename", " ", "=", " ", "data", "[", "start", ":", "start", "+", "filenamesize", "]", "\n    ", "start", " ", "+=", " ", "filenamesize", "\n    ", "extra", " ", "=", " ", "data", "[", "start", ":", "start", "+", "extra_size", "]", "\n    ", "print", "(", "filename", ",", " ", "hex", "(", "crc32", "),", " ", "comp_size", ",", " ", "uncomp_size", ")", "\n\n    ", "start", " ", "+=", " ", "extra_size", " ", "+", " ", "comp_size", "     ", "# skip to the next header", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II", "M_Desc": ["This second tour covers more advanced modules that support professional\nprogramming needs.  These modules rarely occur in small scripts."], "M_Code": [], "L2_Title": "11.4. Multi-threading", "L2_Desc": ["Threading is a technique for decoupling tasks which are not sequentially\ndependent.  Threads can be used to improve the responsiveness of applications\nthat accept user input while other tasks run in the background.  A related use\ncase is running I/O in parallel with computations in another thread.", "The following code shows how the high level ", "threading", " module can run\ntasks in background while the main program continues to run:", "The principal challenge of multi-threaded applications is coordinating threads\nthat share data or other resources.  To that end, the threading module provides\na number of synchronization primitives including locks, events, condition\nvariables, and semaphores.", "While those tools are powerful, minor design errors can result in problems that\nare difficult to reproduce.  So, the preferred approach to task coordination is\nto concentrate all access to a resource in a single thread and then use the\n", "queue", " module to feed that thread with requests from other threads.\nApplications using ", "Queue", " objects for inter-thread communication and\ncoordination are easier to design, more readable, and more reliable."], "L2_Code": ["import", " ", "threading", ",", " ", "zipfile", "\n\n", "class", " ", "AsyncZip", "(", "threading", ".", "Thread", "):", "\n    ", "def", " ", "__init__", "(", "self", ",", " ", "infile", ",", " ", "outfile", "):", "\n        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n        ", "self", ".", "infile", " ", "=", " ", "infile", "\n        ", "self", ".", "outfile", " ", "=", " ", "outfile", "\n\n    ", "def", " ", "run", "(", "self", "):", "\n        ", "f", " ", "=", " ", "zipfile", ".", "ZipFile", "(", "self", ".", "outfile", ",", " ", "'w'", ",", " ", "zipfile", ".", "ZIP_DEFLATED", ")", "\n        ", "f", ".", "write", "(", "self", ".", "infile", ")", "\n        ", "f", ".", "close", "()", "\n        ", "print", "(", "'Finished background zip of:'", ",", " ", "self", ".", "infile", ")", "\n\n", "background", " ", "=", " ", "AsyncZip", "(", "'mydata.txt'", ",", " ", "'myarchive.zip'", ")", "\n", "background", ".", "start", "()", "\n", "print", "(", "'The main program continues to run in foreground.'", ")", "\n\n", "background", ".", "join", "()", "    ", "# Wait for the background task to finish", "\n", "print", "(", "'Main program waited until background was done.'", ")", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II", "M_Desc": ["This second tour covers more advanced modules that support professional\nprogramming needs.  These modules rarely occur in small scripts."], "M_Code": [], "L2_Title": "11.5. Logging", "L2_Desc": ["The ", "logging", " module offers a full featured and flexible logging system.\nAt its simplest, log messages are sent to a file or to ", "sys.stderr", ":", "This produces the following output:", "By default, informational and debugging messages are suppressed and the output\nis sent to standard error.  Other output options include routing messages\nthrough email, datagrams, sockets, or to an HTTP Server.  New filters can select\ndifferent routing based on message priority: ", "DEBUG", ",\n", "INFO", ", ", "WARNING", ", ", "ERROR", ",\nand ", "CRITICAL", ".", "The logging system can be configured directly from Python or can be loaded from\na user editable configuration file for customized logging without altering the\napplication."], "L2_Code": ["import", " ", "logging", "\n", "logging", ".", "debug", "(", "'Debugging information'", ")", "\n", "logging", ".", "info", "(", "'Informational message'", ")", "\n", "logging", ".", "warning", "(", "'Warning:config file ", "%s", " not found'", ",", " ", "'server.conf'", ")", "\n", "logging", ".", "error", "(", "'Error occurred'", ")", "\n", "logging", ".", "critical", "(", "'Critical error -- shutting down'", ")", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II", "M_Desc": ["This second tour covers more advanced modules that support professional\nprogramming needs.  These modules rarely occur in small scripts."], "M_Code": [], "L2_Title": "11.6. Weak References", "L2_Desc": ["Python does automatic memory management (reference counting for most objects and\n", "garbage collection", " to eliminate cycles).  The memory is freed shortly\nafter the last reference to it has been eliminated.", "This approach works fine for most applications but occasionally there is a need\nto track objects only as long as they are being used by something else.\nUnfortunately, just tracking them creates a reference that makes them permanent.\nThe ", "weakref", " module provides tools for tracking objects without creating a\nreference.  When the object is no longer needed, it is automatically removed\nfrom a weakref table and a callback is triggered for weakref objects.  Typical\napplications include caching objects that are expensive to create:"], "L2_Code": [">>> ", "import", " ", "weakref", ",", " ", "gc", "\n", ">>> ", "class", " ", "A", ":", "\n", "... ", "    ", "def", " ", "__init__", "(", "self", ",", " ", "value", "):", "\n", "... ", "        ", "self", ".", "value", " ", "=", " ", "value", "\n", "... ", "    ", "def", " ", "__repr__", "(", "self", "):", "\n", "... ", "        ", "return", " ", "str", "(", "self", ".", "value", ")", "\n", "...", "\n", ">>> ", "a", " ", "=", " ", "A", "(", "10", ")", "                   ", "# create a reference", "\n", ">>> ", "d", " ", "=", " ", "weakref", ".", "WeakValueDictionary", "()", "\n", ">>> ", "d", "[", "'primary'", "]", " ", "=", " ", "a", "            ", "# does not create a reference", "\n", ">>> ", "d", "[", "'primary'", "]", "                ", "# fetch the object if it is still alive", "\n", "10", "\n", ">>> ", "del", " ", "a", "                       ", "# remove the one reference", "\n", ">>> ", "gc", ".", "collect", "()", "                ", "# run garbage collection right away", "\n", "0", "\n", ">>> ", "d", "[", "'primary'", "]", "                ", "# entry was automatically removed", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "1", ", in ", "<module>", "\n    ", "d", "[", "'primary'", "]", "                ", "# entry was automatically removed", "\n  File ", "\"C:/python37/lib/weakref.py\"", ", line ", "46", ", in ", "__getitem__", "\n    ", "o", " ", "=", " ", "self", ".", "data", "[", "key", "]()", "\n", "KeyError", ": ", "'primary'", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II", "M_Desc": ["This second tour covers more advanced modules that support professional\nprogramming needs.  These modules rarely occur in small scripts."], "M_Code": [], "L2_Title": "11.7. Tools for Working with Lists", "L2_Desc": ["Many data structure needs can be met with the built-in list type. However,\nsometimes there is a need for alternative implementations with different\nperformance trade-offs.", "The ", "array", " module provides an ", "array()", " object that is like\na list that stores only homogeneous data and stores it more compactly.  The\nfollowing example shows an array of numbers stored as two byte unsigned binary\nnumbers (typecode ", "\"H\"", ") rather than the usual 16 bytes per entry for regular\nlists of Python int objects:", "The ", "collections", " module provides a ", "deque()", " object\nthat is like a list with faster appends and pops from the left side but slower\nlookups in the middle. These objects are well suited for implementing queues\nand breadth first tree searches:", "In addition to alternative list implementations, the library also offers other\ntools such as the ", "bisect", " module with functions for manipulating sorted\nlists:", "The ", "heapq", " module provides functions for implementing heaps based on\nregular lists.  The lowest valued entry is always kept at position zero.  This\nis useful for applications which repeatedly access the smallest element but do\nnot want to run a full list sort:"], "L2_Code": [">>> ", "from", " ", "array", " ", "import", " ", "array", "\n", ">>> ", "a", " ", "=", " ", "array", "(", "'H'", ",", " ", "[", "4000", ",", " ", "10", ",", " ", "700", ",", " ", "22222", "])", "\n", ">>> ", "sum", "(", "a", ")", "\n", "26932", "\n", ">>> ", "a", "[", "1", ":", "3", "]", "\n", "array('H', [10, 700])", "\n", "\n", ">>> ", "from", " ", "collections", " ", "import", " ", "deque", "\n", ">>> ", "d", " ", "=", " ", "deque", "([", "\"task1\"", ",", " ", "\"task2\"", ",", " ", "\"task3\"", "])", "\n", ">>> ", "d", ".", "append", "(", "\"task4\"", ")", "\n", ">>> ", "print", "(", "\"Handling\"", ",", " ", "d", ".", "popleft", "())", "\n", "Handling task1", "\n", "\n", "unsearched", " ", "=", " ", "deque", "([", "starting_node", "])", "\n", "def", " ", "breadth_first_search", "(", "unsearched", "):", "\n    ", "node", " ", "=", " ", "unsearched", ".", "popleft", "()", "\n    ", "for", " ", "m", " ", "in", " ", "gen_moves", "(", "node", "):", "\n        ", "if", " ", "is_goal", "(", "m", "):", "\n            ", "return", " ", "m", "\n        ", "unsearched", ".", "append", "(", "m", ")", "\n", "\n", ">>> ", "import", " ", "bisect", "\n", ">>> ", "scores", " ", "=", " ", "[(", "100", ",", " ", "'perl'", "),", " ", "(", "200", ",", " ", "'tcl'", "),", " ", "(", "400", ",", " ", "'lua'", "),", " ", "(", "500", ",", " ", "'python'", ")]", "\n", ">>> ", "bisect", ".", "insort", "(", "scores", ",", " ", "(", "300", ",", " ", "'ruby'", "))", "\n", ">>> ", "scores", "\n", "[(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]", "\n", "\n", ">>> ", "from", " ", "heapq", " ", "import", " ", "heapify", ",", " ", "heappop", ",", " ", "heappush", "\n", ">>> ", "data", " ", "=", " ", "[", "1", ",", " ", "3", ",", " ", "5", ",", " ", "7", ",", " ", "9", ",", " ", "2", ",", " ", "4", ",", " ", "6", ",", " ", "8", ",", " ", "0", "]", "\n", ">>> ", "heapify", "(", "data", ")", "                      ", "# rearrange the list into heap order", "\n", ">>> ", "heappush", "(", "data", ",", " ", "-", "5", ")", "                 ", "# add a new entry", "\n", ">>> ", "[", "heappop", "(", "data", ")", " ", "for", " ", "i", " ", "in", " ", "range", "(", "3", ")]", "  ", "# fetch the three smallest entries", "\n", "[-5, 0, 1]", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib2.html", "Language": "Python", "M_Title": "11. Brief Tour of the Standard Library \u2014 Part II", "M_Desc": ["This second tour covers more advanced modules that support professional\nprogramming needs.  These modules rarely occur in small scripts."], "M_Code": [], "L2_Title": "11.8. Decimal Floating Point Arithmetic", "L2_Desc": ["The ", "decimal", " module offers a ", "Decimal", " datatype for\ndecimal floating point arithmetic.  Compared to the built-in ", "float", "\nimplementation of binary floating point, the class is especially helpful for", "For example, calculating a 5% tax on a 70 cent phone charge gives different\nresults in decimal floating point and binary floating point. The difference\nbecomes significant if the results are rounded to the nearest cent:", "The ", "Decimal", " result keeps a trailing zero, automatically\ninferring four place significance from multiplicands with two place\nsignificance.  Decimal reproduces mathematics as done by hand and avoids\nissues that can arise when binary floating point cannot exactly represent\ndecimal quantities.", "Exact representation enables the ", "Decimal", " class to perform\nmodulo calculations and equality tests that are unsuitable for binary floating\npoint:", "The ", "decimal", " module provides arithmetic with as much precision as needed:"], "L2_Code": [">>> ", "from", " ", "decimal", " ", "import", " ", "*", "\n", ">>> ", "round", "(", "Decimal", "(", "'0.70'", ")", " ", "*", " ", "Decimal", "(", "'1.05'", "),", " ", "2", ")", "\n", "Decimal('0.74')", "\n", ">>> ", "round", "(", ".", "70", " ", "*", " ", "1.05", ",", " ", "2", ")", "\n", "0.73", "\n", "\n", ">>> ", "Decimal", "(", "'1.00'", ")", " ", "%", " ", "Decimal", "(", "'.10'", ")", "\n", "Decimal('0.00')", "\n", ">>> ", "1.00", " ", "%", " ", "0.10", "\n", "0.09999999999999995", "\n\n", ">>> ", "sum", "([", "Decimal", "(", "'0.1'", ")]", "*", "10", ")", " ", "==", " ", "Decimal", "(", "'1.0'", ")", "\n", "True", "\n", ">>> ", "sum", "([", "0.1", "]", "*", "10", ")", " ", "==", " ", "1.0", "\n", "False", "\n", "\n", ">>> ", "getcontext", "()", ".", "prec", " ", "=", " ", "36", "\n", ">>> ", "Decimal", "(", "1", ")", " ", "/", " ", "Decimal", "(", "7", ")", "\n", "Decimal('0.142857142857142857142857142857142857')", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library", "M_Desc": [], "M_Code": [], "L2_Title": "10.1. Operating System Interface", "L2_Desc": ["The ", "os", " module provides dozens of functions for interacting with the\noperating system:", "Be sure to use the ", "import", " ", "os", " style instead of ", "from", " ", "os", " ", "import", " ", "*", ".  This\nwill keep ", "os.open()", " from shadowing the built-in ", "open()", " function which\noperates much differently.", "The built-in ", "dir()", " and ", "help()", " functions are useful as interactive\naids for working with large modules like ", "os", ":", "For daily file and directory management tasks, the ", "shutil", " module provides\na higher level interface that is easier to use:"], "L2_Code": [">>> ", "import", " ", "os", "\n", ">>> ", "os", ".", "getcwd", "()", "      ", "# Return the current working directory", "\n", "'C:\\\\Python37'", "\n", ">>> ", "os", ".", "chdir", "(", "'/server/accesslogs'", ")", "   ", "# Change current working directory", "\n", ">>> ", "os", ".", "system", "(", "'mkdir today'", ")", "   ", "# Run the command mkdir in the system shell", "\n", "0", "\n", "\n", ">>> ", "import", " ", "os", "\n", ">>> ", "dir", "(", "os", ")", "\n", "<returns a list of all module functions>", "\n", ">>> ", "help", "(", "os", ")", "\n", "<returns an extensive manual page created from the module's docstrings>", "\n", "\n", ">>> ", "import", " ", "shutil", "\n", ">>> ", "shutil", ".", "copyfile", "(", "'data.db'", ",", " ", "'archive.db'", ")", "\n", "'archive.db'", "\n", ">>> ", "shutil", ".", "move", "(", "'/build/executables'", ",", " ", "'installdir'", ")", "\n", "'installdir'", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library", "M_Desc": [], "M_Code": [], "L2_Title": "10.2. File Wildcards", "L2_Desc": ["The ", "glob", " module provides a function for making file lists from directory\nwildcard searches:"], "L2_Code": [">>> ", "import", " ", "glob", "\n", ">>> ", "glob", ".", "glob", "(", "'*.py'", ")", "\n", "['primes.py', 'random.py', 'quote.py']", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library", "M_Desc": [], "M_Code": [], "L2_Title": "10.3. Command Line Arguments", "L2_Desc": ["Common utility scripts often need to process command line arguments. These\narguments are stored in the ", "sys", " module\u2019s ", "argv", " attribute as a list.  For\ninstance the following output results from running ", "python", " ", "demo.py", " ", "one", " ", "two", "\n", "three", " at the command line:", "The ", "getopt", " module processes ", "sys.argv", " using the conventions of the Unix\n", "getopt()", " function.  More powerful and flexible command line processing is\nprovided by the ", "argparse", " module."], "L2_Code": [">>> ", "import", " ", "sys", "\n", ">>> ", "print", "(", "sys", ".", "argv", ")", "\n", "['demo.py', 'one', 'two', 'three']", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library", "M_Desc": [], "M_Code": [], "L2_Title": "10.4. Error Output Redirection and Program Termination", "L2_Desc": ["The ", "sys", " module also has attributes for ", "stdin", ", ", "stdout", ", and ", "stderr", ".\nThe latter is useful for emitting warnings and error messages to make them\nvisible even when ", "stdout", " has been redirected:", "The most direct way to terminate a script is to use ", "sys.exit()", "."], "L2_Code": [">>> ", "sys", ".", "stderr", ".", "write", "(", "'Warning, log file not found starting a new one", "\\n", "'", ")", "\n", "Warning, log file not found starting a new one", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library", "M_Desc": [], "M_Code": [], "L2_Title": "10.5. String Pattern Matching", "L2_Desc": ["The ", "re", " module provides regular expression tools for advanced string\nprocessing. For complex matching and manipulation, regular expressions offer\nsuccinct, optimized solutions:", "When only simple capabilities are needed, string methods are preferred because\nthey are easier to read and debug:"], "L2_Code": [">>> ", "import", " ", "re", "\n", ">>> ", "re", ".", "findall", "(", "r", "'\\bf[a-z]*'", ",", " ", "'which foot or hand fell fastest'", ")", "\n", "['foot', 'fell', 'fastest']", "\n", ">>> ", "re", ".", "sub", "(", "r", "'(\\b[a-z]+) \\1'", ",", " ", "r", "'\\1'", ",", " ", "'cat in the the hat'", ")", "\n", "'cat in the hat'", "\n", "\n", ">>> ", "'tea for too'", ".", "replace", "(", "'too'", ",", " ", "'two'", ")", "\n", "'tea for two'", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library", "M_Desc": [], "M_Code": [], "L2_Title": "10.6. Mathematics", "L2_Desc": ["The ", "math", " module gives access to the underlying C library functions for\nfloating point math:", "The ", "random", " module provides tools for making random selections:", "The ", "statistics", " module calculates basic statistical properties\n(the mean, median, variance, etc.) of numeric data:", "The SciPy project <", "https://scipy.org", "> has many other modules for numerical\ncomputations."], "L2_Code": [">>> ", "import", " ", "math", "\n", ">>> ", "math", ".", "cos", "(", "math", ".", "pi", " ", "/", " ", "4", ")", "\n", "0.70710678118654757", "\n", ">>> ", "math", ".", "log", "(", "1024", ",", " ", "2", ")", "\n", "10.0", "\n", "\n", ">>> ", "import", " ", "random", "\n", ">>> ", "random", ".", "choice", "([", "'apple'", ",", " ", "'pear'", ",", " ", "'banana'", "])", "\n", "'apple'", "\n", ">>> ", "random", ".", "sample", "(", "range", "(", "100", "),", " ", "10", ")", "   ", "# sampling without replacement", "\n", "[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]", "\n", ">>> ", "random", ".", "random", "()", "    ", "# random float", "\n", "0.17970987693706186", "\n", ">>> ", "random", ".", "randrange", "(", "6", ")", "    ", "# random integer chosen from range(6)", "\n", "4", "\n", "\n", ">>> ", "import", " ", "statistics", "\n", ">>> ", "data", " ", "=", " ", "[", "2.75", ",", " ", "1.75", ",", " ", "1.25", ",", " ", "0.25", ",", " ", "0.5", ",", " ", "1.25", ",", " ", "3.5", "]", "\n", ">>> ", "statistics", ".", "mean", "(", "data", ")", "\n", "1.6071428571428572", "\n", ">>> ", "statistics", ".", "median", "(", "data", ")", "\n", "1.25", "\n", ">>> ", "statistics", ".", "variance", "(", "data", ")", "\n", "1.3720238095238095", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library", "M_Desc": [], "M_Code": [], "L2_Title": "10.7. Internet Access", "L2_Desc": ["There are a number of modules for accessing the internet and processing internet\nprotocols. Two of the simplest are ", "urllib.request", " for retrieving data\nfrom URLs and ", "smtplib", " for sending mail:", "(Note that the second example needs a mailserver running on localhost.)"], "L2_Code": [">>> ", "from", " ", "urllib.request", " ", "import", " ", "urlopen", "\n", ">>> ", "with", " ", "urlopen", "(", "'http://tycho.usno.navy.mil/cgi-bin/timer.pl'", ")", " ", "as", " ", "response", ":", "\n", "... ", "    ", "for", " ", "line", " ", "in", " ", "response", ":", "\n", "... ", "        ", "line", " ", "=", " ", "line", ".", "decode", "(", "'utf-8'", ")", "  ", "# Decoding the binary data to text.", "\n", "... ", "        ", "if", " ", "'EST'", " ", "in", " ", "line", " ", "or", " ", "'EDT'", " ", "in", " ", "line", ":", "  ", "# look for Eastern Time", "\n", "... ", "            ", "print", "(", "line", ")", "\n\n", "<BR>Nov. 25, 09:43:32 PM EST", "\n\n", ">>> ", "import", " ", "smtplib", "\n", ">>> ", "server", " ", "=", " ", "smtplib", ".", "SMTP", "(", "'localhost'", ")", "\n", ">>> ", "server", ".", "sendmail", "(", "'soothsayer@example.org'", ",", " ", "'jcaesar@example.org'", ",", "\n", "... ", "\"\"\"To: jcaesar@example.org", "\n", "... ", "From: soothsayer@example.org", "\n", "...", "\n", "... ", "Beware the Ides of March.", "\n", "... ", "\"\"\"", ")", "\n", ">>> ", "server", ".", "quit", "()", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library", "M_Desc": [], "M_Code": [], "L2_Title": "10.8. Dates and Times", "L2_Desc": ["The ", "datetime", " module supplies classes for manipulating dates and times in\nboth simple and complex ways. While date and time arithmetic is supported, the\nfocus of the implementation is on efficient member extraction for output\nformatting and manipulation.  The module also supports objects that are timezone\naware."], "L2_Code": [">>> ", "# dates are easily constructed and formatted", "\n", ">>> ", "from", " ", "datetime", " ", "import", " ", "date", "\n", ">>> ", "now", " ", "=", " ", "date", ".", "today", "()", "\n", ">>> ", "now", "\n", "datetime.date(2003, 12, 2)", "\n", ">>> ", "now", ".", "strftime", "(", "\"%m-", "%d", "-%y. ", "%d", " %b %Y is a %A on the ", "%d", " day of %B.\"", ")", "\n", "'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'", "\n\n", ">>> ", "# dates support calendar arithmetic", "\n", ">>> ", "birthday", " ", "=", " ", "date", "(", "1964", ",", " ", "7", ",", " ", "31", ")", "\n", ">>> ", "age", " ", "=", " ", "now", " ", "-", " ", "birthday", "\n", ">>> ", "age", ".", "days", "\n", "14368", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library", "M_Desc": [], "M_Code": [], "L2_Title": "10.9. Data Compression", "L2_Desc": ["Common data archiving and compression formats are directly supported by modules\nincluding: ", "zlib", ", ", "gzip", ", ", "bz2", ", ", "lzma", ", ", "zipfile", " and\n", "tarfile", "."], "L2_Code": [">>> ", "import", " ", "zlib", "\n", ">>> ", "s", " ", "=", " ", "b", "'witch which has which witches wrist watch'", "\n", ">>> ", "len", "(", "s", ")", "\n", "41", "\n", ">>> ", "t", " ", "=", " ", "zlib", ".", "compress", "(", "s", ")", "\n", ">>> ", "len", "(", "t", ")", "\n", "37", "\n", ">>> ", "zlib", ".", "decompress", "(", "t", ")", "\n", "b'witch which has which witches wrist watch'", "\n", ">>> ", "zlib", ".", "crc32", "(", "s", ")", "\n", "226805979", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library", "M_Desc": [], "M_Code": [], "L2_Title": "10.10. Performance Measurement", "L2_Desc": ["Some Python users develop a deep interest in knowing the relative performance of\ndifferent approaches to the same problem. Python provides a measurement tool\nthat answers those questions immediately.", "For example, it may be tempting to use the tuple packing and unpacking feature\ninstead of the traditional approach to swapping arguments. The ", "timeit", "\nmodule quickly demonstrates a modest performance advantage:", "In contrast to ", "timeit", "\u2019s fine level of granularity, the ", "profile", " and\n", "pstats", " modules provide tools for identifying time critical sections in\nlarger blocks of code."], "L2_Code": [">>> ", "from", " ", "timeit", " ", "import", " ", "Timer", "\n", ">>> ", "Timer", "(", "'t=a; a=b; b=t'", ",", " ", "'a=1; b=2'", ")", ".", "timeit", "()", "\n", "0.57535828626024577", "\n", ">>> ", "Timer", "(", "'a,b = b,a'", ",", " ", "'a=1; b=2'", ")", ".", "timeit", "()", "\n", "0.54962537085770791", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library", "M_Desc": [], "M_Code": [], "L2_Title": "10.11. Quality Control", "L2_Desc": ["One approach for developing high quality software is to write tests for each\nfunction as it is developed and to run those tests frequently during the\ndevelopment process.", "The ", "doctest", " module provides a tool for scanning a module and validating\ntests embedded in a program\u2019s docstrings.  Test construction is as simple as\ncutting-and-pasting a typical call along with its results into the docstring.\nThis improves the documentation by providing the user with an example and it\nallows the doctest module to make sure the code remains true to the\ndocumentation:", "The ", "unittest", " module is not as effortless as the ", "doctest", " module,\nbut it allows a more comprehensive set of tests to be maintained in a separate\nfile:"], "L2_Code": ["def", " ", "average", "(", "values", "):", "\n    ", "\"\"\"Computes the arithmetic mean of a list of numbers.", "\n\n", "    >>> print(average([20, 30, 70]))", "\n", "    40.0", "\n", "    \"\"\"", "\n    ", "return", " ", "sum", "(", "values", ")", " ", "/", " ", "len", "(", "values", ")", "\n\n", "import", " ", "doctest", "\n", "doctest", ".", "testmod", "()", "   ", "# automatically validate the embedded tests", "\n", "\n", "import", " ", "unittest", "\n\n", "class", " ", "TestStatisticalFunctions", "(", "unittest", ".", "TestCase", "):", "\n\n    ", "def", " ", "test_average", "(", "self", "):", "\n        ", "self", ".", "assertEqual", "(", "average", "([", "20", ",", " ", "30", ",", " ", "70", "]),", " ", "40.0", ")", "\n        ", "self", ".", "assertEqual", "(", "round", "(", "average", "([", "1", ",", " ", "5", ",", " ", "7", "]),", " ", "1", "),", " ", "4.3", ")", "\n        ", "with", " ", "self", ".", "assertRaises", "(", "ZeroDivisionError", "):", "\n            ", "average", "([])", "\n        ", "with", " ", "self", ".", "assertRaises", "(", "TypeError", "):", "\n            ", "average", "(", "20", ",", " ", "30", ",", " ", "70", ")", "\n\n", "unittest", ".", "main", "()", "  ", "# Calling from the command line invokes all tests", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/stdlib.html", "Language": "Python", "M_Title": "10. Brief Tour of the Standard Library", "M_Desc": [], "M_Code": [], "L2_Title": "10.12. Batteries Included", "L2_Desc": ["Python has a \u201cbatteries included\u201d philosophy.  This is best seen through the\nsophisticated and robust capabilities of its larger packages. For example:"], "L2_Code": [], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes", "M_Desc": ["Classes provide a means of bundling data and functionality together.  Creating\na new class creates a new ", "type", " of object, allowing new ", "instances", " of that\ntype to be made.  Each class instance can have attributes attached to it for\nmaintaining its state.  Class instances can also have methods (defined by its\nclass) for modifying its state.", "Compared with other programming languages, Python\u2019s class mechanism adds classes\nwith a minimum of new syntax and semantics.  It is a mixture of the class\nmechanisms found in C++ and Modula-3.  Python classes provide all the standard\nfeatures of Object Oriented Programming: the class inheritance mechanism allows\nmultiple base classes, a derived class can override any methods of its base\nclass or classes, and a method can call the method of a base class with the same\nname.  Objects can contain arbitrary amounts and kinds of data.  As is true for\nmodules, classes partake of the dynamic nature of Python: they are created at\nruntime, and can be modified further after creation.", "In C++ terminology, normally class members (including the data members) are\n", "public", " (except see below ", "Private Variables", "), and all member functions are\n", "virtual", ".  As in Modula-3, there are no shorthands for referencing the object\u2019s\nmembers from its methods: the method function is declared with an explicit first\nargument representing the object, which is provided implicitly by the call.  As\nin Smalltalk, classes themselves are objects.  This provides semantics for\nimporting and renaming.  Unlike C++ and Modula-3, built-in types can be used as\nbase classes for extension by the user.  Also, like in C++, most built-in\noperators with special syntax (arithmetic operators, subscripting etc.) can be\nredefined for class instances.", "(Lacking universally accepted terminology to talk about classes, I will make\noccasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since\nits object-oriented semantics are closer to those of Python than C++, but I\nexpect that few readers have heard of it.)"], "M_Code": [], "L2_Title": "9.1. A Word About Names and Objects", "L2_Desc": ["Objects have individuality, and multiple names (in multiple scopes) can be bound\nto the same object.  This is known as aliasing in other languages.  This is\nusually not appreciated on a first glance at Python, and can be safely ignored\nwhen dealing with immutable basic types (numbers, strings, tuples).  However,\naliasing has a possibly surprising effect on the semantics of Python code\ninvolving mutable objects such as lists, dictionaries, and most other types.\nThis is usually used to the benefit of the program, since aliases behave like\npointers in some respects.  For example, passing an object is cheap since only a\npointer is passed by the implementation; and if a function modifies an object\npassed as an argument, the caller will see the change \u2014 this eliminates the\nneed for two different argument passing mechanisms as in Pascal."], "L2_Code": [], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes", "M_Desc": ["Classes provide a means of bundling data and functionality together.  Creating\na new class creates a new ", "type", " of object, allowing new ", "instances", " of that\ntype to be made.  Each class instance can have attributes attached to it for\nmaintaining its state.  Class instances can also have methods (defined by its\nclass) for modifying its state.", "Compared with other programming languages, Python\u2019s class mechanism adds classes\nwith a minimum of new syntax and semantics.  It is a mixture of the class\nmechanisms found in C++ and Modula-3.  Python classes provide all the standard\nfeatures of Object Oriented Programming: the class inheritance mechanism allows\nmultiple base classes, a derived class can override any methods of its base\nclass or classes, and a method can call the method of a base class with the same\nname.  Objects can contain arbitrary amounts and kinds of data.  As is true for\nmodules, classes partake of the dynamic nature of Python: they are created at\nruntime, and can be modified further after creation.", "In C++ terminology, normally class members (including the data members) are\n", "public", " (except see below ", "Private Variables", "), and all member functions are\n", "virtual", ".  As in Modula-3, there are no shorthands for referencing the object\u2019s\nmembers from its methods: the method function is declared with an explicit first\nargument representing the object, which is provided implicitly by the call.  As\nin Smalltalk, classes themselves are objects.  This provides semantics for\nimporting and renaming.  Unlike C++ and Modula-3, built-in types can be used as\nbase classes for extension by the user.  Also, like in C++, most built-in\noperators with special syntax (arithmetic operators, subscripting etc.) can be\nredefined for class instances.", "(Lacking universally accepted terminology to talk about classes, I will make\noccasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since\nits object-oriented semantics are closer to those of Python than C++, but I\nexpect that few readers have heard of it.)"], "M_Code": [], "L2_Title": "9.2. Python Scopes and Namespaces", "L2_Desc": ["Before introducing classes, I first have to tell you something about Python\u2019s\nscope rules.  Class definitions play some neat tricks with namespaces, and you\nneed to know how scopes and namespaces work to fully understand what\u2019s going on.\nIncidentally, knowledge about this subject is useful for any advanced Python\nprogrammer.", "Let\u2019s begin with some definitions.", "A ", "namespace", " is a mapping from names to objects.  Most namespaces are currently\nimplemented as Python dictionaries, but that\u2019s normally not noticeable in any\nway (except for performance), and it may change in the future.  Examples of\nnamespaces are: the set of built-in names (containing functions such as ", "abs()", ", and\nbuilt-in exception names); the global names in a module; and the local names in\na function invocation.  In a sense the set of attributes of an object also form\na namespace.  The important thing to know about namespaces is that there is\nabsolutely no relation between names in different namespaces; for instance, two\ndifferent modules may both define a function ", "maximize", " without confusion \u2014\nusers of the modules must prefix it with the module name.", "By the way, I use the word ", "attribute", " for any name following a dot \u2014 for\nexample, in the expression ", "z.real", ", ", "real", " is an attribute of the object\n", "z", ".  Strictly speaking, references to names in modules are attribute\nreferences: in the expression ", "modname.funcname", ", ", "modname", " is a module\nobject and ", "funcname", " is an attribute of it.  In this case there happens to be\na straightforward mapping between the module\u2019s attributes and the global names\ndefined in the module: they share the same namespace!  ", "[1]", "Attributes may be read-only or writable.  In the latter case, assignment to\nattributes is possible.  Module attributes are writable: you can write\n", "modname.the_answer", " ", "=", " ", "42", ".  Writable attributes may also be deleted with the\n", "del", " statement.  For example, ", "del", " ", "modname.the_answer", " will remove\nthe attribute ", "the_answer", " from the object named by ", "modname", ".", "Namespaces are created at different moments and have different lifetimes.  The\nnamespace containing the built-in names is created when the Python interpreter\nstarts up, and is never deleted.  The global namespace for a module is created\nwhen the module definition is read in; normally, module namespaces also last\nuntil the interpreter quits.  The statements executed by the top-level\ninvocation of the interpreter, either read from a script file or interactively,\nare considered part of a module called ", "__main__", ", so they have their own\nglobal namespace.  (The built-in names actually also live in a module; this is\ncalled ", "builtins", ".)", "The local namespace for a function is created when the function is called, and\ndeleted when the function returns or raises an exception that is not handled\nwithin the function.  (Actually, forgetting would be a better way to describe\nwhat actually happens.)  Of course, recursive invocations each have their own\nlocal namespace.", "A ", "scope", " is a textual region of a Python program where a namespace is directly\naccessible.  \u201cDirectly accessible\u201d here means that an unqualified reference to a\nname attempts to find the name in the namespace.", "Although scopes are determined statically, they are used dynamically. At any\ntime during execution, there are at least three nested scopes whose namespaces\nare directly accessible:", "If a name is declared global, then all references and assignments go directly to\nthe middle scope containing the module\u2019s global names.  To rebind variables\nfound outside of the innermost scope, the ", "nonlocal", " statement can be\nused; if not declared nonlocal, those variables are read-only (an attempt to\nwrite to such a variable will simply create a ", "new", " local variable in the\ninnermost scope, leaving the identically named outer variable unchanged).", "Usually, the local scope references the local names of the (textually) current\nfunction.  Outside functions, the local scope references the same namespace as\nthe global scope: the module\u2019s namespace. Class definitions place yet another\nnamespace in the local scope.", "It is important to realize that scopes are determined textually: the global\nscope of a function defined in a module is that module\u2019s namespace, no matter\nfrom where or by what alias the function is called.  On the other hand, the\nactual search for names is done dynamically, at run time \u2014 however, the\nlanguage definition is evolving towards static name resolution, at \u201ccompile\u201d\ntime, so don\u2019t rely on dynamic name resolution!  (In fact, local variables are\nalready determined statically.)", "A special quirk of Python is that \u2013 if no ", "global", " statement is in\neffect \u2013 assignments to names always go into the innermost scope.  Assignments\ndo not copy data \u2014 they just bind names to objects.  The same is true for\ndeletions: the statement ", "del", " ", "x", " removes the binding of ", "x", " from the\nnamespace referenced by the local scope.  In fact, all operations that introduce\nnew names use the local scope: in particular, ", "import", " statements and\nfunction definitions bind the module or function name in the local scope.", "The ", "global", " statement can be used to indicate that particular\nvariables live in the global scope and should be rebound there; the\n", "nonlocal", " statement indicates that particular variables live in\nan enclosing scope and should be rebound there."], "L2_Code": [], "L3_Title": "9.2.1. Scopes and Namespaces Example", "L3_Desc": ["This is an example demonstrating how to reference the different scopes and\nnamespaces, and how ", "global", " and ", "nonlocal", " affect variable\nbinding:", "The output of the example code is:", "Note how the ", "local", " assignment (which is default) didn\u2019t change ", "scope_test", "\u2019s\nbinding of ", "spam", ".  The ", "nonlocal", " assignment changed ", "scope_test", "\u2019s\nbinding of ", "spam", ", and the ", "global", " assignment changed the module-level\nbinding.", "You can also see that there was no previous binding for ", "spam", " before the\n", "global", " assignment."], "L3_Code": ["def", " ", "scope_test", "():", "\n    ", "def", " ", "do_local", "():", "\n        ", "spam", " ", "=", " ", "\"local spam\"", "\n\n    ", "def", " ", "do_nonlocal", "():", "\n        ", "nonlocal", " ", "spam", "\n        ", "spam", " ", "=", " ", "\"nonlocal spam\"", "\n\n    ", "def", " ", "do_global", "():", "\n        ", "global", " ", "spam", "\n        ", "spam", " ", "=", " ", "\"global spam\"", "\n\n    ", "spam", " ", "=", " ", "\"test spam\"", "\n    ", "do_local", "()", "\n    ", "print", "(", "\"After local assignment:\"", ",", " ", "spam", ")", "\n    ", "do_nonlocal", "()", "\n    ", "print", "(", "\"After nonlocal assignment:\"", ",", " ", "spam", ")", "\n    ", "do_global", "()", "\n    ", "print", "(", "\"After global assignment:\"", ",", " ", "spam", ")", "\n\n", "scope_test", "()", "\n", "print", "(", "\"In global scope:\"", ",", " ", "spam", ")", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes", "M_Desc": ["Classes provide a means of bundling data and functionality together.  Creating\na new class creates a new ", "type", " of object, allowing new ", "instances", " of that\ntype to be made.  Each class instance can have attributes attached to it for\nmaintaining its state.  Class instances can also have methods (defined by its\nclass) for modifying its state.", "Compared with other programming languages, Python\u2019s class mechanism adds classes\nwith a minimum of new syntax and semantics.  It is a mixture of the class\nmechanisms found in C++ and Modula-3.  Python classes provide all the standard\nfeatures of Object Oriented Programming: the class inheritance mechanism allows\nmultiple base classes, a derived class can override any methods of its base\nclass or classes, and a method can call the method of a base class with the same\nname.  Objects can contain arbitrary amounts and kinds of data.  As is true for\nmodules, classes partake of the dynamic nature of Python: they are created at\nruntime, and can be modified further after creation.", "In C++ terminology, normally class members (including the data members) are\n", "public", " (except see below ", "Private Variables", "), and all member functions are\n", "virtual", ".  As in Modula-3, there are no shorthands for referencing the object\u2019s\nmembers from its methods: the method function is declared with an explicit first\nargument representing the object, which is provided implicitly by the call.  As\nin Smalltalk, classes themselves are objects.  This provides semantics for\nimporting and renaming.  Unlike C++ and Modula-3, built-in types can be used as\nbase classes for extension by the user.  Also, like in C++, most built-in\noperators with special syntax (arithmetic operators, subscripting etc.) can be\nredefined for class instances.", "(Lacking universally accepted terminology to talk about classes, I will make\noccasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since\nits object-oriented semantics are closer to those of Python than C++, but I\nexpect that few readers have heard of it.)"], "M_Code": [], "L2_Title": "9.3. A First Look at Classes", "L2_Desc": ["Classes introduce a little bit of new syntax, three new object types, and some\nnew semantics."], "L2_Code": [], "L3_Title": "9.3.1. Class Definition Syntax", "L3_Desc": ["The simplest form of class definition looks like this:", "Class definitions, like function definitions (", "def", " statements) must be\nexecuted before they have any effect.  (You could conceivably place a class\ndefinition in a branch of an ", "if", " statement, or inside a function.)", "In practice, the statements inside a class definition will usually be function\ndefinitions, but other statements are allowed, and sometimes useful \u2014 we\u2019ll\ncome back to this later.  The function definitions inside a class normally have\na peculiar form of argument list, dictated by the calling conventions for\nmethods \u2014 again, this is explained later.", "When a class definition is entered, a new namespace is created, and used as the\nlocal scope \u2014 thus, all assignments to local variables go into this new\nnamespace.  In particular, function definitions bind the name of the new\nfunction here.", "When a class definition is left normally (via the end), a ", "class object", " is\ncreated.  This is basically a wrapper around the contents of the namespace\ncreated by the class definition; we\u2019ll learn more about class objects in the\nnext section.  The original local scope (the one in effect just before the class\ndefinition was entered) is reinstated, and the class object is bound here to the\nclass name given in the class definition header (", "ClassName", " in the\nexample)."], "L3_Code": ["class", " ", "ClassName", ":", "\n    ", "<", "statement", "-", "1", ">", "\n    ", ".", "\n    ", ".", "\n    ", ".", "\n    ", "<", "statement", "-", "N", ">", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools", "M_Desc": ["Besides the ", "while", " statement just introduced, Python knows the usual\ncontrol flow statements known from other languages, with some twists."], "M_Code": [], "L2_Title": "4.1. ", "L2_Desc": ["Perhaps the most well-known statement type is the ", "if", " statement.  For\nexample:", "There can be zero or more ", "elif", " parts, and the ", "else", " part is\noptional.  The keyword \u2018", "elif", "\u2019 is short for \u2018else if\u2019, and is useful\nto avoid excessive indentation.  An  ", "if", " \u2026 ", "elif", " \u2026\n", "elif", " \u2026 sequence is a substitute for the ", "switch", " or\n", "case", " statements found in other languages."], "L2_Code": [">>> ", "x", " ", "=", " ", "int", "(", "input", "(", "\"Please enter an integer: \"", "))", "\n", "Please enter an integer: 42", "\n", ">>> ", "if", " ", "x", " ", "<", " ", "0", ":", "\n", "... ", "    ", "x", " ", "=", " ", "0", "\n", "... ", "    ", "print", "(", "'Negative changed to zero'", ")", "\n", "... ", "elif", " ", "x", " ", "==", " ", "0", ":", "\n", "... ", "    ", "print", "(", "'Zero'", ")", "\n", "... ", "elif", " ", "x", " ", "==", " ", "1", ":", "\n", "... ", "    ", "print", "(", "'Single'", ")", "\n", "... ", "else", ":", "\n", "... ", "    ", "print", "(", "'More'", ")", "\n", "...", "\n", "More", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools", "M_Desc": ["Besides the ", "while", " statement just introduced, Python knows the usual\ncontrol flow statements known from other languages, with some twists."], "M_Code": [], "L2_Title": "4.2. ", "L2_Desc": ["The ", "for", " statement in Python differs a bit from what you may be used\nto in C or Pascal.  Rather than always iterating over an arithmetic progression\nof numbers (like in Pascal), or giving the user the ability to define both the\niteration step and halting condition (as C), Python\u2019s ", "for", " statement\niterates over the items of any sequence (a list or a string), in the order that\nthey appear in the sequence.  For example (no pun intended):", "If you need to modify the sequence you are iterating over while inside the loop\n(for example to duplicate selected items), it is recommended that you first\nmake a copy.  Iterating over a sequence does not implicitly make a copy.  The\nslice notation makes this especially convenient:", "With ", "for", " ", "w", " ", "in", " ", "words:", ", the example would attempt to create an infinite list,\ninserting ", "defenestrate", " over and over again."], "L2_Code": [">>> ", "# Measure some strings:", "\n", "... ", "words", " ", "=", " ", "[", "'cat'", ",", " ", "'window'", ",", " ", "'defenestrate'", "]", "\n", ">>> ", "for", " ", "w", " ", "in", " ", "words", ":", "\n", "... ", "    ", "print", "(", "w", ",", " ", "len", "(", "w", "))", "\n", "...", "\n", "cat 3", "\n", "window 6", "\n", "defenestrate 12", "\n", "\n", ">>> ", "for", " ", "w", " ", "in", " ", "words", "[:]:", "  ", "# Loop over a slice copy of the entire list.", "\n", "... ", "    ", "if", " ", "len", "(", "w", ")", " ", ">", " ", "6", ":", "\n", "... ", "        ", "words", ".", "insert", "(", "0", ",", " ", "w", ")", "\n", "...", "\n", ">>> ", "words", "\n", "['defenestrate', 'cat', 'window', 'defenestrate']", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes", "M_Desc": ["Classes provide a means of bundling data and functionality together.  Creating\na new class creates a new ", "type", " of object, allowing new ", "instances", " of that\ntype to be made.  Each class instance can have attributes attached to it for\nmaintaining its state.  Class instances can also have methods (defined by its\nclass) for modifying its state.", "Compared with other programming languages, Python\u2019s class mechanism adds classes\nwith a minimum of new syntax and semantics.  It is a mixture of the class\nmechanisms found in C++ and Modula-3.  Python classes provide all the standard\nfeatures of Object Oriented Programming: the class inheritance mechanism allows\nmultiple base classes, a derived class can override any methods of its base\nclass or classes, and a method can call the method of a base class with the same\nname.  Objects can contain arbitrary amounts and kinds of data.  As is true for\nmodules, classes partake of the dynamic nature of Python: they are created at\nruntime, and can be modified further after creation.", "In C++ terminology, normally class members (including the data members) are\n", "public", " (except see below ", "Private Variables", "), and all member functions are\n", "virtual", ".  As in Modula-3, there are no shorthands for referencing the object\u2019s\nmembers from its methods: the method function is declared with an explicit first\nargument representing the object, which is provided implicitly by the call.  As\nin Smalltalk, classes themselves are objects.  This provides semantics for\nimporting and renaming.  Unlike C++ and Modula-3, built-in types can be used as\nbase classes for extension by the user.  Also, like in C++, most built-in\noperators with special syntax (arithmetic operators, subscripting etc.) can be\nredefined for class instances.", "(Lacking universally accepted terminology to talk about classes, I will make\noccasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since\nits object-oriented semantics are closer to those of Python than C++, but I\nexpect that few readers have heard of it.)"], "M_Code": [], "L2_Title": "9.3. A First Look at Classes", "L2_Desc": ["Classes introduce a little bit of new syntax, three new object types, and some\nnew semantics."], "L2_Code": [], "L3_Title": "9.3.2. Class Objects", "L3_Desc": ["Class objects support two kinds of operations: attribute references and\ninstantiation.", "Attribute references", " use the standard syntax used for all attribute references\nin Python: ", "obj.name", ".  Valid attribute names are all the names that were in\nthe class\u2019s namespace when the class object was created.  So, if the class\ndefinition looked like this:", "then ", "MyClass.i", " and ", "MyClass.f", " are valid attribute references, returning\nan integer and a function object, respectively. Class attributes can also be\nassigned to, so you can change the value of ", "MyClass.i", " by assignment.\n", "__doc__", " is also a valid attribute, returning the docstring belonging to\nthe class: ", "\"A", " ", "simple", " ", "example", " ", "class\"", ".", "Class ", "instantiation", " uses function notation.  Just pretend that the class\nobject is a parameterless function that returns a new instance of the class.\nFor example (assuming the above class):", "creates a new ", "instance", " of the class and assigns this object to the local\nvariable ", "x", ".", "The instantiation operation (\u201ccalling\u201d a class object) creates an empty object.\nMany classes like to create objects with instances customized to a specific\ninitial state. Therefore a class may define a special method named\n", "__init__()", ", like this:", "When a class defines an ", "__init__()", " method, class instantiation\nautomatically invokes ", "__init__()", " for the newly-created class instance.  So\nin this example, a new, initialized instance can be obtained by:", "Of course, the ", "__init__()", " method may have arguments for greater\nflexibility.  In that case, arguments given to the class instantiation operator\nare passed on to ", "__init__()", ".  For example,"], "L3_Code": ["class", " ", "MyClass", ":", "\n    ", "\"\"\"A simple example class\"\"\"", "\n    ", "i", " ", "=", " ", "12345", "\n\n    ", "def", " ", "f", "(", "self", "):", "\n        ", "return", " ", "'hello world'", "\n", "\n", "x", " ", "=", " ", "MyClass", "()", "\n", "\n", "def", " ", "__init__", "(", "self", "):", "\n    ", "self", ".", "data", " ", "=", " ", "[]", "\n", "\n", "x", " ", "=", " ", "MyClass", "()", "\n", "\n", ">>> ", "class", " ", "Complex", ":", "\n", "... ", "    ", "def", " ", "__init__", "(", "self", ",", " ", "realpart", ",", " ", "imagpart", "):", "\n", "... ", "        ", "self", ".", "r", " ", "=", " ", "realpart", "\n", "... ", "        ", "self", ".", "i", " ", "=", " ", "imagpart", "\n", "...", "\n", ">>> ", "x", " ", "=", " ", "Complex", "(", "3.0", ",", " ", "-", "4.5", ")", "\n", ">>> ", "x", ".", "r", ",", " ", "x", ".", "i", "\n", "(3.0, -4.5)", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes", "M_Desc": ["Classes provide a means of bundling data and functionality together.  Creating\na new class creates a new ", "type", " of object, allowing new ", "instances", " of that\ntype to be made.  Each class instance can have attributes attached to it for\nmaintaining its state.  Class instances can also have methods (defined by its\nclass) for modifying its state.", "Compared with other programming languages, Python\u2019s class mechanism adds classes\nwith a minimum of new syntax and semantics.  It is a mixture of the class\nmechanisms found in C++ and Modula-3.  Python classes provide all the standard\nfeatures of Object Oriented Programming: the class inheritance mechanism allows\nmultiple base classes, a derived class can override any methods of its base\nclass or classes, and a method can call the method of a base class with the same\nname.  Objects can contain arbitrary amounts and kinds of data.  As is true for\nmodules, classes partake of the dynamic nature of Python: they are created at\nruntime, and can be modified further after creation.", "In C++ terminology, normally class members (including the data members) are\n", "public", " (except see below ", "Private Variables", "), and all member functions are\n", "virtual", ".  As in Modula-3, there are no shorthands for referencing the object\u2019s\nmembers from its methods: the method function is declared with an explicit first\nargument representing the object, which is provided implicitly by the call.  As\nin Smalltalk, classes themselves are objects.  This provides semantics for\nimporting and renaming.  Unlike C++ and Modula-3, built-in types can be used as\nbase classes for extension by the user.  Also, like in C++, most built-in\noperators with special syntax (arithmetic operators, subscripting etc.) can be\nredefined for class instances.", "(Lacking universally accepted terminology to talk about classes, I will make\noccasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since\nits object-oriented semantics are closer to those of Python than C++, but I\nexpect that few readers have heard of it.)"], "M_Code": [], "L2_Title": "9.3. A First Look at Classes", "L2_Desc": ["Classes introduce a little bit of new syntax, three new object types, and some\nnew semantics."], "L2_Code": [], "L3_Title": "9.3.3. Instance Objects", "L3_Desc": ["Now what can we do with instance objects?  The only operations understood by\ninstance objects are attribute references.  There are two kinds of valid\nattribute names, data attributes and methods.", "data attributes", " correspond to \u201cinstance variables\u201d in Smalltalk, and to \u201cdata\nmembers\u201d in C++.  Data attributes need not be declared; like local variables,\nthey spring into existence when they are first assigned to.  For example, if\n", "x", " is the instance of ", "MyClass", " created above, the following piece of\ncode will print the value ", "16", ", without leaving a trace:", "The other kind of instance attribute reference is a ", "method", ". A method is a\nfunction that \u201cbelongs to\u201d an object.  (In Python, the term method is not unique\nto class instances: other object types can have methods as well.  For example,\nlist objects have methods called append, insert, remove, sort, and so on.\nHowever, in the following discussion, we\u2019ll use the term method exclusively to\nmean methods of class instance objects, unless explicitly stated otherwise.)", "Valid method names of an instance object depend on its class.  By definition,\nall attributes of a class that are function  objects define corresponding\nmethods of its instances.  So in our example, ", "x.f", " is a valid method\nreference, since ", "MyClass.f", " is a function, but ", "x.i", " is not, since\n", "MyClass.i", " is not.  But ", "x.f", " is not the same thing as ", "MyClass.f", " \u2014 it\nis a ", "method object", ", not a function object."], "L3_Code": ["x", ".", "counter", " ", "=", " ", "1", "\n", "while", " ", "x", ".", "counter", " ", "<", " ", "10", ":", "\n    ", "x", ".", "counter", " ", "=", " ", "x", ".", "counter", " ", "*", " ", "2", "\n", "print", "(", "x", ".", "counter", ")", "\n", "del", " ", "x", ".", "counter", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes", "M_Desc": ["Classes provide a means of bundling data and functionality together.  Creating\na new class creates a new ", "type", " of object, allowing new ", "instances", " of that\ntype to be made.  Each class instance can have attributes attached to it for\nmaintaining its state.  Class instances can also have methods (defined by its\nclass) for modifying its state.", "Compared with other programming languages, Python\u2019s class mechanism adds classes\nwith a minimum of new syntax and semantics.  It is a mixture of the class\nmechanisms found in C++ and Modula-3.  Python classes provide all the standard\nfeatures of Object Oriented Programming: the class inheritance mechanism allows\nmultiple base classes, a derived class can override any methods of its base\nclass or classes, and a method can call the method of a base class with the same\nname.  Objects can contain arbitrary amounts and kinds of data.  As is true for\nmodules, classes partake of the dynamic nature of Python: they are created at\nruntime, and can be modified further after creation.", "In C++ terminology, normally class members (including the data members) are\n", "public", " (except see below ", "Private Variables", "), and all member functions are\n", "virtual", ".  As in Modula-3, there are no shorthands for referencing the object\u2019s\nmembers from its methods: the method function is declared with an explicit first\nargument representing the object, which is provided implicitly by the call.  As\nin Smalltalk, classes themselves are objects.  This provides semantics for\nimporting and renaming.  Unlike C++ and Modula-3, built-in types can be used as\nbase classes for extension by the user.  Also, like in C++, most built-in\noperators with special syntax (arithmetic operators, subscripting etc.) can be\nredefined for class instances.", "(Lacking universally accepted terminology to talk about classes, I will make\noccasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since\nits object-oriented semantics are closer to those of Python than C++, but I\nexpect that few readers have heard of it.)"], "M_Code": [], "L2_Title": "9.3. A First Look at Classes", "L2_Desc": ["Classes introduce a little bit of new syntax, three new object types, and some\nnew semantics."], "L2_Code": [], "L3_Title": "9.3.4. Method Objects", "L3_Desc": ["Usually, a method is called right after it is bound:", "In the ", "MyClass", " example, this will return the string ", "'hello", " ", "world'", ".\nHowever, it is not necessary to call a method right away: ", "x.f", " is a method\nobject, and can be stored away and called at a later time.  For example:", "will continue to print ", "hello", " ", "world", " until the end of time.", "What exactly happens when a method is called?  You may have noticed that\n", "x.f()", " was called without an argument above, even though the function\ndefinition for ", "f()", " specified an argument.  What happened to the argument?\nSurely Python raises an exception when a function that requires an argument is\ncalled without any \u2014 even if the argument isn\u2019t actually used\u2026", "Actually, you may have guessed the answer: the special thing about methods is\nthat the instance object is passed as the first argument of the function.  In our\nexample, the call ", "x.f()", " is exactly equivalent to ", "MyClass.f(x)", ".  In\ngeneral, calling a method with a list of ", "n", " arguments is equivalent to calling\nthe corresponding function with an argument list that is created by inserting\nthe method\u2019s instance object before the first argument.", "If you still don\u2019t understand how methods work, a look at the implementation can\nperhaps clarify matters.  When a non-data attribute of an instance is\nreferenced, the instance\u2019s class is searched.  If the name denotes a valid class\nattribute that is a function object, a method object is created by packing\n(pointers to) the instance object and the function object just found together in\nan abstract object: this is the method object.  When the method object is called\nwith an argument list, a new argument list is constructed from the instance\nobject and the argument list, and the function object is called with this new\nargument list."], "L3_Code": ["x", ".", "f", "()", "\n", "\n", "xf", " ", "=", " ", "x", ".", "f", "\n", "while", " ", "True", ":", "\n    ", "print", "(", "xf", "())", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes", "M_Desc": ["Classes provide a means of bundling data and functionality together.  Creating\na new class creates a new ", "type", " of object, allowing new ", "instances", " of that\ntype to be made.  Each class instance can have attributes attached to it for\nmaintaining its state.  Class instances can also have methods (defined by its\nclass) for modifying its state.", "Compared with other programming languages, Python\u2019s class mechanism adds classes\nwith a minimum of new syntax and semantics.  It is a mixture of the class\nmechanisms found in C++ and Modula-3.  Python classes provide all the standard\nfeatures of Object Oriented Programming: the class inheritance mechanism allows\nmultiple base classes, a derived class can override any methods of its base\nclass or classes, and a method can call the method of a base class with the same\nname.  Objects can contain arbitrary amounts and kinds of data.  As is true for\nmodules, classes partake of the dynamic nature of Python: they are created at\nruntime, and can be modified further after creation.", "In C++ terminology, normally class members (including the data members) are\n", "public", " (except see below ", "Private Variables", "), and all member functions are\n", "virtual", ".  As in Modula-3, there are no shorthands for referencing the object\u2019s\nmembers from its methods: the method function is declared with an explicit first\nargument representing the object, which is provided implicitly by the call.  As\nin Smalltalk, classes themselves are objects.  This provides semantics for\nimporting and renaming.  Unlike C++ and Modula-3, built-in types can be used as\nbase classes for extension by the user.  Also, like in C++, most built-in\noperators with special syntax (arithmetic operators, subscripting etc.) can be\nredefined for class instances.", "(Lacking universally accepted terminology to talk about classes, I will make\noccasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since\nits object-oriented semantics are closer to those of Python than C++, but I\nexpect that few readers have heard of it.)"], "M_Code": [], "L2_Title": "9.3. A First Look at Classes", "L2_Desc": ["Classes introduce a little bit of new syntax, three new object types, and some\nnew semantics."], "L2_Code": [], "L3_Title": "9.3.5. Class and Instance Variables", "L3_Desc": ["Generally speaking, instance variables are for data unique to each instance\nand class variables are for attributes and methods shared by all instances\nof the class:", "As discussed in ", "A Word About Names and Objects", ", shared data can have possibly surprising\neffects with involving ", "mutable", " objects such as lists and dictionaries.\nFor example, the ", "tricks", " list in the following code should not be used as a\nclass variable because just a single list would be shared by all ", "Dog", "\ninstances:", "Correct design of the class should use an instance variable instead:"], "L3_Code": ["class", " ", "Dog", ":", "\n\n    ", "kind", " ", "=", " ", "'canine'", "         ", "# class variable shared by all instances", "\n\n    ", "def", " ", "__init__", "(", "self", ",", " ", "name", "):", "\n        ", "self", ".", "name", " ", "=", " ", "name", "    ", "# instance variable unique to each instance", "\n\n", ">>>", " ", "d", " ", "=", " ", "Dog", "(", "'Fido'", ")", "\n", ">>>", " ", "e", " ", "=", " ", "Dog", "(", "'Buddy'", ")", "\n", ">>>", " ", "d", ".", "kind", "                  ", "# shared by all dogs", "\n", "'canine'", "\n", ">>>", " ", "e", ".", "kind", "                  ", "# shared by all dogs", "\n", "'canine'", "\n", ">>>", " ", "d", ".", "name", "                  ", "# unique to d", "\n", "'Fido'", "\n", ">>>", " ", "e", ".", "name", "                  ", "# unique to e", "\n", "'Buddy'", "\n", "\n", "class", " ", "Dog", ":", "\n\n    ", "tricks", " ", "=", " ", "[]", "             ", "# mistaken use of a class variable", "\n\n    ", "def", " ", "__init__", "(", "self", ",", " ", "name", "):", "\n        ", "self", ".", "name", " ", "=", " ", "name", "\n\n    ", "def", " ", "add_trick", "(", "self", ",", " ", "trick", "):", "\n        ", "self", ".", "tricks", ".", "append", "(", "trick", ")", "\n\n", ">>>", " ", "d", " ", "=", " ", "Dog", "(", "'Fido'", ")", "\n", ">>>", " ", "e", " ", "=", " ", "Dog", "(", "'Buddy'", ")", "\n", ">>>", " ", "d", ".", "add_trick", "(", "'roll over'", ")", "\n", ">>>", " ", "e", ".", "add_trick", "(", "'play dead'", ")", "\n", ">>>", " ", "d", ".", "tricks", "                ", "# unexpectedly shared by all dogs", "\n", "[", "'roll over'", ",", " ", "'play dead'", "]", "\n", "\n", "class", " ", "Dog", ":", "\n\n    ", "def", " ", "__init__", "(", "self", ",", " ", "name", "):", "\n        ", "self", ".", "name", " ", "=", " ", "name", "\n        ", "self", ".", "tricks", " ", "=", " ", "[]", "    ", "# creates a new empty list for each dog", "\n\n    ", "def", " ", "add_trick", "(", "self", ",", " ", "trick", "):", "\n        ", "self", ".", "tricks", ".", "append", "(", "trick", ")", "\n\n", ">>>", " ", "d", " ", "=", " ", "Dog", "(", "'Fido'", ")", "\n", ">>>", " ", "e", " ", "=", " ", "Dog", "(", "'Buddy'", ")", "\n", ">>>", " ", "d", ".", "add_trick", "(", "'roll over'", ")", "\n", ">>>", " ", "e", ".", "add_trick", "(", "'play dead'", ")", "\n", ">>>", " ", "d", ".", "tricks", "\n", "[", "'roll over'", "]", "\n", ">>>", " ", "e", ".", "tricks", "\n", "[", "'play dead'", "]", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes", "M_Desc": ["Classes provide a means of bundling data and functionality together.  Creating\na new class creates a new ", "type", " of object, allowing new ", "instances", " of that\ntype to be made.  Each class instance can have attributes attached to it for\nmaintaining its state.  Class instances can also have methods (defined by its\nclass) for modifying its state.", "Compared with other programming languages, Python\u2019s class mechanism adds classes\nwith a minimum of new syntax and semantics.  It is a mixture of the class\nmechanisms found in C++ and Modula-3.  Python classes provide all the standard\nfeatures of Object Oriented Programming: the class inheritance mechanism allows\nmultiple base classes, a derived class can override any methods of its base\nclass or classes, and a method can call the method of a base class with the same\nname.  Objects can contain arbitrary amounts and kinds of data.  As is true for\nmodules, classes partake of the dynamic nature of Python: they are created at\nruntime, and can be modified further after creation.", "In C++ terminology, normally class members (including the data members) are\n", "public", " (except see below ", "Private Variables", "), and all member functions are\n", "virtual", ".  As in Modula-3, there are no shorthands for referencing the object\u2019s\nmembers from its methods: the method function is declared with an explicit first\nargument representing the object, which is provided implicitly by the call.  As\nin Smalltalk, classes themselves are objects.  This provides semantics for\nimporting and renaming.  Unlike C++ and Modula-3, built-in types can be used as\nbase classes for extension by the user.  Also, like in C++, most built-in\noperators with special syntax (arithmetic operators, subscripting etc.) can be\nredefined for class instances.", "(Lacking universally accepted terminology to talk about classes, I will make\noccasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since\nits object-oriented semantics are closer to those of Python than C++, but I\nexpect that few readers have heard of it.)"], "M_Code": [], "L2_Title": "9.4. Random Remarks", "L2_Desc": ["Data attributes override method attributes with the same name; to avoid\naccidental name conflicts, which may cause hard-to-find bugs in large programs,\nit is wise to use some kind of convention that minimizes the chance of\nconflicts.  Possible conventions include capitalizing method names, prefixing\ndata attribute names with a small unique string (perhaps just an underscore), or\nusing verbs for methods and nouns for data attributes.", "Data attributes may be referenced by methods as well as by ordinary users\n(\u201cclients\u201d) of an object.  In other words, classes are not usable to implement\npure abstract data types.  In fact, nothing in Python makes it possible to\nenforce data hiding \u2014 it is all based upon convention.  (On the other hand,\nthe Python implementation, written in C, can completely hide implementation\ndetails and control access to an object if necessary; this can be used by\nextensions to Python written in C.)", "Clients should use data attributes with care \u2014 clients may mess up invariants\nmaintained by the methods by stamping on their data attributes.  Note that\nclients may add data attributes of their own to an instance object without\naffecting the validity of the methods, as long as name conflicts are avoided \u2014\nagain, a naming convention can save a lot of headaches here.", "There is no shorthand for referencing data attributes (or other methods!) from\nwithin methods.  I find that this actually increases the readability of methods:\nthere is no chance of confusing local variables and instance variables when\nglancing through a method.", "Often, the first argument of a method is called ", "self", ".  This is nothing more\nthan a convention: the name ", "self", " has absolutely no special meaning to\nPython.  Note, however, that by not following the convention your code may be\nless readable to other Python programmers, and it is also conceivable that a\n", "class browser", " program might be written that relies upon such a convention.", "Any function object that is a class attribute defines a method for instances of\nthat class.  It is not necessary that the function definition is textually\nenclosed in the class definition: assigning a function object to a local\nvariable in the class is also ok.  For example:", "Now ", "f", ", ", "g", " and ", "h", " are all attributes of class ", "C", " that refer to\nfunction objects, and consequently they are all methods of instances of\n", "C", " \u2014 ", "h", " being exactly equivalent to ", "g", ".  Note that this practice\nusually only serves to confuse the reader of a program.", "Methods may call other methods by using method attributes of the ", "self", "\nargument:", "Methods may reference global names in the same way as ordinary functions.  The\nglobal scope associated with a method is the module containing its\ndefinition.  (A class is never used as a global scope.)  While one\nrarely encounters a good reason for using global data in a method, there are\nmany legitimate uses of the global scope: for one thing, functions and modules\nimported into the global scope can be used by methods, as well as functions and\nclasses defined in it.  Usually, the class containing the method is itself\ndefined in this global scope, and in the next section we\u2019ll find some good\nreasons why a method would want to reference its own class.", "Each value is an object, and therefore has a ", "class", " (also called its ", "type", ").\nIt is stored as ", "object.__class__", "."], "L2_Code": ["# Function defined outside the class", "\n", "def", " ", "f1", "(", "self", ",", " ", "x", ",", " ", "y", "):", "\n    ", "return", " ", "min", "(", "x", ",", " ", "x", "+", "y", ")", "\n\n", "class", " ", "C", ":", "\n    ", "f", " ", "=", " ", "f1", "\n\n    ", "def", " ", "g", "(", "self", "):", "\n        ", "return", " ", "'hello world'", "\n\n    ", "h", " ", "=", " ", "g", "\n", "\n", "class", " ", "Bag", ":", "\n    ", "def", " ", "__init__", "(", "self", "):", "\n        ", "self", ".", "data", " ", "=", " ", "[]", "\n\n    ", "def", " ", "add", "(", "self", ",", " ", "x", "):", "\n        ", "self", ".", "data", ".", "append", "(", "x", ")", "\n\n    ", "def", " ", "addtwice", "(", "self", ",", " ", "x", "):", "\n        ", "self", ".", "add", "(", "x", ")", "\n        ", "self", ".", "add", "(", "x", ")", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes", "M_Desc": ["Classes provide a means of bundling data and functionality together.  Creating\na new class creates a new ", "type", " of object, allowing new ", "instances", " of that\ntype to be made.  Each class instance can have attributes attached to it for\nmaintaining its state.  Class instances can also have methods (defined by its\nclass) for modifying its state.", "Compared with other programming languages, Python\u2019s class mechanism adds classes\nwith a minimum of new syntax and semantics.  It is a mixture of the class\nmechanisms found in C++ and Modula-3.  Python classes provide all the standard\nfeatures of Object Oriented Programming: the class inheritance mechanism allows\nmultiple base classes, a derived class can override any methods of its base\nclass or classes, and a method can call the method of a base class with the same\nname.  Objects can contain arbitrary amounts and kinds of data.  As is true for\nmodules, classes partake of the dynamic nature of Python: they are created at\nruntime, and can be modified further after creation.", "In C++ terminology, normally class members (including the data members) are\n", "public", " (except see below ", "Private Variables", "), and all member functions are\n", "virtual", ".  As in Modula-3, there are no shorthands for referencing the object\u2019s\nmembers from its methods: the method function is declared with an explicit first\nargument representing the object, which is provided implicitly by the call.  As\nin Smalltalk, classes themselves are objects.  This provides semantics for\nimporting and renaming.  Unlike C++ and Modula-3, built-in types can be used as\nbase classes for extension by the user.  Also, like in C++, most built-in\noperators with special syntax (arithmetic operators, subscripting etc.) can be\nredefined for class instances.", "(Lacking universally accepted terminology to talk about classes, I will make\noccasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since\nits object-oriented semantics are closer to those of Python than C++, but I\nexpect that few readers have heard of it.)"], "M_Code": [], "L2_Title": "9.5. Inheritance", "L2_Desc": ["Of course, a language feature would not be worthy of the name \u201cclass\u201d without\nsupporting inheritance.  The syntax for a derived class definition looks like\nthis:", "The name ", "BaseClassName", " must be defined in a scope containing the\nderived class definition.  In place of a base class name, other arbitrary\nexpressions are also allowed.  This can be useful, for example, when the base\nclass is defined in another module:", "Execution of a derived class definition proceeds the same as for a base class.\nWhen the class object is constructed, the base class is remembered.  This is\nused for resolving attribute references: if a requested attribute is not found\nin the class, the search proceeds to look in the base class.  This rule is\napplied recursively if the base class itself is derived from some other class.", "There\u2019s nothing special about instantiation of derived classes:\n", "DerivedClassName()", " creates a new instance of the class.  Method references\nare resolved as follows: the corresponding class attribute is searched,\ndescending down the chain of base classes if necessary, and the method reference\nis valid if this yields a function object.", "Derived classes may override methods of their base classes.  Because methods\nhave no special privileges when calling other methods of the same object, a\nmethod of a base class that calls another method defined in the same base class\nmay end up calling a method of a derived class that overrides it.  (For C++\nprogrammers: all methods in Python are effectively ", "virtual", ".)", "An overriding method in a derived class may in fact want to extend rather than\nsimply replace the base class method of the same name. There is a simple way to\ncall the base class method directly: just call ", "BaseClassName.methodname(self,", "\n", "arguments)", ".  This is occasionally useful to clients as well.  (Note that this\nonly works if the base class is accessible as ", "BaseClassName", " in the global\nscope.)", "Python has two built-in functions that work with inheritance:"], "L2_Code": ["class", " ", "DerivedClassName", "(", "BaseClassName", "):", "\n    ", "<", "statement", "-", "1", ">", "\n    ", ".", "\n    ", ".", "\n    ", ".", "\n    ", "<", "statement", "-", "N", ">", "\n", "\n", "class", " ", "DerivedClassName", "(", "modname", ".", "BaseClassName", "):", "\n", "\n"], "L3_Title": "9.5.1. Multiple Inheritance", "L3_Desc": ["Python supports a form of multiple inheritance as well.  A class definition with\nmultiple base classes looks like this:", "For most purposes, in the simplest cases, you can think of the search for\nattributes inherited from a parent class as depth-first, left-to-right, not\nsearching twice in the same class where there is an overlap in the hierarchy.\nThus, if an attribute is not found in ", "DerivedClassName", ", it is searched\nfor in ", "Base1", ", then (recursively) in the base classes of ", "Base1", ",\nand if it was not found there, it was searched for in ", "Base2", ", and so on.", "In fact, it is slightly more complex than that; the method resolution order\nchanges dynamically to support cooperative calls to ", "super()", ".  This\napproach is known in some other multiple-inheritance languages as\ncall-next-method and is more powerful than the super call found in\nsingle-inheritance languages.", "Dynamic ordering is necessary because all cases of multiple inheritance exhibit\none or more diamond relationships (where at least one of the parent classes\ncan be accessed through multiple paths from the bottommost class).  For example,\nall classes inherit from ", "object", ", so any case of multiple inheritance\nprovides more than one path to reach ", "object", ".  To keep the base classes\nfrom being accessed more than once, the dynamic algorithm linearizes the search\norder in a way that preserves the left-to-right ordering specified in each\nclass, that calls each parent only once, and that is monotonic (meaning that a\nclass can be subclassed without affecting the precedence order of its parents).\nTaken together, these properties make it possible to design reliable and\nextensible classes with multiple inheritance.  For more detail, see\n", "https://www.python.org/download/releases/2.3/mro/", "."], "L3_Code": ["class", " ", "DerivedClassName", "(", "Base1", ",", " ", "Base2", ",", " ", "Base3", "):", "\n    ", "<", "statement", "-", "1", ">", "\n    ", ".", "\n    ", ".", "\n    ", ".", "\n    ", "<", "statement", "-", "N", ">", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools", "M_Desc": ["Besides the ", "while", " statement just introduced, Python knows the usual\ncontrol flow statements known from other languages, with some twists."], "M_Code": [], "L2_Title": "4.3. The ", "L2_Desc": ["If you do need to iterate over a sequence of numbers, the built-in function\n", "range()", " comes in handy.  It generates arithmetic progressions:", "The given end point is never part of the generated sequence; ", "range(10)", " generates\n10 values, the legal indices for items of a sequence of length 10.  It\nis possible to let the range start at another number, or to specify a different\nincrement (even negative; sometimes this is called the \u2018step\u2019):", "To iterate over the indices of a sequence, you can combine ", "range()", " and\n", "len()", " as follows:", "In most such cases, however, it is convenient to use the ", "enumerate()", "\nfunction, see ", "Looping Techniques", ".", "A strange thing happens if you just print a range:", "In many ways the object returned by ", "range()", " behaves as if it is a list,\nbut in fact it isn\u2019t. It is an object which returns the successive items of\nthe desired sequence when you iterate over it, but it doesn\u2019t really make\nthe list, thus saving space.", "We say such an object is ", "iterable", ", that is, suitable as a target for\nfunctions and constructs that expect something from which they can\nobtain successive items until the supply is exhausted. We have seen that\nthe ", "for", " statement is such an ", "iterator", ". The function ", "list()", "\nis another; it creates lists from iterables:", "Later we will see more functions that return iterables and take iterables as argument."], "L2_Code": [">>> ", "for", " ", "i", " ", "in", " ", "range", "(", "5", "):", "\n", "... ", "    ", "print", "(", "i", ")", "\n", "...", "\n", "0", "\n", "1", "\n", "2", "\n", "3", "\n", "4", "\n", "\n", "range", "(", "5", ",", " ", "10", ")", "\n   ", "5", ",", " ", "6", ",", " ", "7", ",", " ", "8", ",", " ", "9", "\n\n", "range", "(", "0", ",", " ", "10", ",", " ", "3", ")", "\n   ", "0", ",", " ", "3", ",", " ", "6", ",", " ", "9", "\n\n", "range", "(", "-", "10", ",", " ", "-", "100", ",", " ", "-", "30", ")", "\n  ", "-", "10", ",", " ", "-", "40", ",", " ", "-", "70", "\n", "\n", ">>> ", "a", " ", "=", " ", "[", "'Mary'", ",", " ", "'had'", ",", " ", "'a'", ",", " ", "'little'", ",", " ", "'lamb'", "]", "\n", ">>> ", "for", " ", "i", " ", "in", " ", "range", "(", "len", "(", "a", ")):", "\n", "... ", "    ", "print", "(", "i", ",", " ", "a", "[", "i", "])", "\n", "...", "\n", "0 Mary", "\n", "1 had", "\n", "2 a", "\n", "3 little", "\n", "4 lamb", "\n", "\n", ">>> ", "print", "(", "range", "(", "10", "))", "\n", "range(0, 10)", "\n", "\n", ">>> ", "list", "(", "range", "(", "5", "))", "\n", "[0, 1, 2, 3, 4]", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools", "M_Desc": ["Besides the ", "while", " statement just introduced, Python knows the usual\ncontrol flow statements known from other languages, with some twists."], "M_Code": [], "L2_Title": "4.4. ", "L2_Desc": ["The ", "break", " statement, like in C, breaks out of the innermost enclosing\n", "for", " or ", "while", " loop.", "Loop statements may have an ", "else", " clause; it is executed when the loop\nterminates through exhaustion of the list (with ", "for", ") or when the\ncondition becomes false (with ", "while", "), but not when the loop is\nterminated by a ", "break", " statement.  This is exemplified by the\nfollowing loop, which searches for prime numbers:", "(Yes, this is the correct code.  Look closely: the ", "else", " clause belongs to\nthe ", "for", " loop, ", "not", " the ", "if", " statement.)", "When used with a loop, the ", "else", " clause has more in common with the\n", "else", " clause of a ", "try", " statement than it does that of\n", "if", " statements: a ", "try", " statement\u2019s ", "else", " clause runs\nwhen no exception occurs, and a loop\u2019s ", "else", " clause runs when no ", "break", "\noccurs. For more on the ", "try", " statement and exceptions, see\n", "Handling Exceptions", ".", "The ", "continue", " statement, also borrowed from C, continues with the next\niteration of the loop:"], "L2_Code": [">>> ", "for", " ", "n", " ", "in", " ", "range", "(", "2", ",", " ", "10", "):", "\n", "... ", "    ", "for", " ", "x", " ", "in", " ", "range", "(", "2", ",", " ", "n", "):", "\n", "... ", "        ", "if", " ", "n", " ", "%", " ", "x", " ", "==", " ", "0", ":", "\n", "... ", "            ", "print", "(", "n", ",", " ", "'equals'", ",", " ", "x", ",", " ", "'*'", ",", " ", "n", "//", "x", ")", "\n", "... ", "            ", "break", "\n", "... ", "    ", "else", ":", "\n", "... ", "        ", "# loop fell through without finding a factor", "\n", "... ", "        ", "print", "(", "n", ",", " ", "'is a prime number'", ")", "\n", "...", "\n", "2 is a prime number", "\n", "3 is a prime number", "\n", "4 equals 2 * 2", "\n", "5 is a prime number", "\n", "6 equals 2 * 3", "\n", "7 is a prime number", "\n", "8 equals 2 * 4", "\n", "9 equals 3 * 3", "\n", "\n", ">>> ", "for", " ", "num", " ", "in", " ", "range", "(", "2", ",", " ", "10", "):", "\n", "... ", "    ", "if", " ", "num", " ", "%", " ", "2", " ", "==", " ", "0", ":", "\n", "... ", "        ", "print", "(", "\"Found an even number\"", ",", " ", "num", ")", "\n", "... ", "        ", "continue", "\n", "... ", "    ", "print", "(", "\"Found a number\"", ",", " ", "num", ")", "\n", "Found an even number 2", "\n", "Found a number 3", "\n", "Found an even number 4", "\n", "Found a number 5", "\n", "Found an even number 6", "\n", "Found a number 7", "\n", "Found an even number 8", "\n", "Found a number 9", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools", "M_Desc": ["Besides the ", "while", " statement just introduced, Python knows the usual\ncontrol flow statements known from other languages, with some twists."], "M_Code": [], "L2_Title": "4.5. ", "L2_Desc": ["The ", "pass", " statement does nothing. It can be used when a statement is\nrequired syntactically but the program requires no action. For example:", "This is commonly used for creating minimal classes:", "Another place ", "pass", " can be used is as a place-holder for a function or\nconditional body when you are working on new code, allowing you to keep thinking\nat a more abstract level.  The ", "pass", " is silently ignored:"], "L2_Code": [">>> ", "while", " ", "True", ":", "\n", "... ", "    ", "pass", "  ", "# Busy-wait for keyboard interrupt (Ctrl+C)", "\n", "...", "\n", "\n", ">>> ", "class", " ", "MyEmptyClass", ":", "\n", "... ", "    ", "pass", "\n", "...", "\n", "\n", ">>> ", "def", " ", "initlog", "(", "*", "args", "):", "\n", "... ", "    ", "pass", "   ", "# Remember to implement this!", "\n", "...", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools", "M_Desc": ["Besides the ", "while", " statement just introduced, Python knows the usual\ncontrol flow statements known from other languages, with some twists."], "M_Code": [], "L2_Title": "4.6. Defining Functions", "L2_Desc": ["We can create a function that writes the Fibonacci series to an arbitrary\nboundary:", "The keyword ", "def", " introduces a function ", "definition", ".  It must be\nfollowed by the function name and the parenthesized list of formal parameters.\nThe statements that form the body of the function start at the next line, and\nmust be indented.", "The first statement of the function body can optionally be a string literal;\nthis string literal is the function\u2019s documentation string, or ", "docstring", ".\n(More about docstrings can be found in the section ", "Documentation Strings", ".)\nThere are tools which use docstrings to automatically produce online or printed\ndocumentation, or to let the user interactively browse through code; it\u2019s good\npractice to include docstrings in code that you write, so make a habit of it.", "The ", "execution", " of a function introduces a new symbol table used for the local\nvariables of the function.  More precisely, all variable assignments in a\nfunction store the value in the local symbol table; whereas variable references\nfirst look in the local symbol table, then in the local symbol tables of\nenclosing functions, then in the global symbol table, and finally in the table\nof built-in names. Thus, global variables cannot be directly assigned a value\nwithin a function (unless named in a ", "global", " statement), although they\nmay be referenced.", "The actual parameters (arguments) to a function call are introduced in the local\nsymbol table of the called function when it is called; thus, arguments are\npassed using ", "call by value", " (where the ", "value", " is always an object ", "reference", ",\nnot the value of the object). ", "[1]", " When a function calls another function, a new\nlocal symbol table is created for that call.", "A function definition introduces the function name in the current symbol table.\nThe value of the function name has a type that is recognized by the interpreter\nas a user-defined function.  This value can be assigned to another name which\ncan then also be used as a function.  This serves as a general renaming\nmechanism:", "Coming from other languages, you might object that ", "fib", " is not a function but\na procedure since it doesn\u2019t return a value.  In fact, even functions without a\n", "return", " statement do return a value, albeit a rather boring one.  This\nvalue is called ", "None", " (it\u2019s a built-in name).  Writing the value ", "None", " is\nnormally suppressed by the interpreter if it would be the only value written.\nYou can see it if you really want to using ", "print()", ":", "It is simple to write a function that returns a list of the numbers of the\nFibonacci series, instead of printing it:", "This example, as usual, demonstrates some new Python features:"], "L2_Code": [">>> ", "def", " ", "fib", "(", "n", "):", "    ", "# write Fibonacci series up to n", "\n", "... ", "    ", "\"\"\"Print a Fibonacci series up to n.\"\"\"", "\n", "... ", "    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n", "... ", "    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n", "... ", "        ", "print", "(", "a", ",", " ", "end", "=", "' '", ")", "\n", "... ", "        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n", "... ", "    ", "print", "()", "\n", "...", "\n", ">>> ", "# Now call the function we just defined:", "\n", "... ", "fib", "(", "2000", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597", "\n", "\n", ">>> ", "fib", "\n", "<function fib at 10042ed0>", "\n", ">>> ", "f", " ", "=", " ", "fib", "\n", ">>> ", "f", "(", "100", ")", "\n", "0 1 1 2 3 5 8 13 21 34 55 89", "\n", "\n", ">>> ", "fib", "(", "0", ")", "\n", ">>> ", "print", "(", "fib", "(", "0", "))", "\n", "None", "\n", "\n", ">>> ", "def", " ", "fib2", "(", "n", "):", "  ", "# return Fibonacci series up to n", "\n", "... ", "    ", "\"\"\"Return a list containing the Fibonacci series up to n.\"\"\"", "\n", "... ", "    ", "result", " ", "=", " ", "[]", "\n", "... ", "    ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n", "... ", "    ", "while", " ", "a", " ", "<", " ", "n", ":", "\n", "... ", "        ", "result", ".", "append", "(", "a", ")", "    ", "# see below", "\n", "... ", "        ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n", "... ", "    ", "return", " ", "result", "\n", "...", "\n", ">>> ", "f100", " ", "=", " ", "fib2", "(", "100", ")", "    ", "# call it", "\n", ">>> ", "f100", "                ", "# write the result", "\n", "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools", "M_Desc": ["Besides the ", "while", " statement just introduced, Python knows the usual\ncontrol flow statements known from other languages, with some twists."], "M_Code": [], "L2_Title": "4.7. More on Defining Functions", "L2_Desc": ["It is also possible to define functions with a variable number of arguments.\nThere are three forms, which can be combined."], "L2_Code": [], "L3_Title": "4.7.1. Default Argument Values", "L3_Desc": ["The most useful form is to specify a default value for one or more arguments.\nThis creates a function that can be called with fewer arguments than it is\ndefined to allow.  For example:", "This function can be called in several ways:", "This example also introduces the ", "in", " keyword. This tests whether or\nnot a sequence contains a certain value.", "The default values are evaluated at the point of function definition in the\n", "defining", " scope, so that", "will print ", "5", ".", "Important warning:", "  The default value is evaluated only once. This makes a\ndifference when the default is a mutable object such as a list, dictionary, or\ninstances of most classes.  For example, the following function accumulates the\narguments passed to it on subsequent calls:", "This will print", "If you don\u2019t want the default to be shared between subsequent calls, you can\nwrite the function like this instead:"], "L3_Code": ["def", " ", "ask_ok", "(", "prompt", ",", " ", "retries", "=", "4", ",", " ", "reminder", "=", "'Please try again!'", "):", "\n    ", "while", " ", "True", ":", "\n        ", "ok", " ", "=", " ", "input", "(", "prompt", ")", "\n        ", "if", " ", "ok", " ", "in", " ", "(", "'y'", ",", " ", "'ye'", ",", " ", "'yes'", "):", "\n            ", "return", " ", "True", "\n        ", "if", " ", "ok", " ", "in", " ", "(", "'n'", ",", " ", "'no'", ",", " ", "'nop'", ",", " ", "'nope'", "):", "\n            ", "return", " ", "False", "\n        ", "retries", " ", "=", " ", "retries", " ", "-", " ", "1", "\n        ", "if", " ", "retries", " ", "<", " ", "0", ":", "\n            ", "raise", " ", "ValueError", "(", "'invalid user response'", ")", "\n        ", "print", "(", "reminder", ")", "\n", "\n", "i", " ", "=", " ", "5", "\n\n", "def", " ", "f", "(", "arg", "=", "i", "):", "\n    ", "print", "(", "arg", ")", "\n\n", "i", " ", "=", " ", "6", "\n", "f", "()", "\n", "\n", "def", " ", "f", "(", "a", ",", " ", "L", "=", "[]):", "\n    ", "L", ".", "append", "(", "a", ")", "\n    ", "return", " ", "L", "\n\n", "print", "(", "f", "(", "1", "))", "\n", "print", "(", "f", "(", "2", "))", "\n", "print", "(", "f", "(", "3", "))", "\n", "\n", "[", "1", "]", "\n", "[", "1", ",", " ", "2", "]", "\n", "[", "1", ",", " ", "2", ",", " ", "3", "]", "\n", "\n", "def", " ", "f", "(", "a", ",", " ", "L", "=", "None", "):", "\n    ", "if", " ", "L", " ", "is", " ", "None", ":", "\n        ", "L", " ", "=", " ", "[]", "\n    ", "L", ".", "append", "(", "a", ")", "\n    ", "return", " ", "L", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools", "M_Desc": ["Besides the ", "while", " statement just introduced, Python knows the usual\ncontrol flow statements known from other languages, with some twists."], "M_Code": [], "L2_Title": "4.7. More on Defining Functions", "L2_Desc": ["It is also possible to define functions with a variable number of arguments.\nThere are three forms, which can be combined."], "L2_Code": [], "L3_Title": "4.7.2. Keyword Arguments", "L3_Desc": ["Functions can also be called using ", "keyword arguments", "\nof the form ", "kwarg=value", ".  For instance, the following function:", "accepts one required argument (", "voltage", ") and three optional arguments\n(", "state", ", ", "action", ", and ", "type", ").  This function can be called in any\nof the following ways:", "but all the following calls would be invalid:", "In a function call, keyword arguments must follow positional arguments.\nAll the keyword arguments passed must match one of the arguments\naccepted by the function (e.g. ", "actor", " is not a valid argument for the\n", "parrot", " function), and their order is not important.  This also includes\nnon-optional arguments (e.g. ", "parrot(voltage=1000)", " is valid too).\nNo argument may receive a value more than once.\nHere\u2019s an example that fails due to this restriction:", "When a final formal parameter of the form ", "**name", " is present, it receives a\ndictionary (see ", "Mapping Types \u2014 dict", ") containing all keyword arguments except for\nthose corresponding to a formal parameter.  This may be combined with a formal\nparameter of the form ", "*name", " (described in the next subsection) which\nreceives a tuple containing the positional arguments beyond the formal parameter\nlist.  (", "*name", " must occur before ", "**name", ".) For example, if we define a\nfunction like this:", "It could be called like this:", "and of course it would print:", "Note that the order in which the keyword arguments are printed is guaranteed\nto match the order in which they were provided in the function call."], "L3_Code": ["def", " ", "parrot", "(", "voltage", ",", " ", "state", "=", "'a stiff'", ",", " ", "action", "=", "'voom'", ",", " ", "type", "=", "'Norwegian Blue'", "):", "\n    ", "print", "(", "\"-- This parrot wouldn't\"", ",", " ", "action", ",", " ", "end", "=", "' '", ")", "\n    ", "print", "(", "\"if you put\"", ",", " ", "voltage", ",", " ", "\"volts through it.\"", ")", "\n    ", "print", "(", "\"-- Lovely plumage, the\"", ",", " ", "type", ")", "\n    ", "print", "(", "\"-- It's\"", ",", " ", "state", ",", " ", "\"!\"", ")", "\n", "\n", "parrot", "(", "1000", ")", "                                          ", "# 1 positional argument", "\n", "parrot", "(", "voltage", "=", "1000", ")", "                                  ", "# 1 keyword argument", "\n", "parrot", "(", "voltage", "=", "1000000", ",", " ", "action", "=", "'VOOOOOM'", ")", "             ", "# 2 keyword arguments", "\n", "parrot", "(", "action", "=", "'VOOOOOM'", ",", " ", "voltage", "=", "1000000", ")", "             ", "# 2 keyword arguments", "\n", "parrot", "(", "'a million'", ",", " ", "'bereft of life'", ",", " ", "'jump'", ")", "         ", "# 3 positional arguments", "\n", "parrot", "(", "'a thousand'", ",", " ", "state", "=", "'pushing up the daisies'", ")", "  ", "# 1 positional, 1 keyword", "\n", "\n", "parrot", "()", "                     ", "# required argument missing", "\n", "parrot", "(", "voltage", "=", "5.0", ",", " ", "'dead'", ")", "  ", "# non-keyword argument after a keyword argument", "\n", "parrot", "(", "110", ",", " ", "voltage", "=", "220", ")", "     ", "# duplicate value for the same argument", "\n", "parrot", "(", "actor", "=", "'John Cleese'", ")", "  ", "# unknown keyword argument", "\n", "\n", ">>> ", "def", " ", "function", "(", "a", "):", "\n", "... ", "    ", "pass", "\n", "...", "\n", ">>> ", "function", "(", "0", ",", " ", "a", "=", "0", ")", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "1", ", in ", "<module>", "\n", "TypeError", ": ", "function() got multiple values for keyword argument 'a'", "\n", "\n", "def", " ", "cheeseshop", "(", "kind", ",", " ", "*", "arguments", ",", " ", "**", "keywords", "):", "\n    ", "print", "(", "\"-- Do you have any\"", ",", " ", "kind", ",", " ", "\"?\"", ")", "\n    ", "print", "(", "\"-- I'm sorry, we're all out of\"", ",", " ", "kind", ")", "\n    ", "for", " ", "arg", " ", "in", " ", "arguments", ":", "\n        ", "print", "(", "arg", ")", "\n    ", "print", "(", "\"-\"", " ", "*", " ", "40", ")", "\n    ", "for", " ", "kw", " ", "in", " ", "keywords", ":", "\n        ", "print", "(", "kw", ",", " ", "\":\"", ",", " ", "keywords", "[", "kw", "])", "\n", "\n", "cheeseshop", "(", "\"Limburger\"", ",", " ", "\"It's very runny, sir.\"", ",", "\n           ", "\"It's really very, VERY runny, sir.\"", ",", "\n           ", "shopkeeper", "=", "\"Michael Palin\"", ",", "\n           ", "client", "=", "\"John Cleese\"", ",", "\n           ", "sketch", "=", "\"Cheese Shop Sketch\"", ")", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes", "M_Desc": ["Classes provide a means of bundling data and functionality together.  Creating\na new class creates a new ", "type", " of object, allowing new ", "instances", " of that\ntype to be made.  Each class instance can have attributes attached to it for\nmaintaining its state.  Class instances can also have methods (defined by its\nclass) for modifying its state.", "Compared with other programming languages, Python\u2019s class mechanism adds classes\nwith a minimum of new syntax and semantics.  It is a mixture of the class\nmechanisms found in C++ and Modula-3.  Python classes provide all the standard\nfeatures of Object Oriented Programming: the class inheritance mechanism allows\nmultiple base classes, a derived class can override any methods of its base\nclass or classes, and a method can call the method of a base class with the same\nname.  Objects can contain arbitrary amounts and kinds of data.  As is true for\nmodules, classes partake of the dynamic nature of Python: they are created at\nruntime, and can be modified further after creation.", "In C++ terminology, normally class members (including the data members) are\n", "public", " (except see below ", "Private Variables", "), and all member functions are\n", "virtual", ".  As in Modula-3, there are no shorthands for referencing the object\u2019s\nmembers from its methods: the method function is declared with an explicit first\nargument representing the object, which is provided implicitly by the call.  As\nin Smalltalk, classes themselves are objects.  This provides semantics for\nimporting and renaming.  Unlike C++ and Modula-3, built-in types can be used as\nbase classes for extension by the user.  Also, like in C++, most built-in\noperators with special syntax (arithmetic operators, subscripting etc.) can be\nredefined for class instances.", "(Lacking universally accepted terminology to talk about classes, I will make\noccasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since\nits object-oriented semantics are closer to those of Python than C++, but I\nexpect that few readers have heard of it.)"], "M_Code": [], "L2_Title": "9.6. Private Variables", "L2_Desc": ["\u201cPrivate\u201d instance variables that cannot be accessed except from inside an\nobject don\u2019t exist in Python.  However, there is a convention that is followed\nby most Python code: a name prefixed with an underscore (e.g. ", "_spam", ") should\nbe treated as a non-public part of the API (whether it is a function, a method\nor a data member).  It should be considered an implementation detail and subject\nto change without notice.", "Since there is a valid use-case for class-private members (namely to avoid name\nclashes of names with names defined by subclasses), there is limited support for\nsuch a mechanism, called ", "name mangling", ".  Any identifier of the form\n", "__spam", " (at least two leading underscores, at most one trailing underscore)\nis textually replaced with ", "_classname__spam", ", where ", "classname", " is the\ncurrent class name with leading underscore(s) stripped.  This mangling is done\nwithout regard to the syntactic position of the identifier, as long as it\noccurs within the definition of a class.", "Name mangling is helpful for letting subclasses override methods without\nbreaking intraclass method calls.  For example:", "Note that the mangling rules are designed mostly to avoid accidents; it still is\npossible to access or modify a variable that is considered private.  This can\neven be useful in special circumstances, such as in the debugger.", "Notice that code passed to ", "exec()", " or ", "eval()", " does not consider the\nclassname of the invoking class to be the current class; this is similar to the\neffect of the ", "global", " statement, the effect of which is likewise restricted\nto code that is byte-compiled together.  The same restriction applies to\n", "getattr()", ", ", "setattr()", " and ", "delattr()", ", as well as when referencing\n", "__dict__", " directly."], "L2_Code": ["class", " ", "Mapping", ":", "\n    ", "def", " ", "__init__", "(", "self", ",", " ", "iterable", "):", "\n        ", "self", ".", "items_list", " ", "=", " ", "[]", "\n        ", "self", ".", "__update", "(", "iterable", ")", "\n\n    ", "def", " ", "update", "(", "self", ",", " ", "iterable", "):", "\n        ", "for", " ", "item", " ", "in", " ", "iterable", ":", "\n            ", "self", ".", "items_list", ".", "append", "(", "item", ")", "\n\n    ", "__update", " ", "=", " ", "update", "   ", "# private copy of original update() method", "\n\n", "class", " ", "MappingSubclass", "(", "Mapping", "):", "\n\n    ", "def", " ", "update", "(", "self", ",", " ", "keys", ",", " ", "values", "):", "\n        ", "# provides new signature for update()", "\n        ", "# but does not break __init__()", "\n        ", "for", " ", "item", " ", "in", " ", "zip", "(", "keys", ",", " ", "values", "):", "\n            ", "self", ".", "items_list", ".", "append", "(", "item", ")", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes", "M_Desc": ["Classes provide a means of bundling data and functionality together.  Creating\na new class creates a new ", "type", " of object, allowing new ", "instances", " of that\ntype to be made.  Each class instance can have attributes attached to it for\nmaintaining its state.  Class instances can also have methods (defined by its\nclass) for modifying its state.", "Compared with other programming languages, Python\u2019s class mechanism adds classes\nwith a minimum of new syntax and semantics.  It is a mixture of the class\nmechanisms found in C++ and Modula-3.  Python classes provide all the standard\nfeatures of Object Oriented Programming: the class inheritance mechanism allows\nmultiple base classes, a derived class can override any methods of its base\nclass or classes, and a method can call the method of a base class with the same\nname.  Objects can contain arbitrary amounts and kinds of data.  As is true for\nmodules, classes partake of the dynamic nature of Python: they are created at\nruntime, and can be modified further after creation.", "In C++ terminology, normally class members (including the data members) are\n", "public", " (except see below ", "Private Variables", "), and all member functions are\n", "virtual", ".  As in Modula-3, there are no shorthands for referencing the object\u2019s\nmembers from its methods: the method function is declared with an explicit first\nargument representing the object, which is provided implicitly by the call.  As\nin Smalltalk, classes themselves are objects.  This provides semantics for\nimporting and renaming.  Unlike C++ and Modula-3, built-in types can be used as\nbase classes for extension by the user.  Also, like in C++, most built-in\noperators with special syntax (arithmetic operators, subscripting etc.) can be\nredefined for class instances.", "(Lacking universally accepted terminology to talk about classes, I will make\noccasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since\nits object-oriented semantics are closer to those of Python than C++, but I\nexpect that few readers have heard of it.)"], "M_Code": [], "L2_Title": "9.7. Odds and Ends", "L2_Desc": ["Sometimes it is useful to have a data type similar to the Pascal \u201crecord\u201d or C\n\u201cstruct\u201d, bundling together a few named data items.  An empty class definition\nwill do nicely:", "A piece of Python code that expects a particular abstract data type can often be\npassed a class that emulates the methods of that data type instead.  For\ninstance, if you have a function that formats some data from a file object, you\ncan define a class with methods ", "read()", " and ", "readline()", " that get the\ndata from a string buffer instead, and pass it as an argument.", "Instance method objects have attributes, too: ", "m.__self__", " is the instance\nobject with the method ", "m()", ", and ", "m.__func__", " is the function object\ncorresponding to the method."], "L2_Code": ["class", " ", "Employee", ":", "\n    ", "pass", "\n\n", "john", " ", "=", " ", "Employee", "()", "  ", "# Create an empty employee record", "\n\n", "# Fill the fields of the record", "\n", "john", ".", "name", " ", "=", " ", "'John Doe'", "\n", "john", ".", "dept", " ", "=", " ", "'computer lab'", "\n", "john", ".", "salary", " ", "=", " ", "1000", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes", "M_Desc": ["Classes provide a means of bundling data and functionality together.  Creating\na new class creates a new ", "type", " of object, allowing new ", "instances", " of that\ntype to be made.  Each class instance can have attributes attached to it for\nmaintaining its state.  Class instances can also have methods (defined by its\nclass) for modifying its state.", "Compared with other programming languages, Python\u2019s class mechanism adds classes\nwith a minimum of new syntax and semantics.  It is a mixture of the class\nmechanisms found in C++ and Modula-3.  Python classes provide all the standard\nfeatures of Object Oriented Programming: the class inheritance mechanism allows\nmultiple base classes, a derived class can override any methods of its base\nclass or classes, and a method can call the method of a base class with the same\nname.  Objects can contain arbitrary amounts and kinds of data.  As is true for\nmodules, classes partake of the dynamic nature of Python: they are created at\nruntime, and can be modified further after creation.", "In C++ terminology, normally class members (including the data members) are\n", "public", " (except see below ", "Private Variables", "), and all member functions are\n", "virtual", ".  As in Modula-3, there are no shorthands for referencing the object\u2019s\nmembers from its methods: the method function is declared with an explicit first\nargument representing the object, which is provided implicitly by the call.  As\nin Smalltalk, classes themselves are objects.  This provides semantics for\nimporting and renaming.  Unlike C++ and Modula-3, built-in types can be used as\nbase classes for extension by the user.  Also, like in C++, most built-in\noperators with special syntax (arithmetic operators, subscripting etc.) can be\nredefined for class instances.", "(Lacking universally accepted terminology to talk about classes, I will make\noccasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since\nits object-oriented semantics are closer to those of Python than C++, but I\nexpect that few readers have heard of it.)"], "M_Code": [], "L2_Title": "9.8. Iterators", "L2_Desc": ["By now you have probably noticed that most container objects can be looped over\nusing a ", "for", " statement:", "This style of access is clear, concise, and convenient.  The use of iterators\npervades and unifies Python.  Behind the scenes, the ", "for", " statement\ncalls ", "iter()", " on the container object.  The function returns an iterator\nobject that defines the method ", "__next__()", " which accesses\nelements in the container one at a time.  When there are no more elements,\n", "__next__()", " raises a ", "StopIteration", " exception which tells the\n", "for", " loop to terminate.  You can call the ", "__next__()", " method\nusing the ", "next()", " built-in function; this example shows how it all works:", "Having seen the mechanics behind the iterator protocol, it is easy to add\niterator behavior to your classes.  Define an ", "__iter__()", " method which\nreturns an object with a ", "__next__()", " method.  If the class\ndefines ", "__next__()", ", then ", "__iter__()", " can just return ", "self", ":"], "L2_Code": ["for", " ", "element", " ", "in", " ", "[", "1", ",", " ", "2", ",", " ", "3", "]:", "\n    ", "print", "(", "element", ")", "\n", "for", " ", "element", " ", "in", " ", "(", "1", ",", " ", "2", ",", " ", "3", "):", "\n    ", "print", "(", "element", ")", "\n", "for", " ", "key", " ", "in", " ", "{", "'one'", ":", "1", ",", " ", "'two'", ":", "2", "}:", "\n    ", "print", "(", "key", ")", "\n", "for", " ", "char", " ", "in", " ", "\"123\"", ":", "\n    ", "print", "(", "char", ")", "\n", "for", " ", "line", " ", "in", " ", "open", "(", "\"myfile.txt\"", "):", "\n    ", "print", "(", "line", ",", " ", "end", "=", "''", ")", "\n", "\n", ">>> ", "s", " ", "=", " ", "'abc'", "\n", ">>> ", "it", " ", "=", " ", "iter", "(", "s", ")", "\n", ">>> ", "it", "\n", "<iterator object at 0x00A1DB50>", "\n", ">>> ", "next", "(", "it", ")", "\n", "'a'", "\n", ">>> ", "next", "(", "it", ")", "\n", "'b'", "\n", ">>> ", "next", "(", "it", ")", "\n", "'c'", "\n", ">>> ", "next", "(", "it", ")", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "1", ", in ", "<module>", "\n    ", "next", "(", "it", ")", "\n", "StopIteration", "\n", "\n", "class", " ", "Reverse", ":", "\n    ", "\"\"\"Iterator for looping over a sequence backwards.\"\"\"", "\n    ", "def", " ", "__init__", "(", "self", ",", " ", "data", "):", "\n        ", "self", ".", "data", " ", "=", " ", "data", "\n        ", "self", ".", "index", " ", "=", " ", "len", "(", "data", ")", "\n\n    ", "def", " ", "__iter__", "(", "self", "):", "\n        ", "return", " ", "self", "\n\n    ", "def", " ", "__next__", "(", "self", "):", "\n        ", "if", " ", "self", ".", "index", " ", "==", " ", "0", ":", "\n            ", "raise", " ", "StopIteration", "\n        ", "self", ".", "index", " ", "=", " ", "self", ".", "index", " ", "-", " ", "1", "\n        ", "return", " ", "self", ".", "data", "[", "self", ".", "index", "]", "\n", "\n", ">>> ", "rev", " ", "=", " ", "Reverse", "(", "'spam'", ")", "\n", ">>> ", "iter", "(", "rev", ")", "\n", "<__main__.Reverse object at 0x00A1DB50>", "\n", ">>> ", "for", " ", "char", " ", "in", " ", "rev", ":", "\n", "... ", "    ", "print", "(", "char", ")", "\n", "...", "\n", "m", "\n", "a", "\n", "p", "\n", "s", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes", "M_Desc": ["Classes provide a means of bundling data and functionality together.  Creating\na new class creates a new ", "type", " of object, allowing new ", "instances", " of that\ntype to be made.  Each class instance can have attributes attached to it for\nmaintaining its state.  Class instances can also have methods (defined by its\nclass) for modifying its state.", "Compared with other programming languages, Python\u2019s class mechanism adds classes\nwith a minimum of new syntax and semantics.  It is a mixture of the class\nmechanisms found in C++ and Modula-3.  Python classes provide all the standard\nfeatures of Object Oriented Programming: the class inheritance mechanism allows\nmultiple base classes, a derived class can override any methods of its base\nclass or classes, and a method can call the method of a base class with the same\nname.  Objects can contain arbitrary amounts and kinds of data.  As is true for\nmodules, classes partake of the dynamic nature of Python: they are created at\nruntime, and can be modified further after creation.", "In C++ terminology, normally class members (including the data members) are\n", "public", " (except see below ", "Private Variables", "), and all member functions are\n", "virtual", ".  As in Modula-3, there are no shorthands for referencing the object\u2019s\nmembers from its methods: the method function is declared with an explicit first\nargument representing the object, which is provided implicitly by the call.  As\nin Smalltalk, classes themselves are objects.  This provides semantics for\nimporting and renaming.  Unlike C++ and Modula-3, built-in types can be used as\nbase classes for extension by the user.  Also, like in C++, most built-in\noperators with special syntax (arithmetic operators, subscripting etc.) can be\nredefined for class instances.", "(Lacking universally accepted terminology to talk about classes, I will make\noccasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since\nits object-oriented semantics are closer to those of Python than C++, but I\nexpect that few readers have heard of it.)"], "M_Code": [], "L2_Title": "9.9. Generators", "L2_Desc": ["Generator", "s are a simple and powerful tool for creating iterators.  They\nare written like regular functions but use the ", "yield", " statement\nwhenever they want to return data.  Each time ", "next()", " is called on it, the\ngenerator resumes where it left off (it remembers all the data values and which\nstatement was last executed).  An example shows that generators can be trivially\neasy to create:", "Anything that can be done with generators can also be done with class-based\niterators as described in the previous section.  What makes generators so\ncompact is that the ", "__iter__()", " and ", "__next__()", " methods\nare created automatically.", "Another key feature is that the local variables and execution state are\nautomatically saved between calls.  This made the function easier to write and\nmuch more clear than an approach using instance variables like ", "self.index", "\nand ", "self.data", ".", "In addition to automatic method creation and saving program state, when\ngenerators terminate, they automatically raise ", "StopIteration", ". In\ncombination, these features make it easy to create iterators with no more effort\nthan writing a regular function."], "L2_Code": ["def", " ", "reverse", "(", "data", "):", "\n    ", "for", " ", "index", " ", "in", " ", "range", "(", "len", "(", "data", ")", "-", "1", ",", " ", "-", "1", ",", " ", "-", "1", "):", "\n        ", "yield", " ", "data", "[", "index", "]", "\n", "\n", ">>> ", "for", " ", "char", " ", "in", " ", "reverse", "(", "'golf'", "):", "\n", "... ", "    ", "print", "(", "char", ")", "\n", "...", "\n", "f", "\n", "l", "\n", "o", "\n", "g", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/classes.html", "Language": "Python", "M_Title": "9. Classes", "M_Desc": ["Classes provide a means of bundling data and functionality together.  Creating\na new class creates a new ", "type", " of object, allowing new ", "instances", " of that\ntype to be made.  Each class instance can have attributes attached to it for\nmaintaining its state.  Class instances can also have methods (defined by its\nclass) for modifying its state.", "Compared with other programming languages, Python\u2019s class mechanism adds classes\nwith a minimum of new syntax and semantics.  It is a mixture of the class\nmechanisms found in C++ and Modula-3.  Python classes provide all the standard\nfeatures of Object Oriented Programming: the class inheritance mechanism allows\nmultiple base classes, a derived class can override any methods of its base\nclass or classes, and a method can call the method of a base class with the same\nname.  Objects can contain arbitrary amounts and kinds of data.  As is true for\nmodules, classes partake of the dynamic nature of Python: they are created at\nruntime, and can be modified further after creation.", "In C++ terminology, normally class members (including the data members) are\n", "public", " (except see below ", "Private Variables", "), and all member functions are\n", "virtual", ".  As in Modula-3, there are no shorthands for referencing the object\u2019s\nmembers from its methods: the method function is declared with an explicit first\nargument representing the object, which is provided implicitly by the call.  As\nin Smalltalk, classes themselves are objects.  This provides semantics for\nimporting and renaming.  Unlike C++ and Modula-3, built-in types can be used as\nbase classes for extension by the user.  Also, like in C++, most built-in\noperators with special syntax (arithmetic operators, subscripting etc.) can be\nredefined for class instances.", "(Lacking universally accepted terminology to talk about classes, I will make\noccasional use of Smalltalk and C++ terms.  I would use Modula-3 terms, since\nits object-oriented semantics are closer to those of Python than C++, but I\nexpect that few readers have heard of it.)"], "M_Code": [], "L2_Title": "9.10. Generator Expressions", "L2_Desc": ["Some simple generators can be coded succinctly as expressions using a syntax\nsimilar to list comprehensions but with parentheses instead of square brackets.\nThese expressions are designed for situations where the generator is used right\naway by an enclosing function.  Generator expressions are more compact but less\nversatile than full generator definitions and tend to be more memory friendly\nthan equivalent list comprehensions.", "Examples:", "Footnotes"], "L2_Code": [">>> ", "sum", "(", "i", "*", "i", " ", "for", " ", "i", " ", "in", " ", "range", "(", "10", "))", "                 ", "# sum of squares", "\n", "285", "\n\n", ">>> ", "xvec", " ", "=", " ", "[", "10", ",", " ", "20", ",", " ", "30", "]", "\n", ">>> ", "yvec", " ", "=", " ", "[", "7", ",", " ", "5", ",", " ", "3", "]", "\n", ">>> ", "sum", "(", "x", "*", "y", " ", "for", " ", "x", ",", "y", " ", "in", " ", "zip", "(", "xvec", ",", " ", "yvec", "))", "         ", "# dot product", "\n", "260", "\n\n", ">>> ", "from", " ", "math", " ", "import", " ", "pi", ",", " ", "sin", "\n", ">>> ", "sine_table", " ", "=", " ", "{", "x", ":", " ", "sin", "(", "x", "*", "pi", "/", "180", ")", " ", "for", " ", "x", " ", "in", " ", "range", "(", "0", ",", " ", "91", ")}", "\n\n", ">>> ", "unique_words", " ", "=", " ", "set", "(", "word", "  ", "for", " ", "line", " ", "in", " ", "page", "  ", "for", " ", "word", " ", "in", " ", "line", ".", "split", "())", "\n\n", ">>> ", "valedictorian", " ", "=", " ", "max", "((", "student", ".", "gpa", ",", " ", "student", ".", "name", ")", " ", "for", " ", "student", " ", "in", " ", "graduates", ")", "\n\n", ">>> ", "data", " ", "=", " ", "'golf'", "\n", ">>> ", "list", "(", "data", "[", "i", "]", " ", "for", " ", "i", " ", "in", " ", "range", "(", "len", "(", "data", ")", "-", "1", ",", " ", "-", "1", ",", " ", "-", "1", "))", "\n", "['f', 'l', 'o', 'g']", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools", "M_Desc": ["Besides the ", "while", " statement just introduced, Python knows the usual\ncontrol flow statements known from other languages, with some twists."], "M_Code": [], "L2_Title": "4.7. More on Defining Functions", "L2_Desc": ["It is also possible to define functions with a variable number of arguments.\nThere are three forms, which can be combined."], "L2_Code": [], "L3_Title": "4.7.3. Arbitrary Argument Lists", "L3_Desc": ["Finally, the least frequently used option is to specify that a function can be\ncalled with an arbitrary number of arguments.  These arguments will be wrapped\nup in a tuple (see ", "Tuples and Sequences", ").  Before the variable number of arguments,\nzero or more normal arguments may occur.", "Normally, these ", "variadic", " arguments will be last in the list of formal\nparameters, because they scoop up all remaining input arguments that are\npassed to the function. Any formal parameters which occur after the ", "*args", "\nparameter are \u2018keyword-only\u2019 arguments, meaning that they can only be used as\nkeywords rather than positional arguments."], "L3_Code": ["def", " ", "write_multiple_items", "(", "file", ",", " ", "separator", ",", " ", "*", "args", "):", "\n    ", "file", ".", "write", "(", "separator", ".", "join", "(", "args", "))", "\n", "\n", ">>> ", "def", " ", "concat", "(", "*", "args", ",", " ", "sep", "=", "\"/\"", "):", "\n", "... ", "    ", "return", " ", "sep", ".", "join", "(", "args", ")", "\n", "...", "\n", ">>> ", "concat", "(", "\"earth\"", ",", " ", "\"mars\"", ",", " ", "\"venus\"", ")", "\n", "'earth/mars/venus'", "\n", ">>> ", "concat", "(", "\"earth\"", ",", " ", "\"mars\"", ",", " ", "\"venus\"", ",", " ", "sep", "=", "\".\"", ")", "\n", "'earth.mars.venus'", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools", "M_Desc": ["Besides the ", "while", " statement just introduced, Python knows the usual\ncontrol flow statements known from other languages, with some twists."], "M_Code": [], "L2_Title": "4.7. More on Defining Functions", "L2_Desc": ["It is also possible to define functions with a variable number of arguments.\nThere are three forms, which can be combined."], "L2_Code": [], "L3_Title": "4.7.4. Unpacking Argument Lists", "L3_Desc": ["The reverse situation occurs when the arguments are already in a list or tuple\nbut need to be unpacked for a function call requiring separate positional\narguments.  For instance, the built-in ", "range()", " function expects separate\n", "start", " and ", "stop", " arguments.  If they are not available separately, write the\nfunction call with the  ", "*", "-operator to unpack the arguments out of a list\nor tuple:", "In the same fashion, dictionaries can deliver keyword arguments with the ", "**", "-operator:"], "L3_Code": [">>> ", "list", "(", "range", "(", "3", ",", " ", "6", "))", "            ", "# normal call with separate arguments", "\n", "[3, 4, 5]", "\n", ">>> ", "args", " ", "=", " ", "[", "3", ",", " ", "6", "]", "\n", ">>> ", "list", "(", "range", "(", "*", "args", "))", "            ", "# call with arguments unpacked from a list", "\n", "[3, 4, 5]", "\n", "\n", ">>> ", "def", " ", "parrot", "(", "voltage", ",", " ", "state", "=", "'a stiff'", ",", " ", "action", "=", "'voom'", "):", "\n", "... ", "    ", "print", "(", "\"-- This parrot wouldn't\"", ",", " ", "action", ",", " ", "end", "=", "' '", ")", "\n", "... ", "    ", "print", "(", "\"if you put\"", ",", " ", "voltage", ",", " ", "\"volts through it.\"", ",", " ", "end", "=", "' '", ")", "\n", "... ", "    ", "print", "(", "\"E's\"", ",", " ", "state", ",", " ", "\"!\"", ")", "\n", "...", "\n", ">>> ", "d", " ", "=", " ", "{", "\"voltage\"", ":", " ", "\"four million\"", ",", " ", "\"state\"", ":", " ", "\"bleedin' demised\"", ",", " ", "\"action\"", ":", " ", "\"VOOM\"", "}", "\n", ">>> ", "parrot", "(", "**", "d", ")", "\n", "-- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools", "M_Desc": ["Besides the ", "while", " statement just introduced, Python knows the usual\ncontrol flow statements known from other languages, with some twists."], "M_Code": [], "L2_Title": "4.7. More on Defining Functions", "L2_Desc": ["It is also possible to define functions with a variable number of arguments.\nThere are three forms, which can be combined."], "L2_Code": [], "L3_Title": "4.7.5. Lambda Expressions", "L3_Desc": ["Small anonymous functions can be created with the ", "lambda", " keyword.\nThis function returns the sum of its two arguments: ", "lambda", " ", "a,", " ", "b:", " ", "a+b", ".\nLambda functions can be used wherever function objects are required.  They are\nsyntactically restricted to a single expression.  Semantically, they are just\nsyntactic sugar for a normal function definition.  Like nested function\ndefinitions, lambda functions can reference variables from the containing\nscope:", "The above example uses a lambda expression to return a function.  Another use\nis to pass a small function as an argument:"], "L3_Code": [">>> ", "def", " ", "make_incrementor", "(", "n", "):", "\n", "... ", "    ", "return", " ", "lambda", " ", "x", ":", " ", "x", " ", "+", " ", "n", "\n", "...", "\n", ">>> ", "f", " ", "=", " ", "make_incrementor", "(", "42", ")", "\n", ">>> ", "f", "(", "0", ")", "\n", "42", "\n", ">>> ", "f", "(", "1", ")", "\n", "43", "\n", "\n", ">>> ", "pairs", " ", "=", " ", "[(", "1", ",", " ", "'one'", "),", " ", "(", "2", ",", " ", "'two'", "),", " ", "(", "3", ",", " ", "'three'", "),", " ", "(", "4", ",", " ", "'four'", ")]", "\n", ">>> ", "pairs", ".", "sort", "(", "key", "=", "lambda", " ", "pair", ":", " ", "pair", "[", "1", "])", "\n", ">>> ", "pairs", "\n", "[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools", "M_Desc": ["Besides the ", "while", " statement just introduced, Python knows the usual\ncontrol flow statements known from other languages, with some twists."], "M_Code": [], "L2_Title": "4.7. More on Defining Functions", "L2_Desc": ["It is also possible to define functions with a variable number of arguments.\nThere are three forms, which can be combined."], "L2_Code": [], "L3_Title": "4.7.6. Documentation Strings", "L3_Desc": ["Here are some conventions about the content and formatting of documentation\nstrings.", "The first line should always be a short, concise summary of the object\u2019s\npurpose.  For brevity, it should not explicitly state the object\u2019s name or type,\nsince these are available by other means (except if the name happens to be a\nverb describing a function\u2019s operation).  This line should begin with a capital\nletter and end with a period.", "If there are more lines in the documentation string, the second line should be\nblank, visually separating the summary from the rest of the description.  The\nfollowing lines should be one or more paragraphs describing the object\u2019s calling\nconventions, its side effects, etc.", "The Python parser does not strip indentation from multi-line string literals in\nPython, so tools that process documentation have to strip indentation if\ndesired.  This is done using the following convention. The first non-blank line\n", "after", " the first line of the string determines the amount of indentation for\nthe entire documentation string.  (We can\u2019t use the first line since it is\ngenerally adjacent to the string\u2019s opening quotes so its indentation is not\napparent in the string literal.)  Whitespace \u201cequivalent\u201d to this indentation is\nthen stripped from the start of all lines of the string.  Lines that are\nindented less should not occur, but if they occur all their leading whitespace\nshould be stripped.  Equivalence of whitespace should be tested after expansion\nof tabs (to 8 spaces, normally).", "Here is an example of a multi-line docstring:"], "L3_Code": [">>> ", "def", " ", "my_function", "():", "\n", "... ", "    ", "\"\"\"Do nothing, but document it.", "\n", "...", "\n", "... ", "    No, really, it doesn't do anything.", "\n", "... ", "    \"\"\"", "\n", "... ", "    ", "pass", "\n", "...", "\n", ">>> ", "print", "(", "my_function", ".", "__doc__", ")", "\n", "Do nothing, but document it.", "\n\n", "    No, really, it doesn't do anything.", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools", "M_Desc": ["Besides the ", "while", " statement just introduced, Python knows the usual\ncontrol flow statements known from other languages, with some twists."], "M_Code": [], "L2_Title": "4.7. More on Defining Functions", "L2_Desc": ["It is also possible to define functions with a variable number of arguments.\nThere are three forms, which can be combined."], "L2_Code": [], "L3_Title": "4.7.7. Function Annotations", "L3_Desc": ["Function annotations", " are completely optional metadata\ninformation about the types used by user-defined functions (see ", "PEP 3107", " and\n", "PEP 484", " for more information).", "Annotations are stored in the ", "__annotations__", " attribute of the function\nas a dictionary and have no effect on any other part of the function.  Parameter\nannotations are defined by a colon after the parameter name, followed by an\nexpression evaluating to the value of the annotation.  Return annotations are\ndefined by a literal ", "->", ", followed by an expression, between the parameter\nlist and the colon denoting the end of the ", "def", " statement.  The\nfollowing example has a positional argument, a keyword argument, and the return\nvalue annotated:"], "L3_Code": [">>> ", "def", " ", "f", "(", "ham", ":", " ", "str", ",", " ", "eggs", ":", " ", "str", " ", "=", " ", "'eggs'", ")", " ", "->", " ", "str", ":", "\n", "... ", "    ", "print", "(", "\"Annotations:\"", ",", " ", "f", ".", "__annotations__", ")", "\n", "... ", "    ", "print", "(", "\"Arguments:\"", ",", " ", "ham", ",", " ", "eggs", ")", "\n", "... ", "    ", "return", " ", "ham", " ", "+", " ", "' and '", " ", "+", " ", "eggs", "\n", "...", "\n", ">>> ", "f", "(", "'spam'", ")", "\n", "Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}", "\n", "Arguments: spam eggs", "\n", "'spam and eggs'", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/controlflow.html", "Language": "Python", "M_Title": "4. More Control Flow Tools", "M_Desc": ["Besides the ", "while", " statement just introduced, Python knows the usual\ncontrol flow statements known from other languages, with some twists."], "M_Code": [], "L2_Title": "4.8. Intermezzo: Coding Style", "L2_Desc": ["Now that you are about to write longer, more complex pieces of Python, it is a\ngood time to talk about ", "coding style", ".  Most languages can be written (or more\nconcise, ", "formatted", ") in different styles; some are more readable than others.\nMaking it easy for others to read your code is always a good idea, and adopting\na nice coding style helps tremendously for that.", "For Python, ", "PEP 8", " has emerged as the style guide that most projects adhere to;\nit promotes a very readable and eye-pleasing coding style.  Every Python\ndeveloper should read it at some point; here are the most important points\nextracted for you:", "Footnotes"], "L2_Code": [], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/appetite.html", "Language": "Python", "M_Title": "1. Whetting Your Appetite", "M_Desc": ["If you do much work on computers, eventually you find that there\u2019s some task\nyou\u2019d like to automate.  For example, you may wish to perform a\nsearch-and-replace over a large number of text files, or rename and rearrange a\nbunch of photo files in a complicated way. Perhaps you\u2019d like to write a small\ncustom database, or a specialized GUI application, or a simple game.", "If you\u2019re a professional software developer, you may have to work with several\nC/C++/Java libraries but find the usual write/compile/test/re-compile cycle is\ntoo slow.  Perhaps you\u2019re writing a test suite for such a library and find\nwriting the testing code a tedious task.  Or maybe you\u2019ve written a program that\ncould use an extension language, and you don\u2019t want to design and implement a\nwhole new language for your application.", "Python is just the language for you.", "You could write a Unix shell script or Windows batch files for some of these\ntasks, but shell scripts are best at moving around files and changing text data,\nnot well-suited for GUI applications or games. You could write a C/C++/Java\nprogram, but it can take a lot of development time to get even a first-draft\nprogram.  Python is simpler to use, available on Windows, Mac OS X, and Unix\noperating systems, and will help you get the job done more quickly.", "Python is simple to use, but it is a real programming language, offering much\nmore structure and support for large programs than shell scripts or batch files\ncan offer.  On the other hand, Python also offers much more error checking than\nC, and, being a ", "very-high-level language", ", it has high-level data types built\nin, such as flexible arrays and dictionaries.  Because of its more general data\ntypes Python is applicable to a much larger problem domain than Awk or even\nPerl, yet many things are at least as easy in Python as in those languages.", "Python allows you to split your program into modules that can be reused in other\nPython programs.  It comes with a large collection of standard modules that you\ncan use as the basis of your programs \u2014 or as examples to start learning to\nprogram in Python.  Some of these modules provide things like file I/O, system\ncalls, sockets, and even interfaces to graphical user interface toolkits like\nTk.", "Python is an interpreted language, which can save you considerable time during\nprogram development because no compilation and linking is necessary.  The\ninterpreter can be used interactively, which makes it easy to experiment with\nfeatures of the language, to write throw-away programs, or to test functions\nduring bottom-up program development. It is also a handy desk calculator.", "Python enables programs to be written compactly and readably.  Programs written\nin Python are typically much shorter than equivalent C,  C++, or Java programs,\nfor several reasons:", "Python is ", "extensible", ": if you know how to program in C it is easy to add a new\nbuilt-in function or module to the interpreter, either to perform critical\noperations at maximum speed, or to link Python programs to libraries that may\nonly be available in binary form (such as a vendor-specific graphics library).\nOnce you are really hooked, you can link the Python interpreter into an\napplication written in C and use it as an extension or command language for that\napplication.", "By the way, the language is named after the BBC show \u201cMonty Python\u2019s Flying\nCircus\u201d and has nothing to do with reptiles.  Making references to Monty\nPython skits in documentation is not only allowed, it is encouraged!", "Now that you are all excited about Python, you\u2019ll want to examine it in some\nmore detail.  Since the best way to learn a language is to use it, the tutorial\ninvites you to play with the Python interpreter as you read.", "In the next chapter, the mechanics of using the interpreter are explained.  This\nis rather mundane information, but essential for trying out the examples shown\nlater.", "The rest of the tutorial introduces various features of the Python language and\nsystem through examples, beginning with simple expressions, statements and data\ntypes, through functions and modules, and finally touching upon advanced\nconcepts like exceptions and user-defined classes."], "M_Code": [], "L2_Title": "", "L2_Desc": [], "L2_Code": [], "L3_Title": "", "L3_Desc": [], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/interpreter.html", "Language": "Python", "M_Title": "2. Using the Python Interpreter", "M_Desc": [], "M_Code": [], "L2_Title": "2.1. Invoking the Interpreter", "L2_Desc": ["The Python interpreter is usually installed as ", "/usr/local/bin/python3.7", "\non those machines where it is available; putting ", "/usr/local/bin", " in your\nUnix shell\u2019s search path makes it possible to start it by typing the command:", "to the shell. ", "[1]", " Since the choice of the directory where the interpreter lives\nis an installation option, other places are possible; check with your local\nPython guru or system administrator.  (E.g., ", "/usr/local/python", " is a\npopular alternative location.)", "On Windows machines, the Python installation is usually placed in\n", "C:\\Python36", ", though you can change this when you\u2019re running the\ninstaller.  To add this directory to your path,  you can type the following\ncommand into the command prompt in a DOS box:", "Typing an end-of-file character (", "Control-D", " on Unix, ", "Control-Z", " on\nWindows) at the primary prompt causes the interpreter to exit with a zero exit\nstatus.  If that doesn\u2019t work, you can exit the interpreter by typing the\nfollowing command: ", "quit()", ".", "The interpreter\u2019s line-editing features include interactive editing, history\nsubstitution and code completion on systems that support readline.  Perhaps the\nquickest check to see whether command line editing is supported is typing\n", "Control-P", " to the first Python prompt you get.  If it beeps, you have command\nline editing; see Appendix ", "Interactive Input Editing and History Substitution", " for an introduction to the\nkeys.  If nothing appears to happen, or if ", "^P", " is echoed, command line\nediting isn\u2019t available; you\u2019ll only be able to use backspace to remove\ncharacters from the current line.", "The interpreter operates somewhat like the Unix shell: when called with standard\ninput connected to a tty device, it reads and executes commands interactively;\nwhen called with a file name argument or with a file as standard input, it reads\nand executes a ", "script", " from that file.", "A second way of starting the interpreter is ", "python", " ", "-c", " ", "command", " ", "[arg]", " ", "...", ",\nwhich executes the statement(s) in ", "command", ", analogous to the shell\u2019s\n", "-c", " option.  Since Python statements often contain spaces or other\ncharacters that are special to the shell, it is usually advised to quote\n", "command", " in its entirety with single quotes.", "Some Python modules are also useful as scripts.  These can be invoked using\n", "python", " ", "-m", " ", "module", " ", "[arg]", " ", "...", ", which executes the source file for ", "module", " as\nif you had spelled out its full name on the command line.", "When a script file is used, it is sometimes useful to be able to run the script\nand enter interactive mode afterwards.  This can be done by passing ", "-i", "\nbefore the script.", "All command line options are described in ", "Command line and environment", "."], "L2_Code": ["set", " ", "path", "=%", "path", "%", ";", "C", ":", "\\", "python36", "\n", "\n"], "L3_Title": "2.1.1. Argument Passing", "L3_Desc": ["When known to the interpreter, the script name and additional arguments\nthereafter are turned into a list of strings and assigned to the ", "argv", "\nvariable in the ", "sys", " module.  You can access this list by executing ", "import", "\n", "sys", ".  The length of the list is at least one; when no script and no arguments\nare given, ", "sys.argv[0]", " is an empty string.  When the script name is given as\n", "'-'", " (meaning  standard input), ", "sys.argv[0]", " is set to ", "'-'", ".  When\n", "-c", " ", "command", " is used, ", "sys.argv[0]", " is set to ", "'-c'", ".  When\n", "-m", " ", "module", " is used, ", "sys.argv[0]", "  is set to the full name of the\nlocated module.  Options found after  ", "-c", " ", "command", " or ", "-m", "\n", "module", " are not consumed  by the Python interpreter\u2019s option processing but\nleft in ", "sys.argv", " for  the command or module to handle."], "L3_Code": []},
{"URL": "https://docs.python.org/3/tutorial/interpreter.html", "Language": "Python", "M_Title": "2. Using the Python Interpreter", "M_Desc": [], "M_Code": [], "L2_Title": "2.1. Invoking the Interpreter", "L2_Desc": ["The Python interpreter is usually installed as ", "/usr/local/bin/python3.7", "\non those machines where it is available; putting ", "/usr/local/bin", " in your\nUnix shell\u2019s search path makes it possible to start it by typing the command:", "to the shell. ", "[1]", " Since the choice of the directory where the interpreter lives\nis an installation option, other places are possible; check with your local\nPython guru or system administrator.  (E.g., ", "/usr/local/python", " is a\npopular alternative location.)", "On Windows machines, the Python installation is usually placed in\n", "C:\\Python36", ", though you can change this when you\u2019re running the\ninstaller.  To add this directory to your path,  you can type the following\ncommand into the command prompt in a DOS box:", "Typing an end-of-file character (", "Control-D", " on Unix, ", "Control-Z", " on\nWindows) at the primary prompt causes the interpreter to exit with a zero exit\nstatus.  If that doesn\u2019t work, you can exit the interpreter by typing the\nfollowing command: ", "quit()", ".", "The interpreter\u2019s line-editing features include interactive editing, history\nsubstitution and code completion on systems that support readline.  Perhaps the\nquickest check to see whether command line editing is supported is typing\n", "Control-P", " to the first Python prompt you get.  If it beeps, you have command\nline editing; see Appendix ", "Interactive Input Editing and History Substitution", " for an introduction to the\nkeys.  If nothing appears to happen, or if ", "^P", " is echoed, command line\nediting isn\u2019t available; you\u2019ll only be able to use backspace to remove\ncharacters from the current line.", "The interpreter operates somewhat like the Unix shell: when called with standard\ninput connected to a tty device, it reads and executes commands interactively;\nwhen called with a file name argument or with a file as standard input, it reads\nand executes a ", "script", " from that file.", "A second way of starting the interpreter is ", "python", " ", "-c", " ", "command", " ", "[arg]", " ", "...", ",\nwhich executes the statement(s) in ", "command", ", analogous to the shell\u2019s\n", "-c", " option.  Since Python statements often contain spaces or other\ncharacters that are special to the shell, it is usually advised to quote\n", "command", " in its entirety with single quotes.", "Some Python modules are also useful as scripts.  These can be invoked using\n", "python", " ", "-m", " ", "module", " ", "[arg]", " ", "...", ", which executes the source file for ", "module", " as\nif you had spelled out its full name on the command line.", "When a script file is used, it is sometimes useful to be able to run the script\nand enter interactive mode afterwards.  This can be done by passing ", "-i", "\nbefore the script.", "All command line options are described in ", "Command line and environment", "."], "L2_Code": ["set", " ", "path", "=%", "path", "%", ";", "C", ":", "\\", "python36", "\n", "\n"], "L3_Title": "2.1.2. Interactive Mode", "L3_Desc": ["When commands are read from a tty, the interpreter is said to be in ", "interactive\nmode", ".  In this mode it prompts for the next command with the ", "primary prompt", ",\nusually three greater-than signs (", ">>>", "); for continuation lines it prompts\nwith the ", "secondary prompt", ", by default three dots (", "...", "). The interpreter\nprints a welcome message stating its version number and a copyright notice\nbefore printing the first prompt:", "Continuation lines are needed when entering a multi-line construct. As an\nexample, take a look at this ", "if", " statement:", "For more on interactive mode, see ", "Interactive Mode", "."], "L3_Code": [">>> ", "the_world_is_flat", " ", "=", " ", "True", "\n", ">>> ", "if", " ", "the_world_is_flat", ":", "\n", "... ", "    ", "print", "(", "\"Be careful not to fall off!\"", ")", "\n", "...", "\n", "Be careful not to fall off!", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/interpreter.html", "Language": "Python", "M_Title": "2. Using the Python Interpreter", "M_Desc": [], "M_Code": [], "L2_Title": "2.2. The Interpreter and Its Environment", "L2_Desc": [], "L2_Code": [], "L3_Title": "2.2.1. Source Code Encoding", "L3_Desc": ["By default, Python source files are treated as encoded in UTF-8.  In that\nencoding, characters of most languages in the world can be used simultaneously\nin string literals, identifiers and comments \u2014 although the standard library\nonly uses ASCII characters for identifiers, a convention that any portable code\nshould follow.  To display all these characters properly, your editor must\nrecognize that the file is UTF-8, and it must use a font that supports all the\ncharacters in the file.", "To declare an encoding other than the default one, a special comment line\nshould be added as the ", "first", " line of the file.  The syntax is as follows:", "where ", "encoding", " is one of the valid ", "codecs", " supported by Python.", "For example, to declare that Windows-1252 encoding is to be used, the first\nline of your source code file should be:", "One exception to the ", "first line", " rule is when the source code starts with a\n", "UNIX \u201cshebang\u201d line", ".  In this case, the encoding\ndeclaration should be added as the second line of the file.  For example:", "Footnotes"], "L3_Code": ["# -*- coding: encoding -*-", "\n", "\n", "# -*- coding: cp1252 -*-", "\n", "\n", "#!/usr/bin/env python3", "\n", "# -*- coding: cp1252 -*-", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/introduction.html", "Language": "Python", "M_Title": "3. An Informal Introduction to Python", "M_Desc": ["In the following examples, input and output are distinguished by the presence or\nabsence of prompts (", ">>>", " and ", "\u2026", "): to repeat the example, you must type\neverything after the prompt, when the prompt appears; lines that do not begin\nwith a prompt are output from the interpreter. Note that a secondary prompt on a\nline by itself in an example means you must type a blank line; this is used to\nend a multi-line command.", "Many of the examples in this manual, even those entered at the interactive\nprompt, include comments.  Comments in Python start with the hash character,\n", "#", ", and extend to the end of the physical line.  A comment may appear at the\nstart of a line or following whitespace or code, but not within a string\nliteral.  A hash character within a string literal is just a hash character.\nSince comments are to clarify code and are not interpreted by Python, they may\nbe omitted when typing in examples.", "Some examples:"], "M_Code": ["# this is the first comment", "\n", "spam", " ", "=", " ", "1", "  ", "# and this is the second comment", "\n          ", "# ... and now a third!", "\n", "text", " ", "=", " ", "\"# This is not a comment because it's inside quotes.\"", "\n", "\n"], "L2_Title": "3.1. Using Python as a Calculator", "L2_Desc": ["Let\u2019s try some simple Python commands.  Start the interpreter and wait for the\nprimary prompt, ", ">>>", ".  (It shouldn\u2019t take long.)"], "L2_Code": [], "L3_Title": "3.1.1. Numbers", "L3_Desc": ["The interpreter acts as a simple calculator: you can type an expression at it\nand it will write the value.  Expression syntax is straightforward: the\noperators ", "+", ", ", "-", ", ", "*", " and ", "/", " work just like in most other languages\n(for example, Pascal or C); parentheses (", "()", ") can be used for grouping.\nFor example:", "The integer numbers (e.g. ", "2", ", ", "4", ", ", "20", ") have type ", "int", ",\nthe ones with a fractional part (e.g. ", "5.0", ", ", "1.6", ") have type\n", "float", ".  We will see more about numeric types later in the tutorial.", "Division (", "/", ") always returns a float.  To do ", "floor division", " and\nget an integer result (discarding any fractional result) you can use the ", "//", "\noperator; to calculate the remainder you can use ", "%", ":", "With Python, it is possible to use the ", "**", " operator to calculate powers ", "[1]", ":", "The equal sign (", "=", ") is used to assign a value to a variable. Afterwards, no\nresult is displayed before the next interactive prompt:", "If a variable is not \u201cdefined\u201d (assigned a value), trying to use it will\ngive you an error:", "There is full support for floating point; operators with mixed type operands\nconvert the integer operand to floating point:", "In interactive mode, the last printed expression is assigned to the variable\n", "_", ".  This means that when you are using Python as a desk calculator, it is\nsomewhat easier to continue calculations, for example:", "This variable should be treated as read-only by the user.  Don\u2019t explicitly\nassign a value to it \u2014 you would create an independent local variable with the\nsame name masking the built-in variable with its magic behavior.", "In addition to ", "int", " and ", "float", ", Python supports other types of\nnumbers, such as ", "Decimal", " and ", "Fraction", ".\nPython also has built-in support for ", "complex numbers", ",\nand uses the ", "j", " or ", "J", " suffix to indicate the imaginary part\n(e.g. ", "3+5j", ")."], "L3_Code": [">>> ", "2", " ", "+", " ", "2", "\n", "4", "\n", ">>> ", "50", " ", "-", " ", "5", "*", "6", "\n", "20", "\n", ">>> ", "(", "50", " ", "-", " ", "5", "*", "6", ")", " ", "/", " ", "4", "\n", "5.0", "\n", ">>> ", "8", " ", "/", " ", "5", "  ", "# division always returns a floating point number", "\n", "1.6", "\n", "\n", ">>> ", "17", " ", "/", " ", "3", "  ", "# classic division returns a float", "\n", "5.666666666666667", "\n", ">>>", "\n", ">>> ", "17", " ", "//", " ", "3", "  ", "# floor division discards the fractional part", "\n", "5", "\n", ">>> ", "17", " ", "%", " ", "3", "  ", "# the % operator returns the remainder of the division", "\n", "2", "\n", ">>> ", "5", " ", "*", " ", "3", " ", "+", " ", "2", "  ", "# result * divisor + remainder", "\n", "17", "\n", "\n", ">>> ", "5", " ", "**", " ", "2", "  ", "# 5 squared", "\n", "25", "\n", ">>> ", "2", " ", "**", " ", "7", "  ", "# 2 to the power of 7", "\n", "128", "\n", "\n", ">>> ", "width", " ", "=", " ", "20", "\n", ">>> ", "height", " ", "=", " ", "5", " ", "*", " ", "9", "\n", ">>> ", "width", " ", "*", " ", "height", "\n", "900", "\n", "\n", ">>> ", "n", "  ", "# try to access an undefined variable", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "1", ", in ", "<module>", "\n", "NameError", ": ", "name 'n' is not defined", "\n", "\n", ">>> ", "4", " ", "*", " ", "3.75", " ", "-", " ", "1", "\n", "14.0", "\n", "\n", ">>> ", "tax", " ", "=", " ", "12.5", " ", "/", " ", "100", "\n", ">>> ", "price", " ", "=", " ", "100.50", "\n", ">>> ", "price", " ", "*", " ", "tax", "\n", "12.5625", "\n", ">>> ", "price", " ", "+", " ", "_", "\n", "113.0625", "\n", ">>> ", "round", "(", "_", ",", " ", "2", ")", "\n", "113.06", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/introduction.html", "Language": "Python", "M_Title": "3. An Informal Introduction to Python", "M_Desc": ["In the following examples, input and output are distinguished by the presence or\nabsence of prompts (", ">>>", " and ", "\u2026", "): to repeat the example, you must type\neverything after the prompt, when the prompt appears; lines that do not begin\nwith a prompt are output from the interpreter. Note that a secondary prompt on a\nline by itself in an example means you must type a blank line; this is used to\nend a multi-line command.", "Many of the examples in this manual, even those entered at the interactive\nprompt, include comments.  Comments in Python start with the hash character,\n", "#", ", and extend to the end of the physical line.  A comment may appear at the\nstart of a line or following whitespace or code, but not within a string\nliteral.  A hash character within a string literal is just a hash character.\nSince comments are to clarify code and are not interpreted by Python, they may\nbe omitted when typing in examples.", "Some examples:"], "M_Code": ["# this is the first comment", "\n", "spam", " ", "=", " ", "1", "  ", "# and this is the second comment", "\n          ", "# ... and now a third!", "\n", "text", " ", "=", " ", "\"# This is not a comment because it's inside quotes.\"", "\n", "\n"], "L2_Title": "3.1. Using Python as a Calculator", "L2_Desc": ["Let\u2019s try some simple Python commands.  Start the interpreter and wait for the\nprimary prompt, ", ">>>", ".  (It shouldn\u2019t take long.)"], "L2_Code": [], "L3_Title": "3.1.2. Strings", "L3_Desc": ["Besides numbers, Python can also manipulate strings, which can be expressed\nin several ways.  They can be enclosed in single quotes (", "'...'", ") or\ndouble quotes (", "\"...\"", ") with the same result ", "[2]", ".  ", "\\", " can be used\nto escape quotes:", "In the interactive interpreter, the output string is enclosed in quotes and\nspecial characters are escaped with backslashes.  While this might sometimes\nlook different from the input (the enclosing quotes could change), the two\nstrings are equivalent.  The string is enclosed in double quotes if\nthe string contains a single quote and no double quotes, otherwise it is\nenclosed in single quotes.  The ", "print()", " function produces a more\nreadable output, by omitting the enclosing quotes and by printing escaped\nand special characters:", "If you don\u2019t want characters prefaced by ", "\\", " to be interpreted as\nspecial characters, you can use ", "raw strings", " by adding an ", "r", " before\nthe first quote:", "String literals can span multiple lines.  One way is using triple-quotes:\n", "\"\"\"...\"\"\"", " or ", "'''...'''", ".  End of lines are automatically\nincluded in the string, but it\u2019s possible to prevent this by adding a ", "\\", " at\nthe end of the line.  The following example:", "produces the following output (note that the initial newline is not included):", "Strings can be concatenated (glued together) with the ", "+", " operator, and\nrepeated with ", "*", ":", "Two or more ", "string literals", " (i.e. the ones enclosed between quotes) next\nto each other are automatically concatenated.", "This feature is particularly useful when you want to break long strings:", "This only works with two literals though, not with variables or expressions:", "If you want to concatenate variables or a variable and a literal, use ", "+", ":", "Strings can be ", "indexed", " (subscripted), with the first character having index 0.\nThere is no separate character type; a character is simply a string of size\none:", "Indices may also be negative numbers, to start counting from the right:", "Note that since -0 is the same as 0, negative indices start from -1.", "In addition to indexing, ", "slicing", " is also supported.  While indexing is used\nto obtain individual characters, ", "slicing", " allows you to obtain substring:", "Note how the start is always included, and the end always excluded.  This\nmakes sure that ", "s[:i]", " ", "+", " ", "s[i:]", " is always equal to ", "s", ":", "Slice indices have useful defaults; an omitted first index defaults to zero, an\nomitted second index defaults to the size of the string being sliced.", "One way to remember how slices work is to think of the indices as pointing\n", "between", " characters, with the left edge of the first character numbered 0.\nThen the right edge of the last character of a string of ", "n", " characters has\nindex ", "n", ", for example:", "The first row of numbers gives the position of the indices 0\u20266 in the string;\nthe second row gives the corresponding negative indices. The slice from ", "i", " to\n", "j", " consists of all characters between the edges labeled ", "i", " and ", "j", ",\nrespectively.", "For non-negative indices, the length of a slice is the difference of the\nindices, if both are within bounds.  For example, the length of ", "word[1:3]", " is\n2.", "Attempting to use an index that is too large will result in an error:", "However, out of range slice indexes are handled gracefully when used for\nslicing:", "Python strings cannot be changed \u2014 they are ", "immutable", ".\nTherefore, assigning to an indexed position in the string results in an error:", "If you need a different string, you should create a new one:", "The built-in function ", "len()", " returns the length of a string:"], "L3_Code": [">>> ", "'spam eggs'", "  ", "# single quotes", "\n", "'spam eggs'", "\n", ">>> ", "'doesn", "\\'", "t'", "  ", "# use \\' to escape the single quote...", "\n", "\"doesn't\"", "\n", ">>> ", "\"doesn't\"", "  ", "# ...or use double quotes instead", "\n", "\"doesn't\"", "\n", ">>> ", "'\"Yes,\" they said.'", "\n", "'\"Yes,\" they said.'", "\n", ">>> ", "\"", "\\\"", "Yes,", "\\\"", " they said.\"", "\n", "'\"Yes,\" they said.'", "\n", ">>> ", "'\"Isn", "\\'", "t,\" they said.'", "\n", "'\"Isn\\'t,\" they said.'", "\n", "\n", ">>> ", "'\"Isn", "\\'", "t,\" they said.'", "\n", "'\"Isn\\'t,\" they said.'", "\n", ">>> ", "print", "(", "'\"Isn", "\\'", "t,\" they said.'", ")", "\n", "\"Isn't,\" they said.", "\n", ">>> ", "s", " ", "=", " ", "'First line.", "\\n", "Second line.'", "  ", "# \\n means newline", "\n", ">>> ", "s", "  ", "# without print(), \\n is included in the output", "\n", "'First line.\\nSecond line.'", "\n", ">>> ", "print", "(", "s", ")", "  ", "# with print(), \\n produces a new line", "\n", "First line.", "\n", "Second line.", "\n", "\n", ">>> ", "print", "(", "'C:\\some", "\\n", "ame'", ")", "  ", "# here \\n means newline!", "\n", "C:\\some", "\n", "ame", "\n", ">>> ", "print", "(", "r", "'C:\\some\\name'", ")", "  ", "# note the r before the quote", "\n", "C:\\some\\name", "\n", "\n", "print", "(", "\"\"\"", "\\", "\n", "Usage: thingy [OPTIONS]", "\n", "     -h                        Display this usage message", "\n", "     -H hostname               Hostname to connect to", "\n", "\"\"\"", ")", "\n", "\n", ">>> ", "# 3 times 'un', followed by 'ium'", "\n", ">>> ", "3", " ", "*", " ", "'un'", " ", "+", " ", "'ium'", "\n", "'unununium'", "\n", "\n", ">>> ", "'Py'", " ", "'thon'", "\n", "'Python'", "\n", "\n", ">>> ", "text", " ", "=", " ", "(", "'Put several strings within parentheses '", "\n", "... ", "        ", "'to have them joined together.'", ")", "\n", ">>> ", "text", "\n", "'Put several strings within parentheses to have them joined together.'", "\n", "\n", ">>> ", "prefix", " ", "=", " ", "'Py'", "\n", ">>> ", "prefix", " ", "'thon'", "  ", "# can't concatenate a variable and a string literal", "\n  File ", "\"<stdin>\"", ", line ", "1", "\n    ", "prefix", " ", "'thon'", "\n                ", "^", "\n", "SyntaxError", ": ", "invalid syntax", "\n", ">>> ", "(", "'un'", " ", "*", " ", "3", ")", " ", "'ium'", "\n  File ", "\"<stdin>\"", ", line ", "1", "\n    ", "(", "'un'", " ", "*", " ", "3", ")", " ", "'ium'", "\n                   ", "^", "\n", "SyntaxError", ": ", "invalid syntax", "\n", "\n", ">>> ", "prefix", " ", "+", " ", "'thon'", "\n", "'Python'", "\n", "\n", ">>> ", "word", " ", "=", " ", "'Python'", "\n", ">>> ", "word", "[", "0", "]", "  ", "# character in position 0", "\n", "'P'", "\n", ">>> ", "word", "[", "5", "]", "  ", "# character in position 5", "\n", "'n'", "\n", "\n", ">>> ", "word", "[", "-", "1", "]", "  ", "# last character", "\n", "'n'", "\n", ">>> ", "word", "[", "-", "2", "]", "  ", "# second-last character", "\n", "'o'", "\n", ">>> ", "word", "[", "-", "6", "]", "\n", "'P'", "\n", "\n", ">>> ", "word", "[", "0", ":", "2", "]", "  ", "# characters from position 0 (included) to 2 (excluded)", "\n", "'Py'", "\n", ">>> ", "word", "[", "2", ":", "5", "]", "  ", "# characters from position 2 (included) to 5 (excluded)", "\n", "'tho'", "\n", "\n", ">>> ", "word", "[:", "2", "]", " ", "+", " ", "word", "[", "2", ":]", "\n", "'Python'", "\n", ">>> ", "word", "[:", "4", "]", " ", "+", " ", "word", "[", "4", ":]", "\n", "'Python'", "\n", "\n", ">>> ", "word", "[:", "2", "]", "   ", "# character from the beginning to position 2 (excluded)", "\n", "'Py'", "\n", ">>> ", "word", "[", "4", ":]", "   ", "# characters from position 4 (included) to the end", "\n", "'on'", "\n", ">>> ", "word", "[", "-", "2", ":]", "  ", "# characters from the second-last (included) to the end", "\n", "'on'", "\n", "\n", " ", "+---+---+---+---+---+---+", "\n ", "|", " ", "P", " ", "|", " ", "y", " ", "|", " ", "t", " ", "|", " ", "h", " ", "|", " ", "o", " ", "|", " ", "n", " ", "|", "\n ", "+---+---+---+---+---+---+", "\n ", "0", "   ", "1", "   ", "2", "   ", "3", "   ", "4", "   ", "5", "   ", "6", "\n", "-", "6", "  ", "-", "5", "  ", "-", "4", "  ", "-", "3", "  ", "-", "2", "  ", "-", "1", "\n", "\n", ">>> ", "word", "[", "42", "]", "  ", "# the word only has 6 characters", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "1", ", in ", "<module>", "\n", "IndexError", ": ", "string index out of range", "\n", "\n", ">>> ", "word", "[", "4", ":", "42", "]", "\n", "'on'", "\n", ">>> ", "word", "[", "42", ":]", "\n", "''", "\n", "\n", ">>> ", "word", "[", "0", "]", " ", "=", " ", "'J'", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "1", ", in ", "<module>", "\n", "TypeError", ": ", "'str' object does not support item assignment", "\n", ">>> ", "word", "[", "2", ":]", " ", "=", " ", "'py'", "\n", "Traceback (most recent call last):", "\n  File ", "\"<stdin>\"", ", line ", "1", ", in ", "<module>", "\n", "TypeError", ": ", "'str' object does not support item assignment", "\n", "\n", ">>> ", "'J'", " ", "+", " ", "word", "[", "1", ":]", "\n", "'Jython'", "\n", ">>> ", "word", "[:", "2", "]", " ", "+", " ", "'py'", "\n", "'Pypy'", "\n", "\n", ">>> ", "s", " ", "=", " ", "'supercalifragilisticexpialidocious'", "\n", ">>> ", "len", "(", "s", ")", "\n", "34", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/introduction.html", "Language": "Python", "M_Title": "3. An Informal Introduction to Python", "M_Desc": ["In the following examples, input and output are distinguished by the presence or\nabsence of prompts (", ">>>", " and ", "\u2026", "): to repeat the example, you must type\neverything after the prompt, when the prompt appears; lines that do not begin\nwith a prompt are output from the interpreter. Note that a secondary prompt on a\nline by itself in an example means you must type a blank line; this is used to\nend a multi-line command.", "Many of the examples in this manual, even those entered at the interactive\nprompt, include comments.  Comments in Python start with the hash character,\n", "#", ", and extend to the end of the physical line.  A comment may appear at the\nstart of a line or following whitespace or code, but not within a string\nliteral.  A hash character within a string literal is just a hash character.\nSince comments are to clarify code and are not interpreted by Python, they may\nbe omitted when typing in examples.", "Some examples:"], "M_Code": ["# this is the first comment", "\n", "spam", " ", "=", " ", "1", "  ", "# and this is the second comment", "\n          ", "# ... and now a third!", "\n", "text", " ", "=", " ", "\"# This is not a comment because it's inside quotes.\"", "\n", "\n"], "L2_Title": "3.1. Using Python as a Calculator", "L2_Desc": ["Let\u2019s try some simple Python commands.  Start the interpreter and wait for the\nprimary prompt, ", ">>>", ".  (It shouldn\u2019t take long.)"], "L2_Code": [], "L3_Title": "3.1.3. Lists", "L3_Desc": ["Python knows a number of ", "compound", " data types, used to group together other\nvalues.  The most versatile is the ", "list", ", which can be written as a list of\ncomma-separated values (items) between square brackets.  Lists might contain\nitems of different types, but usually the items all have the same type.", "Like strings (and all other built-in ", "sequence", " type), lists can be\nindexed and sliced:", "All slice operations return a new list containing the requested elements.  This\nmeans that the following slice returns a new (shallow) copy of the list:", "Lists also support operations like concatenation:", "Unlike strings, which are ", "immutable", ", lists are a ", "mutable", "\ntype, i.e. it is possible to change their content:", "You can also add new items at the end of the list, by using\nthe ", "append()", " ", "method", " (we will see more about methods later):", "Assignment to slices is also possible, and this can even change the size of the\nlist or clear it entirely:", "The built-in function ", "len()", " also applies to lists:", "It is possible to nest lists (create lists containing other lists), for\nexample:"], "L3_Code": [">>> ", "squares", " ", "=", " ", "[", "1", ",", " ", "4", ",", " ", "9", ",", " ", "16", ",", " ", "25", "]", "\n", ">>> ", "squares", "\n", "[1, 4, 9, 16, 25]", "\n", "\n", ">>> ", "squares", "[", "0", "]", "  ", "# indexing returns the item", "\n", "1", "\n", ">>> ", "squares", "[", "-", "1", "]", "\n", "25", "\n", ">>> ", "squares", "[", "-", "3", ":]", "  ", "# slicing returns a new list", "\n", "[9, 16, 25]", "\n", "\n", ">>> ", "squares", "[:]", "\n", "[1, 4, 9, 16, 25]", "\n", "\n", ">>> ", "squares", " ", "+", " ", "[", "36", ",", " ", "49", ",", " ", "64", ",", " ", "81", ",", " ", "100", "]", "\n", "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "\n", "\n", ">>> ", "cubes", " ", "=", " ", "[", "1", ",", " ", "8", ",", " ", "27", ",", " ", "65", ",", " ", "125", "]", "  ", "# something's wrong here", "\n", ">>> ", "4", " ", "**", " ", "3", "  ", "# the cube of 4 is 64, not 65!", "\n", "64", "\n", ">>> ", "cubes", "[", "3", "]", " ", "=", " ", "64", "  ", "# replace the wrong value", "\n", ">>> ", "cubes", "\n", "[1, 8, 27, 64, 125]", "\n", "\n", ">>> ", "cubes", ".", "append", "(", "216", ")", "  ", "# add the cube of 6", "\n", ">>> ", "cubes", ".", "append", "(", "7", " ", "**", " ", "3", ")", "  ", "# and the cube of 7", "\n", ">>> ", "cubes", "\n", "[1, 8, 27, 64, 125, 216, 343]", "\n", "\n", ">>> ", "letters", " ", "=", " ", "[", "'a'", ",", " ", "'b'", ",", " ", "'c'", ",", " ", "'d'", ",", " ", "'e'", ",", " ", "'f'", ",", " ", "'g'", "]", "\n", ">>> ", "letters", "\n", "['a', 'b', 'c', 'd', 'e', 'f', 'g']", "\n", ">>> ", "# replace some values", "\n", ">>> ", "letters", "[", "2", ":", "5", "]", " ", "=", " ", "[", "'C'", ",", " ", "'D'", ",", " ", "'E'", "]", "\n", ">>> ", "letters", "\n", "['a', 'b', 'C', 'D', 'E', 'f', 'g']", "\n", ">>> ", "# now remove them", "\n", ">>> ", "letters", "[", "2", ":", "5", "]", " ", "=", " ", "[]", "\n", ">>> ", "letters", "\n", "['a', 'b', 'f', 'g']", "\n", ">>> ", "# clear the list by replacing all the elements with an empty list", "\n", ">>> ", "letters", "[:]", " ", "=", " ", "[]", "\n", ">>> ", "letters", "\n", "[]", "\n", "\n", ">>> ", "letters", " ", "=", " ", "[", "'a'", ",", " ", "'b'", ",", " ", "'c'", ",", " ", "'d'", "]", "\n", ">>> ", "len", "(", "letters", ")", "\n", "4", "\n", "\n", ">>> ", "a", " ", "=", " ", "[", "'a'", ",", " ", "'b'", ",", " ", "'c'", "]", "\n", ">>> ", "n", " ", "=", " ", "[", "1", ",", " ", "2", ",", " ", "3", "]", "\n", ">>> ", "x", " ", "=", " ", "[", "a", ",", " ", "n", "]", "\n", ">>> ", "x", "\n", "[['a', 'b', 'c'], [1, 2, 3]]", "\n", ">>> ", "x", "[", "0", "]", "\n", "['a', 'b', 'c']", "\n", ">>> ", "x", "[", "0", "][", "1", "]", "\n", "'b'", "\n", "\n"]},
{"URL": "https://docs.python.org/3/tutorial/introduction.html", "Language": "Python", "M_Title": "3. An Informal Introduction to Python", "M_Desc": ["In the following examples, input and output are distinguished by the presence or\nabsence of prompts (", ">>>", " and ", "\u2026", "): to repeat the example, you must type\neverything after the prompt, when the prompt appears; lines that do not begin\nwith a prompt are output from the interpreter. Note that a secondary prompt on a\nline by itself in an example means you must type a blank line; this is used to\nend a multi-line command.", "Many of the examples in this manual, even those entered at the interactive\nprompt, include comments.  Comments in Python start with the hash character,\n", "#", ", and extend to the end of the physical line.  A comment may appear at the\nstart of a line or following whitespace or code, but not within a string\nliteral.  A hash character within a string literal is just a hash character.\nSince comments are to clarify code and are not interpreted by Python, they may\nbe omitted when typing in examples.", "Some examples:"], "M_Code": ["# this is the first comment", "\n", "spam", " ", "=", " ", "1", "  ", "# and this is the second comment", "\n          ", "# ... and now a third!", "\n", "text", " ", "=", " ", "\"# This is not a comment because it's inside quotes.\"", "\n", "\n"], "L2_Title": "3.2. First Steps Towards Programming", "L2_Desc": ["Of course, we can use Python for more complicated tasks than adding two and two\ntogether.  For instance, we can write an initial sub-sequence of the\n", "Fibonacci series", "\nas follows:", "This example introduces several new features.", "Footnotes"], "L2_Code": [">>> ", "# Fibonacci series:", "\n", "... ", "# the sum of two elements defines the next", "\n", "... ", "a", ",", " ", "b", " ", "=", " ", "0", ",", " ", "1", "\n", ">>> ", "while", " ", "a", " ", "<", " ", "10", ":", "\n", "... ", "    ", "print", "(", "a", ")", "\n", "... ", "    ", "a", ",", " ", "b", " ", "=", " ", "b", ",", " ", "a", "+", "b", "\n", "...", "\n", "0", "\n", "1", "\n", "1", "\n", "2", "\n", "3", "\n", "5", "\n", "8", "\n", "\n"], "L3_Title": "", "L3_Desc": [], "L3_Code": []}
]